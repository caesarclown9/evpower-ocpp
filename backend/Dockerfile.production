# Multi-stage production Dockerfile для EvPower Backend

# Stage 1: Builder
FROM python:3.11-slim AS builder

# Установка системных зависимостей
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Создание виртуального окружения
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Копирование и установка зависимостей
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim

# Установка dumb-init для правильной обработки сигналов
RUN apt-get update && apt-get install -y \
    dumb-init \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Создание non-root пользователя
RUN useradd -m -u 1000 evpower && \
    mkdir -p /var/log/evpower-ocpp && \
    chown -R evpower:evpower /var/log/evpower-ocpp

# Копирование виртуального окружения из builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Рабочая директория
WORKDIR /app

# Копирование только необходимых файлов приложения
COPY --chown=evpower:evpower app/ ./app/
COPY --chown=evpower:evpower ocpp_ws_server/ ./ocpp_ws_server/
COPY --chown=evpower:evpower start.sh ./

# Сделать start.sh исполняемым
RUN chmod +x start.sh

# Переключение на non-root пользователя
USER evpower

# Переменные окружения по умолчанию
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    APP_ENV=production \
    APP_PORT=9210 \
    OCPP_WS_PORT=80 \
    LOG_PATH=/var/log/evpower-ocpp

# Порты
EXPOSE 9210 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:9210/health || exit 1

# Запуск через dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["./start.sh"]