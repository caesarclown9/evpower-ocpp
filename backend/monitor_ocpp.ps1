# OCPP Log Monitor –¥–ª—è Windows PowerShell
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\monitor_ocpp.ps1 [-Station EVI-0011] [-Level INFO] [-Tail 10]

param(
    [string]$Station = "",
    [ValidateSet("DEBUG", "INFO", "WARNING", "ERROR")]
    [string]$Level = "INFO",
    [int]$Tail = 0
)

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
$Colors = @{
    DEBUG = "Cyan"
    INFO = "Green"
    WARNING = "Yellow"
    ERROR = "Red"
    STATION = "Magenta"
    BOLD = "White"
}

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
$LogLevels = @{
    DEBUG = 10
    INFO = 20
    WARNING = 30
    ERROR = 40
}

$MinLevel = $LogLevels[$Level]

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
$LogPath = "logs\ocpp_debug.log"
$ErrorPath = "logs\ocpp_errors.log"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (-not (Test-Path "logs")) {
    New-Item -ItemType Directory -Path "logs" | Out-Null
}

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (-not (Test-Path $LogPath)) {
    New-Item -ItemType File -Path $LogPath | Out-Null
}
if (-not (Test-Path $ErrorPath)) {
    New-Item -ItemType File -Path $ErrorPath | Out-Null
}

function Write-ColoredLog {
    param(
        [string]$Line
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞
    if ($Line -match ' - (DEBUG|INFO|WARNING|ERROR) - ') {
        $LogLevel = $Matches[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if ($LogLevels[$LogLevel] -lt $MinLevel) {
            return
        }
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏
        if ($Station -and $Line -notmatch $Station) {
            return
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        $Color = $Colors[$LogLevel]
        if (-not $Color) {
            $Color = "White"
        }
        
        # –í—ã–≤–æ–¥–∏–º —Å —Ü–≤–µ—Ç–æ–º
        if ($Line -match 'üîå|üö®|üî¥|üü¢|‚ùå|‚úÖ|üîç') {
            Write-Host $Line -ForegroundColor $Color
        } elseif ($Line -match 'EVI-\d+|Station [A-Z0-9-]+') {
            Write-Host $Line -ForegroundColor $Colors.STATION
        } else {
            Write-Host $Line -ForegroundColor $Color
        }
    } else {
        Write-Host $Line
    }
}

function Monitor-LogFile {
    param(
        [string]$FilePath,
        [ref]$Position
    )
    
    if (-not (Test-Path $FilePath)) {
        return
    }
    
    try {
        $FileStream = [System.IO.FileStream]::new($FilePath, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)
        $Reader = [System.IO.StreamReader]::new($FileStream)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
        $FileStream.Seek($Position.Value, [System.IO.SeekOrigin]::Begin) | Out-Null
        
        while (-not $Reader.EndOfStream) {
            $Line = $Reader.ReadLine()
            if ($Line) {
                Write-ColoredLog $Line
            }
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        $Position.Value = $FileStream.Position
        
        $Reader.Close()
        $FileStream.Close()
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ $FilePath : $_"
    }
}

# –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö
$LogPosition = [ref]0
$ErrorPosition = [ref]0

# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
if ($Tail -gt 0) {
    Write-Host "=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ $Tail —Å—Ç—Ä–æ–∫ ===" -ForegroundColor Yellow
    
    if (Test-Path $LogPath) {
        $Lines = Get-Content $LogPath -Tail $Tail
        foreach ($Line in $Lines) {
            Write-ColoredLog $Line
        }
    }
    
    Write-Host ("-" * 50) -ForegroundColor Gray
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
if (Test-Path $LogPath) {
    $LogPosition.Value = (Get-Item $LogPath).Length
}
if (Test-Path $ErrorPath) {
    $ErrorPosition.Value = (Get-Item $ErrorPath).Length
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
Write-Host "=== OCPP Log Monitor ===" -ForegroundColor White
Write-Host "–£—Ä–æ–≤–µ–Ω—å: $Level" -ForegroundColor $Colors[$Level]
if ($Station) {
    Write-Host "–°—Ç–∞–Ω—Ü–∏—è: $Station" -ForegroundColor $Colors.STATION
}
Write-Host "–§–∞–π–ª—ã: $LogPath, $ErrorPath"
Write-Host ("-" * 50) -ForegroundColor Gray
Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" -ForegroundColor Yellow
Write-Host ""

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try {
    while ($true) {
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
        Monitor-LogFile -FilePath $LogPath -Position $LogPosition
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ñ–∞–π–ª –æ—à–∏–±–æ–∫
        Monitor-LogFile -FilePath $ErrorPath -Position $ErrorPosition
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        Start-Sleep -Milliseconds 500
    }
}
catch {
    if ($_.Exception.GetType().Name -eq "PipelineStoppedException") {
        Write-Host "`n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow
    } else {
        Write-Error "–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $_"
    }
}

Write-Host "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green 