"""
Mobile API –¥–ª—è FlutterFlow –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ—Å—Ç—ã–µ POST endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–∫–æ–π
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
import uuid
import logging
from datetime import datetime

from ocpp_ws_server.redis_manager import redis_manager
from app.db.session import get_db
from app.db.models.ocpp import (
    Station, Location, OCPPStationStatus, OCPPTransaction, 
    OCPPMeterValue, ChargingSession, OCPPAuthorization
)
from sqlalchemy.orm import Session
from sqlalchemy import text

router = APIRouter(prefix="/api/mobile", tags=["mobile"])
logger = logging.getLogger(__name__)

# ============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================================

class ChargingStartRequest(BaseModel):
    station_id: str
    client_id: str
    connector_id: int
    energy_kwh: float  # —Å–∫–æ–ª—å–∫–æ –∫–í—Ç‚ãÖ—á –∑–∞–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç
    amount_rub: float  # —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç

class StopChargingRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class ChargingStatusRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class StationStatusRequest(BaseModel):
    station_id: str

# ============================================================================
# –û–°–ù–û–í–ù–´–ï ENDPOINTS (—Ç–æ–ª—å–∫–æ POST –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
# ============================================================================

@router.post("/charging/start")
async def start_charging(request: ChargingStartRequest, db: Session = Depends(get_db)):
    """
    –ó–∞–ø—É—Å–∫ –∑–∞—Ä—è–¥–∫–∏ —á–µ—Ä–µ–∑ mobile –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    """
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        station_query = """
            SELECT s.*, l.name as location_name, l.address as location_address 
            FROM stations s 
            JOIN locations l ON s.location_id = l.id 
            WHERE s.id = :station_id AND s.status = 'active'
        """
        station_result = db.execute(text(station_query), {"station_id": request.station_id})
        station = station_result.fetchone()
        
        if not station:
            return {
                "success": False, 
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
            }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_query = "SELECT * FROM clients WHERE id = :client_id"
        client_result = db.execute(text(client_query), {"client_id": request.client_id})
        client = client_result.fetchone()
        
        if not client:
            return {
                "success": False,
                "error": "client_not_found", 
                "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        connector_query = """
            SELECT * FROM connectors 
            WHERE station_id = :station_id 
            AND connector_number = :connector_id 
            AND status = 'Available'
        """
        connector_result = db.execute(text(connector_query), {
            "station_id": request.station_id,
            "connector_id": request.connector_id
        })
        connector = connector_result.fetchone()
        
        if not connector:
            return {
                "success": False,
                "error": "connector_unavailable",
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            }
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏ —É –∫–ª–∏–µ–Ω—Ç–∞
        active_session_query = """
            SELECT * FROM charging_sessions 
            WHERE client_id = :client_id 
            AND status IN ('active', 'preparing', 'charging')
        """
        active_session_result = db.execute(text(active_session_query), {"client_id": request.client_id})
        active_session = active_session_result.fetchone()
        
        if active_session:
            return {
                "success": False,
                "error": "session_already_active",
                "message": "–£ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞"
            }
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω –ª–∏ —Å—Ç–∞–Ω—Ü–∏—è —á–µ—Ä–µ–∑ Redis
        try:
            stations = await redis_manager.get_stations()
            if request.station_id not in stations:
                return {
                    "success": False,
                    "error": "station_offline", 
                    "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                }
        except Exception as e:
            logger.error(f"Redis error: {e}")
            return {
                "success": False,
                "error": "station_offline",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        
        # 6. üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        id_tag = f"CLIENT_{request.client_id}"
        
        auth_check_query = "SELECT * FROM ocpp_authorization WHERE client_id = :client_id"
        auth_result = db.execute(text(auth_check_query), {"client_id": request.client_id})
        auth_record = auth_result.fetchone()
        
        if not auth_record:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            auth_insert_query = """
                INSERT INTO ocpp_authorization (id_tag, status, client_id, created_at, updated_at)
                VALUES (:id_tag, 'Accepted', :client_id, NOW(), NOW())
            """
            db.execute(text(auth_insert_query), {
                "id_tag": id_tag,
                "client_id": request.client_id
            })
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id} —Å id_tag {id_tag}")
        else:
            id_tag = auth_record.id_tag
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {id_tag} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id}")
        
        # 7. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞—Ä—è–¥–∫–∏
        session_id = f"CS_{request.station_id}_{request.client_id}_{int(datetime.now().timestamp())}"
        
        session_insert_query = """
            INSERT INTO charging_sessions (
                id, station_id, client_id, connector_id, 
                start_time, status, energy_limit_kwh, amount_limit_rub,
                created_at, updated_at
            ) VALUES (
                :session_id, :station_id, :client_id, :connector_id,
                NOW(), 'preparing', :energy_kwh, :amount_rub,
                NOW(), NOW()
            )
        """
        
        db.execute(text(session_insert_query), {
            "session_id": session_id,
            "station_id": request.station_id,
            "client_id": request.client_id,
            "connector_id": request.connector_id,
            "energy_kwh": request.energy_kwh,
            "amount_rub": request.amount_rub
        })
        
        # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        update_connector_query = """
            UPDATE connectors 
            SET status = 'Preparing', last_status_update = NOW()
            WHERE station_id = :station_id AND connector_number = :connector_id
        """
        db.execute(text(update_connector_query), {
            "station_id": request.station_id,
            "connector_id": request.connector_id
        })
        
        db.commit()
        
        # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ Redis
        command = {
            "command": "RemoteStartTransaction",
            "payload": {
                "connectorId": request.connector_id,
                "idTag": id_tag,
                "session_id": session_id,
                "energy_limit": request.energy_kwh
            }
        }
        
        await redis_manager.publish_command(request.station_id, command)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ RemoteStartTransaction –¥–ª—è {request.station_id}")
        
        return {
            "success": True,
            "session_id": session_id,
            "id_tag": id_tag,
            "message": "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é",
            "station_name": station.location_name,
            "connector_id": request.connector_id,
            "energy_limit": request.energy_kwh,
            "amount_limit": request.amount_rub
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@router.post("/charging/stop")
async def stop_charging(request: StopChargingRequest, db: Session = Depends(get_db)):
    """üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É"""
    try:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        active_session_query = """
            SELECT * FROM charging_sessions 
            WHERE station_id = :station_id 
            AND client_id = :client_id 
            AND status IN ('preparing', 'active', 'charging')
            ORDER BY start_time DESC
            LIMIT 1
        """
        
        session_result = db.execute(text(active_session_query), {
            "station_id": request.station_id,
            "client_id": request.client_id
        })
        active_session = session_result.fetchone()
        
        if not active_session:
            return {
                "success": False,
                "error": "no_active_transaction",
                "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        session_id = active_session[0]  # id –ø–æ–ª–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        auth_query = "SELECT id_tag FROM ocpp_authorization WHERE client_id = :client_id"
        auth_result = db.execute(text(auth_query), {"client_id": request.client_id})
        auth_record = auth_result.fetchone()
        
        if not auth_record:
            return {
                "success": False,
                "error": "client_not_authorized",
                "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        update_session_query = """
            UPDATE charging_sessions 
            SET status = 'stopping', updated_at = NOW()
            WHERE id = :session_id
        """
        db.execute(text(update_session_query), {"session_id": session_id})
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Redis
        command = {
            "command": "RemoteStopTransaction",
            "payload": {
                "session_id": session_id,
                "client_id": request.client_id
            }
        }
        
        await redis_manager.publish_command(request.station_id, command)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ RemoteStopTransaction –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id}")
        
        return {
            "success": True,
            "session_id": session_id,
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error", 
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/charging/status")
async def get_charging_status(request: ChargingStatusRequest, db: Session = Depends(get_db)):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏"""
    try:
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        session_query = """
            SELECT * FROM charging_sessions 
            WHERE station_id = :station_id 
            AND client_id = :client_id 
            ORDER BY start_time DESC
            LIMIT 1
        """
        
        session_result = db.execute(text(session_query), {
            "station_id": request.station_id,
            "client_id": request.client_id
        })
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": True,
                "status": "no_transaction",
                "message": "–ó–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        session_id = session[0]  # id
        station_id = session[1]  # station_id
        client_id = session[2]  # client_id
        connector_id = session[3]  # connector_id
        start_time = session[4]  # start_time
        stop_time = session[5]  # stop_time
        status = session[6]  # status
        energy_consumed = session[7] or 0  # energy_consumed_kwh
        amount_charged = session[8] or 0  # amount_charged_rub
        energy_limit = session[9] or 0  # energy_limit_kwh
        amount_limit = session[10] or 0  # amount_limit_rub
        
        # –ï—Å–ª–∏ –∑–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        if status in ['preparing', 'active', 'charging']:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ charging_sessions
            pass
        
        return {
            "success": True,
            "status": status,
            "session_id": session_id,
            "connector_id": connector_id,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": stop_time.isoformat() if stop_time else None,
            "energy_delivered_kwh": round(float(energy_consumed), 2),
            "amount_charged_rub": round(float(amount_charged), 2),
            "energy_limit_kwh": round(float(energy_limit), 2),
            "amount_limit_rub": round(float(amount_limit), 2),
            "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if status in ['preparing', 'active', 'charging'] 
                      else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if status == 'completed'
                      else "–ó–∞—Ä—è–¥–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/station/status") 
async def get_station_status(request: StationStatusRequest, db: Session = Depends(get_db)):
    """üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JOIN
        result = db.execute(text("""
            SELECT 
                s.id,
                s.serial_number,
                s.model,
                s.manufacturer,
                s.status,
                s.power_capacity,
                s.connector_types,
                s.connectors_count,
                s.price_per_kwh,
                s.session_fee,
                s.currency,
                l.name as location_name,
                l.address as location_address,
                l.status as location_status
            FROM stations s
            LEFT JOIN locations l ON s.location_id = l.id
            WHERE s.id = :station_id
        """), {"station_id": request.station_id})
        
        station_data = result.fetchone()
        
        if not station_data:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_online = request.station_id in connected_stations
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        connectors_result = db.execute(text("""
            SELECT connector_number, connector_type, power_kw, status, error_code
            FROM connectors 
            WHERE station_id = :station_id 
            ORDER BY connector_number
        """), {"station_id": request.station_id})
        
        connectors = []
        available_count = 0
        occupied_count = 0
        faulted_count = 0
        
        for conn in connectors_result.fetchall():
            connector_status = conn[3]  # status
            connector_available = connector_status.lower() == "available" and is_online
            
            if connector_available:
                available_count += 1
            elif connector_status.lower() == "occupied":
                occupied_count += 1
            else:
                faulted_count += 1
            
            connectors.append({
                "id": conn[0],  # connector_number
                "type": conn[1],  # connector_type
                "status": "–°–≤–æ–±–æ–¥–µ–Ω" if connector_status.lower() == "available" 
                         else "–ó–∞–Ω—è—Ç" if connector_status.lower() == "occupied" 
                         else "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω",
                "available": connector_available,
                "power_kw": conn[2],  # power_kw
                "error": conn[4] if conn[4] and conn[4] != "NoError" else None
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "station_id": request.station_id,
            "serial_number": station_data[1],
            "model": station_data[2],
            "manufacturer": station_data[3],
            
            # –°—Ç–∞—Ç—É—Å—ã
            "online": is_online,
            "station_status": station_data[4],  # active/maintenance/inactive
            "location_status": station_data[13],  # active/maintenance/inactive
            "available_for_charging": is_online and station_data[4] == "active" and available_count > 0,
            
            # –õ–æ–∫–∞—Ü–∏—è
            "location_name": station_data[11],
            "location_address": station_data[12],
            
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            "connectors": connectors,
            "total_connectors": station_data[7],  # connectors_count
            "available_connectors": available_count,
            "occupied_connectors": occupied_count,
            "faulted_connectors": faulted_count,
            
            # –¢–∞—Ä–∏—Ñ—ã
            "tariff_rub_kwh": float(station_data[8]) if station_data[8] else 14.95,
            "session_fee": float(station_data[9]) if station_data[9] else 0.0,
            "currency": station_data[10] or "KGS",
            "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
            
            "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[4] == "active" 
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[4] == "maintenance"
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        } 