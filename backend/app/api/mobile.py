"""
üì± Mobile API endpoints –¥–ª—è FlutterFlow
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import Optional
import logging
from datetime import datetime, timezone

from app.db.session import get_db
from ocpp_ws_server.redis_manager import redis_manager
from pydantic import BaseModel, Field

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# Router
router = APIRouter(prefix="/api", tags=["mobile"])

# ================== Pydantic Models ==================

class ChargingStartRequest(BaseModel):
    """üîå –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∑–∞—Ä—è–¥–∫–∏"""
    client_id: str = Field(..., min_length=1, description="ID –∫–ª–∏–µ–Ω—Ç–∞")
    station_id: str = Field(..., min_length=1, description="ID —Å—Ç–∞–Ω—Ü–∏–∏")
    connector_id: int = Field(..., ge=1, description="–ù–æ–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
    energy_kwh: float = Field(..., gt=0, le=200, description="–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –≤ –∫–í—Ç‚ãÖ—á")
    amount_som: float = Field(..., gt=0, description="–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Å–æ–º–∞—Ö")

class ChargingStopRequest(BaseModel):
    """‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞—Ä—è–¥–∫–∏"""
    session_id: str = Field(..., min_length=1, description="ID —Å–µ—Å—Å–∏–∏ –∑–∞—Ä—è–¥–∫–∏")

# ================== API Endpoints ==================

@router.post("/charging/start")
async def start_charging(request: ChargingStartRequest, db: Session = Depends(get_db)):
    """üîå –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        if not client_check.fetchone():
            return {
                "success": False,
                "error": "client_not_found",
                "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

        # 2. üÜï –°–û–ó–î–ê–ï–ú –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ OCPP –°–†–ê–ó–£ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        id_tag = f"CLIENT_{request.client_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_check = db.execute(text("""
            SELECT id_tag FROM ocpp_authorization 
            WHERE id_tag = :id_tag
        """), {"id_tag": id_tag})
        
        if not auth_check.fetchone():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            db.execute(text("""
                INSERT INTO ocpp_authorization (id_tag, status, parent_id_tag) 
                VALUES (:id_tag, 'Accepted', NULL)
            """), {"id_tag": id_tag})
            logger.info(f"‚úÖ Created OCPP authorization for {id_tag}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é
        station_check = db.execute(text("""
            SELECT id, status FROM stations 
            WHERE id = :station_id AND status = 'active'
        """), {"station_id": request.station_id})
        
        station = station_check.fetchone()
        if not station:
            return {
                "success": False,
                "error": "station_unavailable",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        connector_check = db.execute(text("""
            SELECT connector_number, status FROM connectors 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})
        
        connector = connector_check.fetchone()
        if not connector:
            return {
                "success": False,
                "error": "connector_not_found", 
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        if connector[1] != "available":
            return {
                "success": False,
                "error": "connector_occupied",
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            }

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        active_session_check = db.execute(text("""
            SELECT id FROM charging_sessions 
            WHERE user_id = :client_id AND status = 'started'
        """), {"client_id": request.client_id})
        
        if active_session_check.fetchone():
            return {
                "success": False,
                "error": "session_already_active",
                "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏"
            }

        # 6. üÜï –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ –ù–ï–ó–ê–í–ò–°–ò–ú–û –û–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –°–¢–ê–ù–¶–ò–ò
        session_insert = db.execute(text("""
            INSERT INTO charging_sessions 
            (user_id, station_id, start_time, status, limit_type, limit_value)
            VALUES (:user_id, :station_id, :start_time, 'started', 'energy', :energy_kwh)
            RETURNING id
        """), {
            "user_id": request.client_id,
            "station_id": request.station_id,
            "start_time": datetime.now(timezone.utc),
            "energy_kwh": request.energy_kwh
        })
        
        session_id = session_insert.fetchone()[0]

        # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        db.execute(text("""
            UPDATE connectors 
            SET status = 'occupied' 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})

        # 8. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.commit()

        # 9. üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–ê–ù–¶–ò–ò (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)
        connected_stations = await redis_manager.get_stations()
        is_station_online = request.station_id in connected_stations
        
        if is_station_online:
            # 10. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Redis —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω
            command_data = {
                "action": "RemoteStartTransaction",
                "connector_id": request.connector_id,
                "id_tag": id_tag,
                "session_id": session_id,
                "limit_type": 'energy',
                "limit_value": request.energy_kwh
            }
            
            await redis_manager.publish_command(request.station_id, command_data)
            
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "amount_som": request.amount_som,
                "message": "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é",
                "station_online": True
            }
        else:
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ç–∞–Ω—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω - –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "amount_som": request.amount_som,
                "message": "–°–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞–Ω—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ - –∑–∞—Ä—è–¥–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.",
                "station_online": False
            }

    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/charging/stop")
async def stop_charging(request: ChargingStopRequest, db: Session = Depends(get_db)):
    """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É"""
    try:
        # 1. –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ session_id
        session_query = """
            SELECT cs.id, cs.station_id, cs.user_id, cs.transaction_id, cs.status
            FROM charging_sessions cs
            WHERE cs.id = :session_id 
            AND cs.status = 'started'
        """
        
        session_result = db.execute(text(session_query), {
            "session_id": request.session_id
        })
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "no_active_session",
                "message": "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

        session_id = session[0]
        station_id = session[1]
        user_id = session[2]
        transaction_id = session[3]

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        if station_id not in connected_stations:
            return {
                "success": False,
                "error": "station_offline", 
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
            }

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Redis
        command_data = {
            "action": "RemoteStopTransaction",
            "transaction_id": transaction_id,
            "session_id": session_id
        }
        
        await redis_manager.publish_command(station_id, command_data)
        
        logger.info(f"üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}")
        
        return {
            "success": True,
            "session_id": session_id,
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error", 
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.get("/charging/status/{session_id}")
async def get_charging_status(session_id: str, db: Session = Depends(get_db)):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏"""
    try:
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ ID
        session_query = """
            SELECT * FROM charging_sessions 
            WHERE id = :session_id
        """
        
        session_result = db.execute(text(session_query), {
            "session_id": session_id
        })
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "session_not_found",
                "message": "–°–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã)
        session_id = session[0]  # id
        user_id = session[1]  # user_id  
        station_id = session[2]  # station_id
        start_time = session[3]  # start_time
        stop_time = session[4]  # stop_time
        energy_consumed = session[5] or 0  # energy
        amount_charged = session[6] or 0  # amount
        status = session[7]  # status
        transaction_id = session[8]  # transaction_id
        limit_type = session[9]  # limit_type
        limit_value = session[10] or 0  # limit_value
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        progress_percent = 0
        estimated_completion = None
        
        if limit_type == "energy" and limit_value > 0:
            progress_percent = min(100, (float(energy_consumed) / float(limit_value)) * 100)
        elif limit_type == "amount" and limit_value > 0:
            progress_percent = min(100, (float(amount_charged) / float(limit_value)) * 100)
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        duration_minutes = 0
        if start_time:
            if stop_time:
                duration_minutes = int((stop_time - start_time).total_seconds() / 60)
            else:
                duration_minutes = int((datetime.now(timezone.utc) - start_time).total_seconds() / 60)
        
        return {
            "success": True,
            "session_id": session_id,
            "status": status,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": stop_time.isoformat() if stop_time else None,
            "duration_minutes": duration_minutes,
            "current_energy": round(float(energy_consumed), 2),
            "current_amount": round(float(amount_charged), 2),
            "limit_type": limit_type,
            "limit_value": round(float(limit_value), 2),
            "progress_percent": round(progress_percent, 1),
            "transaction_id": transaction_id,
            "station_id": station_id,
            "client_id": user_id,
            "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if status == 'started' 
                      else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if status == 'stopped'
                      else "–û—à–∏–±–∫–∞ –∑–∞—Ä—è–¥–∫–∏"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.get("/station/status/{station_id}") 
async def get_station_status(station_id: str, db: Session = Depends(get_db)):
    """üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JOIN
        result = db.execute(text("""
            SELECT 
                s.id,
                s.serial_number,
                s.model,
                s.manufacturer,
                s.status,
                s.power_capacity,
                s.connector_types,
                s.connectors_count,
                s.price_per_kwh,
                s.session_fee,
                s.currency,
                l.name as location_name,
                l.address as location_address,
                l.status as location_status
            FROM stations s
            LEFT JOIN locations l ON s.location_id = l.id
            WHERE s.id = :station_id
        """), {"station_id": station_id})
        
        station_data = result.fetchone()
        
        if not station_data:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_online = station_id in connected_stations
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        connectors_result = db.execute(text("""
            SELECT connector_number, connector_type, power_kw, status, error_code
            FROM connectors 
            WHERE station_id = :station_id 
            ORDER BY connector_number
        """), {"station_id": station_id})
        
        connectors = []
        available_count = 0
        occupied_count = 0
        faulted_count = 0
        
        for conn in connectors_result.fetchall():
            connector_status = conn[3]  # status
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ (3 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
            if connector_status == "available":
                connector_available = is_online  # –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω
                available_count += 1
                status_text = "–°–≤–æ–±–æ–¥–µ–Ω"
            elif connector_status == "occupied":
                connector_available = False
                occupied_count += 1
                status_text = "–ó–∞–Ω—è—Ç"
            elif connector_status == "faulted":
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            connectors.append({
                "id": conn[0],  # connector_number
                "type": conn[1],  # connector_type
                "status": status_text,
                "available": connector_available,
                "power_kw": conn[2],  # power_kw
                "error": conn[4] if conn[4] and conn[4] != "NoError" else None
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "station_id": station_id,
            "serial_number": station_data[1],
            "model": station_data[2],
            "manufacturer": station_data[3],
            
            # –°—Ç–∞—Ç—É—Å—ã
            "online": is_online,
            "station_status": station_data[4],  # active/maintenance/inactive
            "location_status": station_data[13],  # active/maintenance/inactive
            "available_for_charging": is_online and station_data[4] == "active" and available_count > 0,
            
            # –õ–æ–∫–∞—Ü–∏—è
            "location_name": station_data[11],
            "location_address": station_data[12],
            
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            "connectors": connectors,
            "total_connectors": station_data[7],  # connectors_count
            "available_connectors": available_count,
            "occupied_connectors": occupied_count,
            "faulted_connectors": faulted_count,
            
            # –¢–∞—Ä–∏—Ñ—ã
            "tariff_rub_kwh": float(station_data[8]) if station_data[8] else 14.95,
            "session_fee": float(station_data[9]) if station_data[9] else 0.0,
            "currency": station_data[10] or "KGS",
            "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
            
            "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[4] == "active" 
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[4] == "maintenance"
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        } 