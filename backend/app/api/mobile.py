"""
Mobile API –¥–ª—è FlutterFlow –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ—Å—Ç—ã–µ POST endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–∫–æ–π
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
import uuid
from datetime import datetime

from ocpp_ws_server.redis_manager import redis_manager
from app.db.session import get_db
from app.db.models.ocpp import (
    Station, Location, OCPPStationStatus, OCPPTransaction, 
    OCPPMeterValue, ChargingSession, OCPPAuthorization
)
from sqlalchemy.orm import Session
from sqlalchemy import text

router = APIRouter(prefix="/api/mobile", tags=["mobile"])

# ============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================================

class StartChargingRequest(BaseModel):
    station_id: str
    client_id: str
    connector_id: int
    energy_kwh: float  # —Å–∫–æ–ª—å–∫–æ –∫–í—Ç‚ãÖ—á –∑–∞–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç
    amount_rub: float  # —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç

class StopChargingRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class ChargingStatusRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class StationStatusRequest(BaseModel):
    station_id: str

# ============================================================================
# –û–°–ù–û–í–ù–´–ï ENDPOINTS (—Ç–æ–ª—å–∫–æ POST –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
# ============================================================================

@router.post("/charging/start")
async def start_charging(request: StartChargingRequest, db: Session = Depends(get_db)):
    """üöÄ –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É - –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
        station = db.query(Station).filter(Station.id == request.station_id).first()
        if not station:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î"
            }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        connected_stations = await redis_manager.get_stations()
        if request.station_id not in connected_stations:
            return {
                "success": False,
                "error": "station_offline",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –∫–æ—Ä–æ—Ç–∫–∏–π idTag
        session_id = f"CS_{request.station_id}_{str(uuid.uuid4())[:8]}"
        id_tag = f"CL{request.client_id[-6:]}"
        
        # 4. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î OCPP
        existing_auth = db.query(OCPPAuthorization).filter(
            OCPPAuthorization.id_tag == id_tag
        ).first()
        
        if not existing_auth:
            new_auth = OCPPAuthorization(
                id_tag=id_tag,
                status="Accepted",
                user_id=request.client_id
            )
            db.add(new_auth)
            db.commit()
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
        command_result = await redis_manager.publish_command(request.station_id, {
            "command": "RemoteStartTransaction",
            "payload": {
                "connectorId": request.connector_id,
                "idTag": id_tag
            }
        })
        
        if command_result == 0:
            return {
                "success": False,
                "error": "station_not_listening",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            }
        
        return {
            "success": True,
            "session_id": session_id,
            "id_tag": id_tag,
            "station_id": request.station_id,
            "connector_id": request.connector_id,
            "energy_kwh": request.energy_kwh,
            "amount_rub": request.amount_rub,
            "status": "command_sent",
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∑–∞—Ä—è–¥–∫–∏..."
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@router.post("/charging/stop")
async def stop_charging(request: StopChargingRequest, db: Session = Depends(get_db)):
    """üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É"""
    try:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        id_tag_pattern = f"%{request.client_id[-6:]}%"
        
        active_transaction = db.query(OCPPTransaction).filter(
            OCPPTransaction.station_id == request.station_id,
            OCPPTransaction.id_tag.like(id_tag_pattern),
            OCPPTransaction.status == "Started"
        ).order_by(OCPPTransaction.start_timestamp.desc()).first()
        
        if not active_transaction:
            return {
                "success": False,
                "error": "no_active_transaction",
                "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        transaction_id = active_transaction.transaction_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        command_result = await redis_manager.publish_command(request.station_id, {
            "command": "RemoteStopTransaction", 
            "payload": {
                "transactionId": transaction_id
            }
        })
        
        if command_result == 0:
            return {
                "success": False,
                "error": "station_not_listening",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            }
        
        return {
            "success": True,
            "transaction_id": transaction_id,
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error", 
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/charging/status")
async def get_charging_status(request: ChargingStatusRequest, db: Session = Depends(get_db)):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏"""
    try:
        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        id_tag_pattern = f"%{request.client_id[-6:]}%"
        
        transaction = db.query(OCPPTransaction).filter(
            OCPPTransaction.station_id == request.station_id,
            OCPPTransaction.id_tag.like(id_tag_pattern)
        ).order_by(OCPPTransaction.start_timestamp.desc()).first()
        
        if not transaction:
            return {
                "success": True,
                "status": "no_transaction",
                "message": "–ó–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        latest_meter = db.query(OCPPMeterValue).filter(
            OCPPMeterValue.station_id == request.station_id,
            OCPPMeterValue.transaction_id == transaction.transaction_id
        ).order_by(OCPPMeterValue.timestamp.desc()).first()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        energy_delivered = 0
        current_cost = 0
        
        if latest_meter and latest_meter.energy_active_import_register:
            energy_delivered = float(latest_meter.energy_active_import_register)
            current_cost = energy_delivered * 14.95  # –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
        
        return {
            "success": True,
            "status": transaction.status,
            "transaction_id": transaction.transaction_id,
            "connector_id": transaction.connector_id,
            "start_time": transaction.start_timestamp.isoformat(),
            "stop_time": transaction.stop_timestamp.isoformat() if transaction.stop_timestamp else None,
            "energy_delivered_kwh": round(energy_delivered, 2),
            "current_cost_rub": round(current_cost, 2),
            "meter_start": float(transaction.meter_start) if transaction.meter_start else 0,
            "meter_stop": float(transaction.meter_stop) if transaction.meter_stop else None,
            "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if transaction.status == "Started" else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/station/status") 
async def get_station_status(request: StationStatusRequest, db: Session = Depends(get_db)):
    """üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JOIN
        result = db.execute(text("""
            SELECT 
                s.id,
                s.serial_number,
                s.model,
                s.manufacturer,
                s.status,
                s.power_capacity,
                s.connector_types,
                s.connectors_count,
                s.price_per_kwh,
                s.session_fee,
                s.currency,
                l.name as location_name,
                l.address as location_address,
                l.status as location_status
            FROM stations s
            LEFT JOIN locations l ON s.location_id = l.id
            WHERE s.id = :station_id
        """), {"station_id": request.station_id})
        
        station_data = result.fetchone()
        
        if not station_data:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_online = request.station_id in connected_stations
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        connectors_result = db.execute(text("""
            SELECT connector_number, connector_type, power_kw, status, error_code
            FROM connectors 
            WHERE station_id = :station_id 
            ORDER BY connector_number
        """), {"station_id": request.station_id})
        
        connectors = []
        available_count = 0
        occupied_count = 0
        faulted_count = 0
        
        for conn in connectors_result.fetchall():
            connector_status = conn[3]  # status
            connector_available = connector_status.lower() == "available" and is_online
            
            if connector_available:
                available_count += 1
            elif connector_status.lower() == "occupied":
                occupied_count += 1
            else:
                faulted_count += 1
            
            connectors.append({
                "id": conn[0],  # connector_number
                "type": conn[1],  # connector_type
                "status": "–°–≤–æ–±–æ–¥–µ–Ω" if connector_status.lower() == "available" 
                         else "–ó–∞–Ω—è—Ç" if connector_status.lower() == "occupied" 
                         else "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω",
                "available": connector_available,
                "power_kw": conn[2],  # power_kw
                "error": conn[4] if conn[4] and conn[4] != "NoError" else None
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "station_id": request.station_id,
            "serial_number": station_data[1],
            "model": station_data[2],
            "manufacturer": station_data[3],
            
            # –°—Ç–∞—Ç—É—Å—ã
            "online": is_online,
            "station_status": station_data[4],  # active/maintenance/inactive
            "location_status": station_data[13],  # active/maintenance/inactive
            "available_for_charging": is_online and station_data[4] == "active" and available_count > 0,
            
            # –õ–æ–∫–∞—Ü–∏—è
            "location_name": station_data[11],
            "location_address": station_data[12],
            
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            "connectors": connectors,
            "total_connectors": station_data[7],  # connectors_count
            "available_connectors": available_count,
            "occupied_connectors": occupied_count,
            "faulted_connectors": faulted_count,
            
            # –¢–∞—Ä–∏—Ñ—ã
            "tariff_rub_kwh": float(station_data[8]) if station_data[8] else 14.95,
            "session_fee": float(station_data[9]) if station_data[9] else 0.0,
            "currency": station_data[10] or "KGS",
            "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
            
            "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[4] == "active" 
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[4] == "maintenance"
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        } 