"""
Mobile API –¥–ª—è FlutterFlow –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ—Å—Ç—ã–µ POST endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–∫–æ–π
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
import uuid
from datetime import datetime

from ocpp_ws_server.redis_manager import redis_manager
from app.db.session import get_db
from app.crud.ocpp_service import OCPPStationService, OCPPAuthorizationService

router = APIRouter(prefix="/api/mobile", tags=["mobile"])

# ============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================================

class StartChargingRequest(BaseModel):
    station_id: str
    client_id: str
    connector_id: int
    energy_kwh: float  # —Å–∫–æ–ª—å–∫–æ –∫–í—Ç‚ãÖ—á –∑–∞–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç
    amount_rub: float  # —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç

class StopChargingRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class ChargingStatusRequest(BaseModel):
    station_id: str
    client_id: str
    session_id: Optional[str] = None

class StationStatusRequest(BaseModel):
    station_id: str

# ============================================================================
# –û–°–ù–û–í–ù–´–ï ENDPOINTS (—Ç–æ–ª—å–∫–æ POST –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
# ============================================================================

@router.post("/charging/start")
async def start_charging(request: StartChargingRequest):
    """
    üöÄ –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É - –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω
    3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ OCPP
    5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    """
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        connected_stations = await redis_manager.get_stations()
        if request.station_id not in connected_stations:
            return {
                "success": False,
                "error": "station_offline",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –∫–æ—Ä–æ—Ç–∫–∏–π idTag
        session_id = str(uuid.uuid4())[:8]  # –∫–æ—Ä–æ—Ç–∫–∏–π ID
        id_tag = f"CL{request.client_id[-6:]}"  # CLIENT + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
        
        # 3. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î OCPP
        with next(get_db()) as db:
            # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            OCPPAuthorizationService.authorize_client(
                db, id_tag, request.client_id, "Accepted"
            )
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
        command_result = await redis_manager.publish_command(request.station_id, {
            "command": "RemoteStartTransaction",
            "payload": {
                "connectorId": request.connector_id,
                "idTag": id_tag
            }
        })
        
        if command_result == 0:  # –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            return {
                "success": False,
                "error": "station_not_listening",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            }
        
        # 5. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É
        return {
            "success": True,
            "session_id": session_id,
            "id_tag": id_tag,
            "station_id": request.station_id,
            "connector_id": request.connector_id,
            "energy_kwh": request.energy_kwh,
            "amount_rub": request.amount_rub,
            "status": "command_sent",
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∑–∞—Ä—è–¥–∫–∏..."
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@router.post("/charging/stop")
async def stop_charging(request: StopChargingRequest):
    """
    üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É
    """
    try:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
        with next(get_db()) as db:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            from app.models.ocpp import OCPPTransaction
            active_transaction = db.query(OCPPTransaction).filter(
                OCPPTransaction.station_id == request.station_id,
                OCPPTransaction.id_tag.like(f"%{request.client_id[-6:]}%"),
                OCPPTransaction.status == "started"
            ).order_by(OCPPTransaction.start_timestamp.desc()).first()
            
            if not active_transaction:
                return {
                    "success": False,
                    "error": "no_active_transaction",
                    "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            transaction_id = active_transaction.transaction_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        command_result = await redis_manager.publish_command(request.station_id, {
            "command": "RemoteStopTransaction", 
            "payload": {
                "transactionId": transaction_id
            }
        })
        
        if command_result == 0:
            return {
                "success": False,
                "error": "station_not_listening",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            }
        
        return {
            "success": True,
            "transaction_id": transaction_id,
            "message": "–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error", 
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/charging/status")
async def get_charging_status(request: ChargingStatusRequest):
    """
    üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ä—è–¥–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        with next(get_db()) as db:
            # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
            from app.models.ocpp import OCPPTransaction, OCPPMeterValues
            
            transaction = db.query(OCPPTransaction).filter(
                OCPPTransaction.station_id == request.station_id,
                OCPPTransaction.id_tag.like(f"%{request.client_id[-6:]}%")
            ).order_by(OCPPTransaction.start_timestamp.desc()).first()
            
            if not transaction:
                return {
                    "success": True,
                    "status": "no_transaction",
                    "message": "–ó–∞—Ä—è–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            latest_meter = db.query(OCPPMeterValues).filter(
                OCPPMeterValues.station_id == request.station_id,
                OCPPMeterValues.transaction_id == transaction.transaction_id
            ).order_by(OCPPMeterValues.timestamp.desc()).first()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            energy_delivered = 0
            current_cost = 0
            
            if latest_meter and latest_meter.sampled_values:
                for sample in latest_meter.sampled_values:
                    if sample.get('measurand') == 'Energy.Active.Import.Register':
                        energy_delivered = float(sample.get('value', 0)) / 1000  # Wh -> kWh
                        current_cost = energy_delivered * 14.95  # —Ç–∞—Ä–∏—Ñ —Å —ç–∫—Ä–∞–Ω–∞
                        break
            
            return {
                "success": True,
                "status": transaction.status,  # "started" –∏–ª–∏ "completed"
                "transaction_id": transaction.transaction_id,
                "connector_id": transaction.connector_id,
                "start_time": transaction.start_timestamp.isoformat(),
                "stop_time": transaction.stop_timestamp.isoformat() if transaction.stop_timestamp else None,
                "energy_delivered_kwh": round(energy_delivered, 2),
                "current_cost_rub": round(current_cost, 2),
                "meter_start": transaction.meter_start,
                "meter_stop": transaction.meter_stop,
                "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if transaction.status == "started" else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/station/status") 
async def get_station_status(request: StationStatusRequest):
    """
    üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∫ WebSocket
        connected_stations = await redis_manager.get_stations()
        is_online = request.station_id in connected_stations
        
        with next(get_db()) as db:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            station_query = """
                SELECT 
                    station_id,
                    serial_number,
                    station_status,
                    location_name,
                    location_status,
                    location_address,
                    total_connectors,
                    available_connectors,
                    occupied_connectors,
                    faulted_connectors,
                    is_available_for_charging,
                    price_per_kwh,
                    session_fee,
                    currency
                FROM station_status_summary 
                WHERE station_id = %s
            """
            cursor = db.execute(station_query, (request.station_id,))
            station_data = cursor.fetchone()
            
            if not station_data:
                return {
                    "success": False,
                    "error": "station_not_found",
                    "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞—Ö
            connectors_query = """
                SELECT connector_number, connector_type, power_kw, status, error_code
                FROM connectors 
                WHERE station_id = %s 
                ORDER BY connector_number
            """
            cursor = db.execute(connectors_query, (request.station_id,))
            db_connectors = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
            connectors = []
            for conn in db_connectors:
                connector_number = conn[0]
                
                connectors.append({
                    "id": connector_number,
                    "type": conn[1],  # connector_type
                    "status": "–°–≤–æ–±–æ–¥–µ–Ω" if conn[3] == "Available" 
                             else "–ó–∞–Ω—è—Ç" if conn[3] == "Occupied" 
                             else "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω",
                    "available": conn[3] == "Available" and is_online,
                    "power_kw": conn[2],  # power_kw
                    "error": conn[4] if conn[4] != "NoError" else None
                })
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É (–º–æ–∂–µ—Ç –±—ã—Ç—å Decimal)
            price_per_kwh = float(station_data[11]) if station_data[11] else 14.95
            session_fee = float(station_data[12]) if station_data[12] else 0.0
            
            return {
                "success": True,
                "station_id": request.station_id,
                "serial_number": station_data[1],
                
                # –°—Ç–∞—Ç—É—Å—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑ –ë–î)
                "online": is_online,
                "station_status": station_data[2],  # active/maintenance/inactive
                "location_status": station_data[4],  # active/maintenance/inactive
                "available_for_charging": station_data[10] and is_online,
                
                # –õ–æ–∫–∞—Ü–∏—è
                "location_name": station_data[3],
                "location_address": station_data[5],
                
                # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã (–¥–µ—Ç–∞–ª—å–Ω–æ)
                "connectors": connectors,
                "total_connectors": station_data[6],
                "available_connectors": station_data[7] if is_online else 0,
                "occupied_connectors": station_data[8],
                "faulted_connectors": station_data[9],
                
                # –¢–∞—Ä–∏—Ñ—ã
                "tariff_rub_kwh": price_per_kwh,
                "session_fee": session_fee,
                "currency": station_data[13] or "KGS",
                "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
                
                "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[2] == "active" 
                          else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[2] == "maintenance"
                          else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        } 