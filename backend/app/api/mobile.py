"""
üì± Mobile API endpoints –¥–ª—è FlutterFlow
"""
from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import Optional
import logging
from datetime import datetime, timezone
from decimal import Decimal

from app.db.session import get_db
from ocpp_ws_server.redis_manager import redis_manager
from pydantic import BaseModel, Field

# ============================================================================
# –ü–õ–ê–¢–ï–ñ–ù–´–ï ENDPOINTS O!DENGI
# ============================================================================

from app.schemas.ocpp import (
    BalanceTopupRequest, BalanceTopupResponse, 
    PaymentStatusResponse, PaymentWebhookData,
    ClientBalanceInfo, BalanceTopupInfo, PaymentTransactionInfo
)
from app.crud.ocpp_service import odengi_service, payment_service
from app.core.config import settings
from fastapi import BackgroundTasks

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# Router
router = APIRouter(prefix="/api", tags=["mobile"])

# ================== Pydantic Models ==================

class ChargingStartRequest(BaseModel):
    """üîå –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∑–∞—Ä—è–¥–∫–∏"""
    client_id: str = Field(..., min_length=1, description="ID –∫–ª–∏–µ–Ω—Ç–∞")
    station_id: str = Field(..., min_length=1, description="ID —Å—Ç–∞–Ω—Ü–∏–∏")
    connector_id: int = Field(..., ge=1, description="–ù–æ–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
    energy_kwh: float = Field(..., gt=0, le=200, description="–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –≤ –∫–í—Ç‚ãÖ—á")
    amount_som: float = Field(..., gt=0, description="–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Å–æ–º–∞—Ö")

class ChargingStopRequest(BaseModel):
    """‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞—Ä—è–¥–∫–∏"""
    session_id: str = Field(..., min_length=1, description="ID —Å–µ—Å—Å–∏–∏ –∑–∞—Ä—è–¥–∫–∏")

# ================== API Endpoints ==================

@router.post("/charging/start")
async def start_charging(request: ChargingStartRequest, db: Session = Depends(get_db)):
    """üîå –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–Ω—è—Ç–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return {
                "success": False,
                "error": "client_not_found",
                "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        station_check = db.execute(text("""
            SELECT s.id, s.status, s.price_per_kwh, tp.id as tariff_plan_id
            FROM stations s
            LEFT JOIN tariff_plans tp ON s.tariff_plan_id = tp.id
            WHERE s.id = :station_id AND s.status = 'active'
        """), {"station_id": request.station_id})
        
        station = station_check.fetchone()
        if not station:
            return {
                "success": False,
                "error": "station_unavailable",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ (–∏–∑ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞)
        rate_per_kwh = float(station[2])  # price_per_kwh –∏–∑ —Å—Ç–∞–Ω—Ü–∏–∏
        
        if station[3]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
            tariff_check = db.execute(text("""
                SELECT price FROM tariff_rules 
                WHERE tariff_plan_id = :tariff_plan_id 
                AND tariff_type = 'per_kwh' 
                AND is_active = true
                ORDER BY priority DESC LIMIT 1
            """), {"tariff_plan_id": station[3]})
            
            tariff_rule = tariff_check.fetchone()
            if tariff_rule:
                rate_per_kwh = float(tariff_rule[0])

        # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏
        estimated_cost = request.energy_kwh * rate_per_kwh
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        current_balance = Decimal(str(client[1]))
        if current_balance < Decimal(str(estimated_cost)):
            return {
                "success": False,
                "error": "insufficient_balance",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {current_balance} —Å–æ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {estimated_cost} —Å–æ–º",
                "current_balance": float(current_balance),
                "required_amount": estimated_cost,
                "missing_amount": estimated_cost - float(current_balance)
            }

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        connector_check = db.execute(text("""
            SELECT connector_number, status FROM connectors 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})
        
        connector = connector_check.fetchone()
        if not connector:
            return {
                "success": False,
                "error": "connector_not_found", 
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        if connector[1] != "available":
            return {
                "success": False,
                "error": "connector_occupied",
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            }
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        active_session_check = db.execute(text("""
            SELECT id FROM charging_sessions 
            WHERE user_id = :client_id AND status = 'started'
        """), {"client_id": request.client_id})
        
        if active_session_check.fetchone():
            return {
                "success": False,
                "error": "session_already_active",
                "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏"
            }

        # 8. –†–ï–ó–ï–†–í–ò–†–£–ï–ú –°–†–ï–î–°–¢–í–ê –ù–ê –ë–ê–õ–ê–ù–°–ï
        new_balance = payment_service.update_client_balance(
            db, request.client_id, Decimal(str(estimated_cost)), "subtract",
            f"–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {request.station_id}"
        )

        # 9. –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é OCPP
        id_tag = f"CLIENT_{request.client_id}"
        
        auth_check = db.execute(text("""
            SELECT id_tag FROM ocpp_authorization 
            WHERE id_tag = :id_tag
        """), {"id_tag": id_tag})
        
        if not auth_check.fetchone():
            db.execute(text("""
                INSERT INTO ocpp_authorization (id_tag, status, parent_id_tag, user_id) 
                VALUES (:id_tag, 'Accepted', NULL, :user_id)
            """), {"id_tag": id_tag, "user_id": request.client_id})

        # 10. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞—Ä—è–¥–∫–∏ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
        session_insert = db.execute(text("""
            INSERT INTO charging_sessions 
            (user_id, station_id, start_time, status, limit_type, limit_value, amount)
            VALUES (:user_id, :station_id, :start_time, 'started', 'energy', :energy_kwh, :amount)
            RETURNING id
        """), {
            "user_id": request.client_id,
            "station_id": request.station_id,
            "start_time": datetime.now(timezone.utc),
            "energy_kwh": request.energy_kwh,
            "amount": estimated_cost
        })
        
        session_id = session_insert.fetchone()[0]

        # 11. –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        payment_service.create_payment_transaction(
            db, request.client_id, "balance_topup",
            -Decimal(str(estimated_cost)), current_balance, new_balance,
            f"–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}",
            charging_session_id=session_id
        )

        # 12. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        db.execute(text("""
            UPDATE connectors 
            SET status = 'occupied' 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})

        # 13. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.commit()

        # 14. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_station_online = request.station_id in connected_stations
        
        if is_station_online:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Redis
            command_data = {
                "action": "RemoteStartTransaction",
                "connector_id": request.connector_id,
                "id_tag": id_tag,
                "session_id": session_id,
                "limit_type": 'energy',
                "limit_value": request.energy_kwh
            }
            
            await redis_manager.publish_command(request.station_id, command_data)
            
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã {estimated_cost} —Å–æ–º")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "rate_per_kwh": rate_per_kwh,
                "estimated_cost": estimated_cost,
                "reserved_amount": estimated_cost,
                "new_balance": float(new_balance),
                "message": "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã",
                "station_online": True
            }
        else:
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã, —Å—Ç–∞–Ω—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "rate_per_kwh": rate_per_kwh,
                "estimated_cost": estimated_cost,
                "reserved_amount": estimated_cost,
                "new_balance": float(new_balance),
                "message": "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞—Ä—è–¥–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏.",
                "station_online": False
            }

    except ValueError as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "balance_error",
            "message": str(e)
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/charging/stop")
async def stop_charging(request: ChargingStopRequest, db: Session = Depends(get_db)):
    """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        # 1. –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session_query = text("""
            SELECT cs.id, cs.user_id, cs.station_id, cs.start_time, cs.status, 
                   cs.limit_value, cs.amount, cs.energy, s.price_per_kwh,
                   tp.id as tariff_plan_id
            FROM charging_sessions cs
            LEFT JOIN stations s ON cs.station_id = s.id
            LEFT JOIN tariff_plans tp ON s.tariff_plan_id = tp.id
            WHERE cs.id = :session_id AND cs.status = 'started'
        """)
        
        session_result = db.execute(session_query, {"session_id": request.session_id})
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "session_not_found",
                "message": "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
        session_id, user_id, station_id, start_time, status = session[:5]
        limit_value, reserved_amount, actual_energy, price_per_kwh = session[5:9]
        tariff_plan_id = session[9]
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        rate_per_kwh = float(price_per_kwh)
        
        if tariff_plan_id:
            tariff_check = db.execute(text("""
                SELECT price FROM tariff_rules 
                WHERE tariff_plan_id = :tariff_plan_id 
                AND tariff_type = 'per_kwh' 
                AND is_active = true
                ORDER BY priority DESC LIMIT 1
            """), {"tariff_plan_id": tariff_plan_id})
            
            tariff_rule = tariff_check.fetchone()
            if tariff_rule:
                rate_per_kwh = float(tariff_rule[0])

        # 4. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        actual_energy_consumed = float(actual_energy) if actual_energy else 0
        
        # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if actual_energy_consumed == 0:
            ocpp_energy_query = text("""
                SELECT COALESCE(ot.meter_stop - ot.meter_start, 0) as consumed_energy
                FROM ocpp_transactions ot
                WHERE ot.charging_session_id = :session_id
                ORDER BY ot.created_at DESC LIMIT 1
            """)
            
            ocpp_result = db.execute(ocpp_energy_query, {"session_id": session_id})
            ocpp_energy = ocpp_result.fetchone()
            
            if ocpp_energy and ocpp_energy[0]:
                actual_energy_consumed = float(ocpp_energy[0])

        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        actual_cost = actual_energy_consumed * rate_per_kwh
        reserved_amount_decimal = Decimal(str(reserved_amount)) if reserved_amount else Decimal('0')
        actual_cost_decimal = Decimal(str(actual_cost))
        
        # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
        refund_amount = reserved_amount_decimal - actual_cost_decimal
        if refund_amount < 0:
            refund_amount = Decimal('0')

        # 7. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
        current_balance = payment_service.get_client_balance(db, user_id)

        # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        if refund_amount > 0:
            new_balance = payment_service.update_client_balance(
                db, user_id, refund_amount, "add",
                f"–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —Å–µ—Å—Å–∏—é {session_id}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
            payment_service.create_payment_transaction(
                db, user_id, "balance_topup",
                refund_amount,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                current_balance, new_balance,
                f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ —Å–µ—Å—Å–∏—é {session_id}: –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á",
                charging_session_id=session_id
            )
        else:
            new_balance = current_balance

        # 9. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∑–∞—Ä—è–¥–∫–∏
        update_session = text("""
            UPDATE charging_sessions 
            SET stop_time = NOW(), status = 'stopped', 
                energy = :actual_energy, amount = :actual_cost
            WHERE id = :session_id
        """)
        
        db.execute(update_session, {
            "actual_energy": actual_energy_consumed,
            "actual_cost": actual_cost,
            "session_id": session_id
        })

        # 10. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        connector_update = text("""
            UPDATE connectors 
            SET status = 'available' 
            WHERE station_id = :station_id
        """)
        db.execute(connector_update, {"station_id": station_id})

        # 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Redis
        connected_stations = await redis_manager.get_stations()
        is_station_online = station_id in connected_stations
        
        if is_station_online:
            # –ü–æ–ª—É—á–∞–µ–º OCPP transaction_id
            ocpp_transaction_query = text("""
                SELECT transaction_id FROM ocpp_transactions 
                WHERE charging_session_id = :session_id 
                AND status = 'Started'
                ORDER BY created_at DESC LIMIT 1
            """)
            
            ocpp_result = db.execute(ocpp_transaction_query, {"session_id": session_id})
            ocpp_transaction = ocpp_result.fetchone()
            
            if ocpp_transaction:
                command_data = {
                    "action": "RemoteStopTransaction",
                    "transaction_id": ocpp_transaction[0]
                }
                
                await redis_manager.publish_command(station_id, command_data)

        # 12. –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()

        logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á, "
                   f"—Å–ø–∏—Å–∞–Ω–æ {actual_cost} —Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount} —Å–æ–º")
        
        return {
            "success": True,
            "session_id": session_id,
            "station_id": station_id,
            "client_id": user_id,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": datetime.now(timezone.utc).isoformat(),
            "energy_consumed": actual_energy_consumed,
            "rate_per_kwh": rate_per_kwh,
            "reserved_amount": float(reserved_amount_decimal),
            "actual_cost": actual_cost,
            "refund_amount": float(refund_amount),
            "new_balance": float(new_balance),
            "message": f"–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á, "
                      f"—Å–ø–∏—Å–∞–Ω–æ {actual_cost} —Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount} —Å–æ–º",
            "station_online": is_station_online
        }

    except ValueError as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "balance_error",
            "message": str(e)
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error", 
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.get("/charging/status/{session_id}")
async def get_charging_status(session_id: str, db: Session = Depends(get_db)):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ OCPP"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN –∫ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        session_query = text("""
            SELECT 
                cs.id, cs.user_id, cs.station_id, cs.start_time, cs.stop_time,
                cs.energy, cs.amount, cs.status, cs.transaction_id,
                cs.limit_type, cs.limit_value,
                ot.transaction_id as ocpp_transaction_id,
                ot.meter_start, ot.meter_stop, ot.status as ocpp_status,
                s.price_per_kwh
            FROM charging_sessions cs
            LEFT JOIN ocpp_transactions ot ON cs.id = ot.charging_session_id 
                OR cs.transaction_id = CAST(ot.transaction_id AS TEXT)
            LEFT JOIN stations s ON cs.station_id = s.id
            WHERE cs.id = :session_id
        """)
        
        session_result = db.execute(session_query, {"session_id": session_id})
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "session_not_found",
                "message": "–°–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        session_id = session[0]
        user_id = session[1]
        station_id = session[2]
        start_time = session[3]
        stop_time = session[4]
        energy_consumed = session[5] or 0
        amount_charged = session[6] or 0
        status = session[7]
        transaction_id = session[8]
        limit_type = session[9]
        limit_value = session[10] or 0
        ocpp_transaction_id = session[11]
        meter_start = session[12]
        meter_stop = session[13]
        ocpp_status = session[14]
        price_per_kwh = session[15] or 6.5
        
        # üÜï –£–õ–£–ß–®–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ OCPP
        actual_energy_consumed = float(energy_consumed)
        actual_cost = float(amount_charged)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å OCPP –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        if meter_start is not None and meter_stop is not None:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ OCPP meter values
            ocpp_energy_wh = float(meter_stop) - float(meter_start)
            actual_energy_consumed = max(ocpp_energy_wh / 1000.0, actual_energy_consumed)  # Wh ‚Üí kWh
            actual_cost = actual_energy_consumed * float(price_per_kwh)
        elif meter_start is not None and status == 'started':
            # –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ meter_values
            latest_meter_query = text("""
                SELECT mv.value 
                FROM ocpp_meter_values mv
                JOIN ocpp_transactions ot ON mv.transaction_id = ot.id
                WHERE ot.charging_session_id = :session_id 
                AND mv.measurand = 'Energy.Active.Import.Register'
                ORDER BY mv.timestamp DESC LIMIT 1
            """)
            latest_result = db.execute(latest_meter_query, {"session_id": session_id})
            latest_meter = latest_result.fetchone()
            
            if latest_meter and latest_meter[0]:
                current_meter = float(latest_meter[0])
                ocpp_energy_wh = current_meter - float(meter_start)
                actual_energy_consumed = max(ocpp_energy_wh / 1000.0, actual_energy_consumed)
                actual_cost = actual_energy_consumed * float(price_per_kwh)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_percent = 0
        if limit_type == "energy" and limit_value > 0:
            progress_percent = min(100, (actual_energy_consumed / float(limit_value)) * 100)
        elif limit_type == "amount" and limit_value > 0:
            progress_percent = min(100, (actual_cost / float(limit_value)) * 100)
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        duration_minutes = 0
        if start_time:
            end_time = stop_time or datetime.now(timezone.utc)
            duration_minutes = int((end_time - start_time).total_seconds() / 60)
        
        # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø: energy_consumed –∏ cost –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        return {
            "success": True,
            "session_id": session_id,
            "status": status,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": stop_time.isoformat() if stop_time else None,
            "duration_minutes": duration_minutes,
            
            # üÜï –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
            "energy_consumed": round(actual_energy_consumed, 3),  # –í –∫–í—Ç‚ãÖ—á
            "cost": round(actual_cost, 2),  # –í —Å–æ–º–∞—Ö
            
            # –î—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            "current_energy": round(actual_energy_consumed, 3),
            "current_amount": round(actual_cost, 2),
            
            # –õ–∏–º–∏—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            "limit_type": limit_type,
            "limit_value": round(float(limit_value), 2),
            "progress_percent": round(progress_percent, 1),
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "transaction_id": transaction_id,
            "ocpp_transaction_id": ocpp_transaction_id,
            "station_id": station_id,
            "client_id": user_id,
            "rate_per_kwh": float(price_per_kwh),
            
            # OCPP —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            "ocpp_status": ocpp_status,
            "has_meter_data": meter_start is not None,
            
            "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if status == 'started' 
                      else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if status == 'stopped'
                      else "–û—à–∏–±–∫–∞ –∑–∞—Ä—è–¥–∫–∏"
        }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

@router.get("/station/status/{station_id}") 
async def get_station_status(station_id: str, db: Session = Depends(get_db)):
    """üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JOIN
        result = db.execute(text("""
                SELECT 
                s.id,
                s.serial_number,
                s.model,
                s.manufacturer,
                s.status,
                s.power_capacity,
                s.connector_types,
                s.connectors_count,
                s.price_per_kwh,
                s.session_fee,
                s.currency,
                l.name as location_name,
                l.address as location_address,
                l.status as location_status
            FROM stations s
            LEFT JOIN locations l ON s.location_id = l.id
            WHERE s.id = :station_id
        """), {"station_id": station_id})
        
        station_data = result.fetchone()
            
        if not station_data:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_online = station_id in connected_stations
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        connectors_result = db.execute(text("""
                SELECT connector_number, connector_type, power_kw, status, error_code
                FROM connectors 
            WHERE station_id = :station_id 
                ORDER BY connector_number
        """), {"station_id": station_id})
        
        connectors = []
        available_count = 0
        occupied_count = 0
        faulted_count = 0
        
        for conn in connectors_result.fetchall():
            connector_status = conn[3]  # status
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ (3 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
            if connector_status == "available":
                connector_available = is_online  # –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω
                available_count += 1
                status_text = "–°–≤–æ–±–æ–¥–µ–Ω"
            elif connector_status == "occupied":
                connector_available = False
                occupied_count += 1
                status_text = "–ó–∞–Ω—è—Ç"
            elif connector_status == "faulted":
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                connectors.append({
                "id": conn[0],  # connector_number
                    "type": conn[1],  # connector_type
                "status": status_text,
                "available": connector_available,
                    "power_kw": conn[2],  # power_kw
                "error": conn[4] if conn[4] and conn[4] != "NoError" else None
                })
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "station_id": station_id,
            "serial_number": station_data[1],
            "model": station_data[2],
            "manufacturer": station_data[3],
            
            # –°—Ç–∞—Ç—É—Å—ã
            "online": is_online,
            "station_status": station_data[4],  # active/maintenance/inactive
            "location_status": station_data[13],  # active/maintenance/inactive
            "available_for_charging": is_online and station_data[4] == "active" and available_count > 0,
            
            # –õ–æ–∫–∞—Ü–∏—è
            "location_name": station_data[11],
            "location_address": station_data[12],
            
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            "connectors": connectors,
            "total_connectors": station_data[7],  # connectors_count
            "available_connectors": available_count,
            "occupied_connectors": occupied_count,
            "faulted_connectors": faulted_count,
            
            # –¢–∞—Ä–∏—Ñ—ã
            "tariff_rub_kwh": float(station_data[8]) if station_data[8] else 14.95,
            "session_fee": float(station_data[9]) if station_data[9] else 0.0,
            "currency": station_data[10] or "KGS",
            "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
            
            "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[4] == "active" 
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[4] == "maintenance"
                          else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
            
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        } 

# ============================================================================
# –ü–õ–ê–¢–ï–ñ–ù–´–ï ENDPOINTS O!DENGI
# ============================================================================

@router.post("/balance/topup", response_model=BalanceTopupResponse)
async def create_balance_topup(
    request: BalanceTopupRequest, 
    db: Session = Depends(get_db)
) -> BalanceTopupResponse:
    """üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return BalanceTopupResponse(
                success=False,
                error="client_not_found",
                client_id=request.client_id
            )

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ order_id
        order_id = odengi_service.generate_secure_order_id("topup", request.client_id)
        
        # 3. –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id} –Ω–∞ {request.amount} —Å–æ–º"
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ O!Dengi
        amount_kopecks = int(request.amount * 100)
        odengi_response = await odengi_service.create_invoice(
            order_id=order_id,
            description=description,
            amount_kopecks=amount_kopecks
        )
        
        if not odengi_response.get("invoice_id"):
            return BalanceTopupResponse(
                success=False,
                error="odengi_error",
                client_id=request.client_id
            )

        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        topup_insert = db.execute(text("""
            INSERT INTO balance_topups 
            (invoice_id, order_id, merchant_id, client_id, requested_amount, 
             currency, description, qr_code_url, app_link, status, odengi_status)
            VALUES (:invoice_id, :order_id, :merchant_id, :client_id, :requested_amount,
                    :currency, :description, :qr_code_url, :app_link, 'pending', 0)
            RETURNING id
        """), {
            "invoice_id": odengi_response["invoice_id"],
            "order_id": order_id,
            "merchant_id": settings.ODENGI_MERCHANT_ID,
            "client_id": request.client_id,
            "requested_amount": request.amount,
            "currency": settings.DEFAULT_CURRENCY,
            "description": description,
            "qr_code_url": odengi_response.get("qr"),
            "app_link": odengi_response.get("link_app")
        })
        
        db.commit()
        
        logger.info(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {order_id}, invoice_id: {odengi_response['invoice_id']}")
        
        return BalanceTopupResponse(
            success=True,
            invoice_id=odengi_response["invoice_id"],
            order_id=order_id,
            qr_code=odengi_response.get("qr"),
            app_link=odengi_response.get("link_app"),
            amount=request.amount,
            client_id=request.client_id,
            current_balance=float(client[1])  # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return BalanceTopupResponse(
            success=False,
            error=f"internal_error: {str(e)}",
            client_id=request.client_id
        )

@router.get("/payment/status/{invoice_id}", response_model=PaymentStatusResponse)
async def get_payment_status(
    invoice_id: str,
    db: Session = Depends(get_db)
) -> PaymentStatusResponse:
    """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞—Ä—è–¥–∫–∞)"""
    try:
        # 1. –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
        topup_check = db.execute(text("""
            SELECT id, invoice_id, order_id, client_id, requested_amount, status, odengi_status
            FROM balance_topups WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        topup = topup_check.fetchone()
        
        if not topup:
            return PaymentStatusResponse(
                success=False,
                status=0,
                status_text="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                error="payment_not_found"
            )

        # 2. –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ O!Dengi
        odengi_response = await odengi_service.get_payment_status(
            invoice_id=invoice_id,
            order_id=topup[2]  # order_id
        )
        
        odengi_status = odengi_response.get('status', 0)
        paid_amount = odengi_response.get('amount', 0) / 100 if odengi_response.get('amount') else None
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status_mapping = {
            0: "pending",
            1: "paid",
            2: "cancelled", 
            3: "refunded",
            4: "partial_refund"
        }
        
        new_status = status_mapping.get(odengi_status, "pending")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        if topup[5] != new_status:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            db.execute(text("""
                UPDATE balance_topups 
                SET status = :new_status, odengi_status = :odengi_status,
                    paid_amount = :paid_amount, updated_at = NOW()
                WHERE invoice_id = :invoice_id
            """), {
                "new_status": new_status,
                "odengi_status": odengi_status,
                "paid_amount": paid_amount,
                "invoice_id": invoice_id
            })
            
            db.commit()
        
        # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        can_proceed = odengi_service.can_proceed(odengi_status)
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {new_status} (O!Dengi: {odengi_status})")
        
        return PaymentStatusResponse(
            success=True,
            status=odengi_status,
            status_text=odengi_service.get_status_text(odengi_status),
            amount=float(topup[4]),  # requested_amount
            paid_amount=paid_amount,
            invoice_id=invoice_id,
            can_proceed=can_proceed,
            can_start_charging=False  # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –¥–∞–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—Ä—è–¥–∫–µ
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
        return PaymentStatusResponse(
            success=False,
            status=0,
            status_text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
            error=f"internal_error: {str(e)}"
        )

@router.post("/payment/webhook")
async def handle_payment_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç O!Dengi"""
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–ø–∏—Å–∏
        payload = await request.body()
        webhook_signature = request.headers.get('X-O-Dengi-Signature', '')
        
        # 2. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
        if not odengi_service.verify_webhook_signature(payload, webhook_signature):
            logger.warning(f"Invalid webhook signature from {request.client.host}")
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        # 3. –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–∞–Ω–Ω—ã—Ö
        webhook_data = PaymentWebhookData.parse_raw(payload)
        
        # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è order_id
        if not odengi_service.validate_order_id(webhook_data.order_id):
            logger.warning(f"Invalid order_id in webhook: {webhook_data.order_id}")
            raise HTTPException(status_code=400, detail="Invalid order_id")
        
        # 5. –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
        topup_check = db.execute(text("""
            SELECT id, client_id, requested_amount, status FROM balance_topups 
            WHERE invoice_id = :invoice_id
        """), {"invoice_id": webhook_data.invoice_id})
        
        topup = topup_check.fetchone()
        
        if not topup:
            logger.warning(f"Payment not found for webhook: {webhook_data.invoice_id}")
            return {"status": "payment_not_found"}
        
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        if topup and webhook_data.status == 1:  # –û–ø–ª–∞—á–µ–Ω–æ
            background_tasks.add_task(
                process_balance_topup,
                topup[0],  # topup_id
                topup[1],  # client_id
                webhook_data.paid_amount / 100 if webhook_data.paid_amount else topup[2],  # amount
                webhook_data.invoice_id
            )
        
        return {"status": "received", "invoice_id": webhook_data.invoice_id}
        
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")

@router.get("/balance/{client_id}", response_model=ClientBalanceInfo)
async def get_client_balance(client_id: str, db: Session = Depends(get_db)) -> ClientBalanceInfo:
    """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
        client_info = db.execute(text("""
            SELECT id, balance, updated_at FROM clients WHERE id = :client_id
        """), {"client_id": client_id})
        
        client = client_info.fetchone()
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        last_topup = db.execute(text("""
            SELECT paid_at FROM balance_topups 
            WHERE client_id = :client_id AND status = 'paid'
            ORDER BY paid_at DESC LIMIT 1
        """), {"client_id": client_id})
        
        last_topup_date = last_topup.fetchone()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
        total_spent = db.execute(text("""
            SELECT COALESCE(SUM(amount), 0) FROM payment_transactions_odengi 
            WHERE client_id = :client_id AND transaction_type = 'charging_payment'
        """), {"client_id": client_id})
        
        spent_amount = total_spent.fetchone()[0]
        
        return ClientBalanceInfo(
            client_id=client_id,
            balance=float(client[1]),
            currency=settings.DEFAULT_CURRENCY,
            last_topup_at=last_topup_date[0] if last_topup_date else None,
            total_spent=float(spent_amount) if spent_amount else 0
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

# ============================================================================
# BACKGROUND TASKS –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
# ============================================================================

async def process_balance_topup(topup_id: int, client_id: str, amount: float, invoice_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        with next(get_db()) as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = payment_service.get_client_balance(db, client_id)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            new_balance = payment_service.update_client_balance(
                db, client_id, Decimal(str(amount)), "add",
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ O!Dengi (invoice: {invoice_id})"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            payment_service.create_payment_transaction(
                db, client_id, "balance_topup", 
                Decimal(str(amount)), current_balance, new_balance,
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ O!Dengi",
                balance_topup_id=topup_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            db.execute(text("""
                UPDATE balance_topups 
                SET status = 'paid', paid_at = NOW(), paid_amount = :amount
                WHERE id = :topup_id
            """), {"amount": amount, "topup_id": topup_id})
            
            db.commit()
            
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: –∫–ª–∏–µ–Ω—Ç {client_id}, —Å—É–º–º–∞ {amount}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}") 