"""
üì± Mobile API endpoints –¥–ª—è FlutterFlow
"""
from fastapi import APIRouter, Depends, HTTPException, Request, BackgroundTasks
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import Optional
import asyncio
import logging
from datetime import datetime, timezone
from decimal import Decimal

from app.db.session import get_db
from ocpp_ws_server.redis_manager import redis_manager
from pydantic import BaseModel, Field, validator

from app.services.payment_provider_service import get_payment_provider_service, get_qr_payment_service, get_card_payment_service
from app.services.obank_service import obank_service
# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ - client_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ FlutterFlow

# ============================================================================
# –ü–õ–ê–¢–ï–ñ–ù–´–ï ENDPOINTS O!DENGI
# ============================================================================

from app.schemas.ocpp import (
    BalanceTopupRequest, BalanceTopupResponse, 
    PaymentStatusResponse, PaymentWebhookData,
    ClientBalanceInfo, BalanceTopupInfo, PaymentTransactionInfo,
    H2HPaymentRequest, H2HPaymentResponse,
    TokenPaymentRequest, TokenPaymentResponse,
    CreateTokenRequest, CreateTokenResponse
)
from app.crud.ocpp_service import payment_service, payment_lifecycle_service
from app.core.config import settings

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# Router
router = APIRouter(prefix="/api", tags=["mobile"])

# ================== Pydantic Models ==================

class ChargingStartRequest(BaseModel):
    """üîå –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∑–∞—Ä—è–¥–∫–∏"""
    client_id: str = Field(..., min_length=1, description="ID –∫–ª–∏–µ–Ω—Ç–∞")
    station_id: str = Field(..., min_length=1, description="ID —Å—Ç–∞–Ω—Ü–∏–∏")
    connector_id: int = Field(..., ge=1, description="–ù–æ–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
    energy_kwh: Optional[float] = Field(None, gt=0, le=200, description="–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –≤ –∫–í—Ç‚ãÖ—á")
    amount_som: Optional[float] = Field(None, gt=0, description="–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Å–æ–º–∞—Ö")
    
    @validator('amount_som', 'energy_kwh')
    def validate_limits(cls, v, values):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞—Ä—è–¥–∫–∏"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 3 —Ä–µ–∂–∏–º–∞:
        # 1. energy_kwh + amount_som - –ª–∏–º–∏—Ç –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
        # 2. –¢–æ–ª—å–∫–æ amount_som - –ª–∏–º–∏—Ç –ø–æ —Å—É–º–º–µ
        # 3. –ù–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞
        return v

class ChargingStopRequest(BaseModel):
    """‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞—Ä—è–¥–∫–∏"""
    session_id: str = Field(..., min_length=1, description="ID —Å–µ—Å—Å–∏–∏ –∑–∞—Ä—è–¥–∫–∏")

# ================== API Endpoints ==================

@router.post("/charging/start")
async def start_charging(
    request: ChargingStartRequest, 
    db: Session = Depends(get_db)
):
    """üîå –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–Ω—è—Ç–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    logger.info(f"Starting charging: client_id={request.client_id}, station_id={request.station_id}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return {
                "success": False,
                "error": "client_not_found",
                "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
        station_check = db.execute(text("""
            SELECT s.id, s.status, s.price_per_kwh, tp.id as tariff_plan_id
            FROM stations s
            LEFT JOIN tariff_plans tp ON s.tariff_plan_id = tp.id
            WHERE s.id = :station_id AND s.status = 'active'
        """), {"station_id": request.station_id})
        
        station = station_check.fetchone()
        if not station:
            return {
                "success": False,
                "error": "station_unavailable",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ: –ü–†–ò–û–†–ò–¢–ï–¢ –°–¢–ê–ù–¶–ò–ò –Ω–∞–¥ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º
        rate_per_kwh = 13.5  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ —Å—Ç–∞–Ω—Ü–∏–∏
        if station[2]:  # –ï—Å–ª–∏ —É —Å—Ç–∞–Ω—Ü–∏–∏ –µ—Å—Ç—å price_per_kwh
            rate_per_kwh = float(station[2])
        elif station[3]:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É —Å—Ç–∞–Ω—Ü–∏–∏ –ù–ï–¢ —Ç–∞—Ä–∏—Ñ–∞ - –∏—â–µ–º –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º –ø–ª–∞–Ω–µ
            tariff_check = db.execute(text("""
                SELECT price FROM tariff_rules 
                WHERE tariff_plan_id = :tariff_plan_id 
                AND tariff_type = 'per_kwh' 
                AND is_active = true
                ORDER BY priority DESC LIMIT 1
            """), {"tariff_plan_id": station[3]})
            
            tariff_rule = tariff_check.fetchone()
            if tariff_rule:
                rate_per_kwh = float(tariff_rule[0])

        # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞—â–∏—Ç–æ–π
        current_balance = Decimal(str(client[1]))
        
        if request.energy_kwh and request.amount_som:
            # –†–ï–ñ–ò–ú 1: –õ–∏–º–∏—Ç –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ + –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            estimated_cost = request.energy_kwh * rate_per_kwh
            reservation_amount = min(estimated_cost, request.amount_som)
            
        elif request.amount_som:
            # –†–ï–ñ–ò–ú 2: –õ–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å—É–º–º–µ
            max_allowed_amount = min(float(current_balance), request.amount_som)
            
            if request.amount_som > float(current_balance):
                return {
                    "success": False,
                    "error": "amount_exceeds_balance",
                    "message": f"–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ ({request.amount_som} —Å–æ–º) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å ({current_balance} —Å–æ–º)",
                    "current_balance": float(current_balance),
                    "max_allowed_amount": float(current_balance),
                    "requested_amount": request.amount_som
                }
            
            estimated_cost = 0  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ñ–∞–∫—Ç—É
            reservation_amount = max_allowed_amount
            
        elif request.energy_kwh:
            # –†–ï–ñ–ò–ú 3: –õ–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ (—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å)
            estimated_cost = request.energy_kwh * rate_per_kwh
            reservation_amount = estimated_cost
            
        else:
            # –†–ï–ñ–ò–ú 4: üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–ó–õ–ò–ú–ò–¢–ù–ê–Ø –ó–ê–†–Ø–î–ö–ê
            # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º 200 —Å–æ–º –∏–ª–∏ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ
            estimated_cost = 0  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ñ–∞–∫—Ç—É
            max_reservation = 200.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏
            reservation_amount = min(float(current_balance), max_reservation)
            
            if current_balance <= 0:
                return {
                    "success": False,
                    "error": "zero_balance",
                    "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏",
                    "current_balance": float(current_balance)
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞
            min_reservation = 10.0  # –ú–∏–Ω–∏–º—É–º 10 —Å–æ–º –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
            if reservation_amount < min_reservation:
                return {
                    "success": False,
                    "error": "insufficient_balance",
                    "message": f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏: {min_reservation} —Å–æ–º. –ë–∞–ª–∞–Ω—Å: {current_balance} —Å–æ–º",
                    "current_balance": float(current_balance),
                    "required_amount": min_reservation
                }
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        if current_balance < Decimal(str(reservation_amount)):
            return {
                "success": False,
                "error": "insufficient_balance",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {current_balance} —Å–æ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {reservation_amount} —Å–æ–º",
                "current_balance": float(current_balance),
                "required_amount": reservation_amount,
                "missing_amount": reservation_amount - float(current_balance)
            }

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        connector_check = db.execute(text("""
            SELECT connector_number, status FROM connectors 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})
        
        connector = connector_check.fetchone()
        if not connector:
            return {
                "success": False,
                "error": "connector_not_found", 
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        if connector[1] != "available":
            return {
                "success": False,
                "error": "connector_occupied",
                "message": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            }
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        active_session_check = db.execute(text("""
            SELECT id FROM charging_sessions 
            WHERE user_id = :client_id AND status = 'started'
        """), {"client_id": request.client_id})
        
        if active_session_check.fetchone():
            return {
                "success": False,
                "error": "session_already_active", 
                "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏"
            }

        # 8. –†–ï–ó–ï–†–í–ò–†–£–ï–ú –°–†–ï–î–°–¢–í–ê –ù–ê –ë–ê–õ–ê–ù–°–ï
        new_balance = payment_service.update_client_balance(
            db, request.client_id, Decimal(str(reservation_amount)), "subtract",
            f"–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {request.station_id}"
        )

        # 9. –°–æ–∑–¥–∞–µ–º ocpp_sessions –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º idTag
        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–º–µ—Å—Ç–æ CLIENT_ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        phone_query = text("""
            SELECT phone FROM clients WHERE id = :client_id
        """)
        phone_result = db.execute(phone_query, {"client_id": request.client_id}).fetchone()
        id_tag = phone_result[0] if phone_result else f"CLIENT_{request.client_id}"
        
        auth_check = db.execute(text("""
            SELECT id_tag FROM ocpp_authorization 
            WHERE id_tag = :id_tag
        """), {"id_tag": id_tag})
        
        if not auth_check.fetchone():
            db.execute(text("""
                INSERT INTO ocpp_authorization (id_tag, status, parent_id_tag, client_id) 
                VALUES (:id_tag, 'Accepted', NULL, :client_id)
            """), {"id_tag": id_tag, "client_id": request.client_id})

        # 10. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∑–∞—Ä—è–¥–∫–∏ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
        # üîß –õ–û–ì–ò–ö–ê –õ–ò–ú–ò–¢–û–í –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if request.energy_kwh and request.amount_som:
            # –†–ï–ñ–ò–ú 1: –≠–Ω–µ—Ä–≥–∏—è + —Å—É–º–º–∞
            limit_type = 'energy'
            limit_value = request.energy_kwh
        elif request.amount_som:
            # –†–ï–ñ–ò–ú 2: –¢–æ–ª—å–∫–æ —Å—É–º–º–∞
            limit_type = 'amount' 
            limit_value = request.amount_som
        elif request.energy_kwh:
            # –†–ï–ñ–ò–ú 3: –¢–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏—è
            limit_type = 'energy'
            limit_value = request.energy_kwh
        else:
            # –†–ï–ñ–ò–ú 4: –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è
            limit_type = 'none'
            limit_value = 0
        
        session_insert = db.execute(text("""
            INSERT INTO charging_sessions 
            (user_id, station_id, start_time, status, limit_type, limit_value, amount)
            VALUES (:user_id, :station_id, :start_time, 'started', :limit_type, :limit_value, :amount)
            RETURNING id
        """), {
            "user_id": request.client_id,
            "station_id": request.station_id,
            "start_time": datetime.now(timezone.utc),
            "limit_type": limit_type,
            "limit_value": limit_value,
            "amount": reservation_amount
        })
        
        session_id = session_insert.fetchone()[0]

        # 11. –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        payment_service.create_payment_transaction(
            db, request.client_id, "charge_reserve",
            -Decimal(str(reservation_amount)), current_balance, new_balance,
            f"–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}",
            charging_session_id=session_id
        )

        # 12. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        db.execute(text("""
            UPDATE connectors 
            SET status = 'occupied' 
            WHERE station_id = :station_id AND connector_number = :connector_id
        """), {"station_id": request.station_id, "connector_id": request.connector_id})

        # 13. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.commit()

        # 14. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_station_online = request.station_id in connected_stations
        
        if is_station_online:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Redis
            command_data = {
                "action": "RemoteStartTransaction",
                "connector_id": request.connector_id,
                "id_tag": id_tag,
                "session_id": session_id
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ Redis –∫–æ–º–∞–Ω–¥—É
            command_data["limit_type"] = limit_type
            command_data["limit_value"] = limit_value
            
            await redis_manager.publish_command(request.station_id, command_data)
            
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã {reservation_amount} —Å–æ–º")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "rate_per_kwh": rate_per_kwh,
                "estimated_cost": reservation_amount,
                "reserved_amount": reservation_amount,
                "new_balance": float(new_balance),
                "message": "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã",
                "station_online": True
            }
        else:
            logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã, —Å—Ç–∞–Ω—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω")
            
            return {
                "success": True,
                "session_id": session_id,
                "station_id": request.station_id,
                "client_id": request.client_id,
                "connector_id": request.connector_id,
                "energy_kwh": request.energy_kwh,
                "rate_per_kwh": rate_per_kwh,
                "estimated_cost": reservation_amount,
                "reserved_amount": reservation_amount,
                "new_balance": float(new_balance),
                "message": "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞—Ä—è–¥–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏.",
                "station_online": False
            }

    except ValueError as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "balance_error",
            "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

@router.post("/charging/stop")
async def stop_charging(
    request: ChargingStopRequest, 
    db: Session = Depends(get_db)
):
    """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—Ä—è–¥–∫—É —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        # 1. –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session_query = text("""
            SELECT cs.id, cs.user_id, cs.station_id, cs.start_time, cs.status, 
                   cs.limit_value, cs.amount, cs.energy, s.price_per_kwh,
                   tp.id as tariff_plan_id
            FROM charging_sessions cs
            LEFT JOIN stations s ON cs.station_id = s.id
            LEFT JOIN tariff_plans tp ON s.tariff_plan_id = tp.id
            WHERE cs.id = :session_id AND cs.status = 'started'
        """)
        
        session_result = db.execute(session_query, {"session_id": request.session_id})
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "session_not_found",
                "message": "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
        session_id, user_id, station_id, start_time, status = session[:5]
        limit_value, reserved_amount, actual_energy, price_per_kwh = session[5:9]
        tariff_plan_id = session[9]
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        rate_per_kwh = float(price_per_kwh)
        
        if tariff_plan_id:
            tariff_check = db.execute(text("""
                SELECT price FROM tariff_rules 
                WHERE tariff_plan_id = :tariff_plan_id 
                AND tariff_type = 'per_kwh' 
                AND is_active = true
                ORDER BY priority DESC LIMIT 1
            """), {"tariff_plan_id": tariff_plan_id})
            
            tariff_rule = tariff_check.fetchone()
            if tariff_rule:
                rate_per_kwh = float(tariff_rule[0])

        # 4. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        actual_energy_consumed = float(actual_energy) if actual_energy else 0
        
        # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if actual_energy_consumed == 0:
            ocpp_energy_query = text("""
                SELECT COALESCE(ot.meter_stop - ot.meter_start, 0) as consumed_energy
                FROM ocpp_transactions ot
                WHERE ot.charging_session_id = :session_id
                ORDER BY ot.created_at DESC LIMIT 1
            """)
            
            ocpp_result = db.execute(ocpp_energy_query, {"session_id": session_id})
            ocpp_energy = ocpp_result.fetchone()
            
            if ocpp_energy and ocpp_energy[0]:
                actual_energy_consumed = float(ocpp_energy[0])

        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        actual_cost = actual_energy_consumed * rate_per_kwh
        reserved_amount_decimal = Decimal(str(reserved_amount)) if reserved_amount else Decimal('0')
        actual_cost_decimal = Decimal(str(actual_cost))
        
        # üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞
        additional_charge = Decimal('0')
        if actual_cost_decimal > reserved_amount_decimal:
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤ - –Ω—É–∂–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å
            additional_charge = actual_cost_decimal - reserved_amount_decimal
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            current_balance = payment_service.get_client_balance(db, user_id)
            if current_balance < additional_charge:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                logger.warning(f"‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–û–ö –°–†–ï–î–°–¢–í –¥–ª—è –¥–æ–ø–ª–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ {session_id}: "
                              f"—Ç—Ä–µ–±—É–µ—Ç—Å—è {additional_charge}, –¥–æ—Å—Ç—É–ø–Ω–æ {current_balance}. "
                              f"–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ.")
                additional_charge = current_balance
                actual_cost_decimal = reserved_amount_decimal + additional_charge
                actual_cost = float(actual_cost_decimal)
            else:
                # –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É
                payment_service.update_client_balance(
                    db, user_id, additional_charge, "subtract",
                    f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_id}"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                balance_after_additional = payment_service.get_client_balance(db, user_id)
                payment_service.create_payment_transaction(
                    db, user_id, "charge_payment",
                    -additional_charge,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
                    current_balance, balance_after_additional,
                    f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ—Å—Å–∏—é {session_id}: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞ {additional_charge} —Å–æ–º",
                    charging_session_id=session_id
                )
                
                logger.info(f"üí≥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï –≤ —Å–µ—Å—Å–∏–∏ {session_id}: "
                           f"{additional_charge} —Å–æ–º (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞)")
        
        # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è)
        if additional_charge > 0:
            refund_amount = Decimal('0')  # –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –¥–æ–ø–ª–∞—Ç–µ
        else:
            refund_amount = reserved_amount_decimal - actual_cost_decimal
            if refund_amount < 0:
                refund_amount = Decimal('0')

        # 7. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        current_balance = payment_service.get_client_balance(db, user_id)

        # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        if refund_amount > 0:
            new_balance = payment_service.update_client_balance(
                db, user_id, refund_amount, "add",
                f"–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —Å–µ—Å—Å–∏—é {session_id}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
            payment_service.create_payment_transaction(
                db, user_id, "charge_refund",
                refund_amount,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                current_balance, new_balance,
                f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ —Å–µ—Å—Å–∏—é {session_id}: –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á",
                charging_session_id=session_id
            )
        else:
            new_balance = current_balance

        # 9. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∑–∞—Ä—è–¥–∫–∏
        update_session = text("""
            UPDATE charging_sessions 
            SET stop_time = NOW(), status = 'stopped', 
                energy = :actual_energy, amount = :actual_cost
            WHERE id = :session_id
        """)
        
        db.execute(update_session, {
            "actual_energy": actual_energy_consumed,
            "actual_cost": actual_cost,
            "session_id": session_id
        })

        # 10. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        connector_update = text("""
            UPDATE connectors 
            SET status = 'available' 
            WHERE station_id = :station_id
        """)
        db.execute(connector_update, {"station_id": station_id})

        # 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Redis
        connected_stations = await redis_manager.get_stations()
        is_station_online = station_id in connected_stations
        
        if is_station_online:
            # –ü–æ–ª—É—á–∞–µ–º OCPP transaction_id
            ocpp_transaction_query = text("""
                SELECT transaction_id FROM ocpp_transactions 
                WHERE charging_session_id = :session_id 
                AND status = 'Started'
                ORDER BY created_at DESC LIMIT 1
            """)
            
            ocpp_result = db.execute(ocpp_transaction_query, {"session_id": session_id})
            ocpp_transaction = ocpp_result.fetchone()
            
            if ocpp_transaction:
                command_data = {
                    "action": "RemoteStopTransaction",
                    "transaction_id": ocpp_transaction[0]
                }
                
                await redis_manager.publish_command(station_id, command_data)

        # 12. –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()

        logger.info(f"‚úÖ –ó–∞—Ä—è–¥–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: —Å–µ—Å—Å–∏—è {session_id}, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á, "
                   f"—Å–ø–∏—Å–∞–Ω–æ {actual_cost} —Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount} —Å–æ–º")
        
        return {
            "success": True,
            "session_id": session_id,
            "station_id": station_id,
            "client_id": user_id,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": datetime.now(timezone.utc).isoformat(),
            "energy_consumed": actual_energy_consumed,
            "rate_per_kwh": rate_per_kwh,
            "reserved_amount": float(reserved_amount_decimal),
            "actual_cost": actual_cost,
            "refund_amount": float(refund_amount),
            "new_balance": float(new_balance),
            "message": f"–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {actual_energy_consumed} –∫–í—Ç‚ãÖ—á, "
                      f"—Å–ø–∏—Å–∞–Ω–æ {actual_cost} —Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {refund_amount} —Å–æ–º",
            "station_online": is_station_online
        }

    except ValueError as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "balance_error",
            "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error", 
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

@router.get("/charging/status/{session_id}")
async def get_charging_status(
    session_id: str, 
    db: Session = Depends(get_db)
):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ OCPP"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN –∫ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        session_query = text("""
            SELECT 
                cs.id, cs.user_id, cs.station_id, cs.start_time, cs.stop_time,
                cs.energy, cs.amount, cs.status, cs.transaction_id,
                cs.limit_type, cs.limit_value,
                ot.transaction_id as ocpp_transaction_id,
                ot.meter_start, ot.meter_stop, ot.status as ocpp_status,
                s.price_per_kwh
            FROM charging_sessions cs
            LEFT JOIN ocpp_transactions ot ON cs.id = ot.charging_session_id 
                OR cs.transaction_id = CAST(ot.transaction_id AS TEXT)
            LEFT JOIN stations s ON cs.station_id = s.id
            WHERE cs.id = :session_id
        """)
        
        session_result = db.execute(session_query, {"session_id": session_id})
        session = session_result.fetchone()
        
        if not session:
            return {
                "success": False,
                "error": "session_not_found",
                "message": "–°–µ—Å—Å–∏—è –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        session_id = session[0]
        user_id = session[1]
        station_id = session[2]
        start_time = session[3]
        stop_time = session[4]
        energy_consumed = session[5] or 0
        amount_charged = session[6] or 0
        status = session[7]
        transaction_id = session[8]
        limit_type = session[9]
        limit_value = session[10] or 0
        ocpp_transaction_id = session[11]
        meter_start = session[12]
        meter_stop = session[13]
        ocpp_status = session[14]
        price_per_kwh = session[15] or 13.5
        
        # üÜï –£–õ–£–ß–®–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ OCPP
        actual_energy_consumed = float(energy_consumed)
        actual_cost = actual_energy_consumed * float(price_per_kwh)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å OCPP –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        if meter_start is not None and meter_stop is not None:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ OCPP meter values
            ocpp_energy_wh = float(meter_stop) - float(meter_start)
            actual_energy_consumed = max(ocpp_energy_wh / 1000.0, actual_energy_consumed)  # Wh ‚Üí kWh
            actual_cost = actual_energy_consumed * float(price_per_kwh)
        elif meter_start is not None and status == 'started':
            # –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ meter_values
            latest_meter_query = text("""
                SELECT mv.energy_active_import_register
                FROM ocpp_meter_values mv
                JOIN ocpp_transactions ot ON mv.ocpp_transaction_id = ot.transaction_id
                WHERE ot.charging_session_id = :session_id
                AND mv.energy_active_import_register IS NOT NULL
                ORDER BY mv.timestamp DESC LIMIT 1
            """)
            latest_result = db.execute(latest_meter_query, {"session_id": session_id})
            latest_meter = latest_result.fetchone()
            
            if latest_meter and latest_meter[0]:
                current_meter = float(latest_meter[0])
                ocpp_energy_wh = current_meter - float(meter_start)
                actual_energy_consumed = max(ocpp_energy_wh / 1000.0, actual_energy_consumed)
                actual_cost = actual_energy_consumed * float(price_per_kwh)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_percent = 0
        if limit_type == "energy" and limit_value > 0:
            progress_percent = min(100, (actual_energy_consumed / float(limit_value)) * 100)
        elif limit_type == "amount" and limit_value > 0:
            progress_percent = min(100, (actual_cost / float(limit_value)) * 100)
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        duration_minutes = 0
        if start_time:
            end_time = stop_time or datetime.now(timezone.utc)
            duration_minutes = int((end_time - start_time).total_seconds() / 60)
        
        # üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• –î–ê–ù–ù–´–• –ò–ó METER VALUES
        latest_meter_data = {}
        meter_current = None
        last_update = None
        
        if ocpp_transaction_id:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            latest_meter_query = text("""
                SELECT 
                    energy_active_import_register,
                    power_active_import,
                    current_import,
                    voltage,
                    temperature,
                    soc,
                    timestamp,
                    sampled_values
                FROM ocpp_meter_values 
                WHERE ocpp_transaction_id = :transaction_id
                ORDER BY timestamp DESC 
                LIMIT 1
            """)
            
            latest_result = db.execute(latest_meter_query, {"transaction_id": ocpp_transaction_id})
            latest_meter = latest_result.fetchone()
            
            if latest_meter:
                latest_meter_data = {
                    'energy_register': latest_meter[0],
                    'power': latest_meter[1], 
                    'current': latest_meter[2],
                    'voltage': latest_meter[3],
                    'temperature': latest_meter[4],
                    'soc': latest_meter[5],
                    'timestamp': latest_meter[6],
                    'sampled_values': latest_meter[7]
                }
                meter_current = float(latest_meter[0]) if latest_meter[0] else None
                last_update = latest_meter[6].isoformat() if latest_meter[6] else None
        
        # üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–¢–ê–ù–¶–ò–ò –û–ù–õ–ê–ô–ù
        station_online = False
        try:
            connected_stations = await redis_manager.get_stations()
            station_online = station_id in connected_stations
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}: {e}")
        
        # üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –° NULL –ü–†–û–í–ï–†–ö–ê–ú–ò
        def safe_float(value, default=0.0):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None"""
            if value is None:
                return default
            try:
                return float(value)
            except (ValueError, TypeError):
                return default
        
        def safe_int(value, default=0):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None"""
            if value is None:
                return default
            try:
                return int(value)
            except (ValueError, TypeError):
                return default
        
        # üîå –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–†–Ø–î–ö–ò (–∏–∑ latest meter data)
        charging_power = safe_float(latest_meter_data.get('power'), 0.0) / 1000.0  # W ‚Üí kW
        station_current = safe_float(latest_meter_data.get('current'), 0.0)
        station_voltage = safe_float(latest_meter_data.get('voltage'), 0.0)
        
        # üöó –î–ê–ù–ù–´–ï –≠–õ–ï–ö–¢–†–û–ú–û–ë–ò–õ–Ø  
        ev_battery_soc = safe_int(latest_meter_data.get('soc'), 0)
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ sampled_values JSON
        ev_current = 0.0
        ev_voltage = 0.0
        station_body_temp = 0
        station_outlet_temp = 0
        station_inlet_temp = 0
        
        if latest_meter_data.get('sampled_values'):
            try:
                sampled_values = latest_meter_data['sampled_values']
                if isinstance(sampled_values, list):
                    for sample in sampled_values:
                        measurand = sample.get('measurand', '')
                        value = safe_float(sample.get('value'), 0.0)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ measurand –¥–ª—è –≠–ú –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                        if measurand == 'Current.Export':  # –¢–æ–∫ –æ—Ç –≠–ú
                            ev_current = value
                        elif measurand == 'Voltage.Export':  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –æ—Ç –≠–ú  
                            ev_voltage = value
                        elif measurand == 'Temperature.Outlet':  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞–∑—ä–µ–º–∞
                            station_outlet_temp = safe_int(value, 0)
                        elif measurand == 'Temperature.Inlet':  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—Ö–æ–¥–∞
                            station_inlet_temp = safe_int(value, 0)
                        elif measurand == 'Temperature':  # –û–±—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ—Ä–ø—É—Å–∞
                            station_body_temp = safe_int(value, 0)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ sampled_values: {e}")
        
        # –ï—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ—Ä–ø—É—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é
        if station_body_temp == 0:
            station_body_temp = safe_int(latest_meter_data.get('temperature'), 0)
        
        # üìä –ü–û–ö–ê–ó–ê–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê
        meter_start_wh = safe_float(meter_start, 0.0)
        meter_current_wh = meter_current or meter_start_wh
        
        # üÜï –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–í–ï–¢ API
        return {
            "success": True,
            "session_id": session_id,
            "status": status,
            "start_time": start_time.isoformat() if start_time else None,
            "stop_time": stop_time.isoformat() if stop_time else None,
            "duration_minutes": duration_minutes,
            
            # ‚ö° –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï
            "energy_consumed": round(actual_energy_consumed, 3),  # –∫–í—Ç‚ãÖ—á
            "energy_consumed_kwh": round(actual_energy_consumed, 3),  # –∫–í—Ç‚ãÖ—á (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            "cost": round(actual_cost, 2),  # —Å–æ–º
            "final_amount_som": round(actual_cost, 2),  # —Å–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            "amount_charged_som": round(actual_cost, 2),  # —Å–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            "limit_value": round(float(limit_value), 2),  # –ª–∏–º–∏—Ç
            "progress_percent": round(progress_percent, 1),  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
            # üîå –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–†–Ø–î–ö–ò (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏)
            "charging_power": round(charging_power, 1),  # –∫–í—Ç
            "station_current": round(station_current, 1),  # –ê
            "station_voltage": round(station_voltage, 1),  # –í
            
            # üöó –î–ê–ù–ù–´–ï –≠–õ–ï–ö–¢–†–û–ú–û–ë–ò–õ–Ø
            "ev_battery_soc": ev_battery_soc,  # %
            "ev_current": round(ev_current, 1),  # –ê
            "ev_voltage": round(ev_voltage, 1),  # –í
            
            # üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì
            "temperatures": {
                "station_body": station_body_temp,  # ¬∞C
                "station_outlet": station_outlet_temp,  # ¬∞C  
                "station_inlet": station_inlet_temp  # ¬∞C
            },
            
            # üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï
            "meter_start": int(meter_start_wh),  # Wh
            "meter_current": int(meter_current_wh),  # Wh
            "station_online": station_online,
            "last_update": last_update,
            
            # üîÑ –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
            "current_energy": round(actual_energy_consumed, 3),
            "current_amount": round(actual_cost, 2),
            "limit_type": limit_type,
            "transaction_id": transaction_id,
            "ocpp_transaction_id": ocpp_transaction_id,
            "station_id": station_id,
            "client_id": user_id,
            "rate_per_kwh": float(price_per_kwh),
            "ocpp_status": ocpp_status,
            "has_meter_data": meter_start is not None,
            
            "message": "–ó–∞—Ä—è–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if status == 'started' 
                      else "–ó–∞—Ä—è–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if status == 'stopped'
                      else "–û—à–∏–±–∫–∞ –∑–∞—Ä—è–¥–∫–∏"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

@router.get("/station/status/{station_id}") 
async def get_station_status(
    station_id: str, 
    db: Session = Depends(get_db)
):
    """üè¢ –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ JOIN
        result = db.execute(text("""
            SELECT 
                s.id,
                s.serial_number,
                s.model,
                s.manufacturer,
                s.status,
                s.power_capacity,
                s.connector_types,
                s.connectors_count,
                s.price_per_kwh,
                s.session_fee,
                s.currency,
                l.name as location_name,
                l.address as location_address,
                l.status as location_status
            FROM stations s
            LEFT JOIN locations l ON s.location_id = l.id
            WHERE s.id = :station_id
        """), {"station_id": station_id})
        
        station_data = result.fetchone()
        
        if not station_data:
            return {
                "success": False,
                "error": "station_not_found",
                "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        connected_stations = await redis_manager.get_stations()
        is_online = station_id in connected_stations
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
        connectors_result = db.execute(text("""
            SELECT connector_number, connector_type, power_kw, status, error_code
            FROM connectors 
            WHERE station_id = :station_id 
            ORDER BY connector_number
        """), {"station_id": station_id})
        
        connectors = []
        available_count = 0
        occupied_count = 0
        faulted_count = 0
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        connector_rows = connectors_result.fetchall()
        logger.info(f"Station {station_id}: –Ω–∞–π–¥–µ–Ω–æ {len(connector_rows)} –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤")
        
        for conn in connector_rows:
            connector_status = conn[3]  # status
            logger.info(f"–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä {conn[0]}: —Ç–∏–ø={conn[1]}, –º–æ—â–Ω–æ—Å—Ç—å={conn[2]}, —Å—Ç–∞—Ç—É—Å={connector_status}")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ (3 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
            if connector_status == "available":
                connector_available = is_online  # –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω
                available_count += 1
                status_text = "–°–≤–æ–±–æ–¥–µ–Ω"
            elif connector_status == "occupied":
                connector_available = False
                occupied_count += 1
                status_text = "–ó–∞–Ω—è—Ç"
            elif connector_status == "faulted":
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω"
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - —Å—á–∏—Ç–∞–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º
                connector_available = False
                faulted_count += 1
                status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            connectors.append({
                "id": conn[0],  # connector_number
                "type": conn[1],  # connector_type
                "status": status_text,
                "available": connector_available,
                "power_kw": conn[2],  # power_kw
                "error": conn[4] if conn[4] and conn[4] != "NoError" else None
            })
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {len(connectors)}, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {available_count}, –∑–∞–Ω—è—Ç—ã—Ö: {occupied_count}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "station_id": station_id,
            "serial_number": station_data[1],
            "model": station_data[2],
            "manufacturer": station_data[3],
            
            # –°—Ç–∞—Ç—É—Å—ã
            "online": is_online,
            "station_status": station_data[4],  # active/maintenance/inactive
            "location_status": station_data[13],  # active/maintenance/inactive
            "available_for_charging": is_online and station_data[4] == "active" and available_count > 0,
            
            # –õ–æ–∫–∞—Ü–∏—è
            "location_name": station_data[11],
            "location_address": station_data[12],
            
            # –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
            "connectors": connectors,
            "total_connectors": station_data[7],  # connectors_count
            "available_connectors": available_count,
            "occupied_connectors": occupied_count,
            "faulted_connectors": faulted_count,
            
            # –¢–∞—Ä–∏—Ñ—ã
            "tariff_rub_kwh": float(station_data[8]) if station_data[8] else 13.5,
            "session_fee": float(station_data[9]) if station_data[9] else 0.0,
            "currency": station_data[10] or "KGS",
            "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
            
            "message": "–°—Ç–∞–Ω—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_online and station_data[4] == "active" 
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏" if station_data[4] == "maintenance"
                      else "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

# ============================================================================
# –ü–õ–ê–¢–ï–ñ–ù–´–ï STATUS CHECK –ò WEBHOOK ENDPOINTS  
# ============================================================================

@router.get("/payment/status/{invoice_id}", response_model=PaymentStatusResponse)
async def get_payment_status(
    invoice_id: str,
    db: Session = Depends(get_db)
) -> PaymentStatusResponse:
    """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏"""
    try:
        # 1. –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
        topup_check = db.execute(text("""
            SELECT id, invoice_id, order_id, client_id, requested_amount, status, odengi_status,
                   qr_expires_at, invoice_expires_at, last_status_check_at, created_at
            FROM balance_topups WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        topup = topup_check.fetchone()
        
        if not topup:
            return PaymentStatusResponse(
                success=False,
                status=0,
                status_text="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                error="payment_not_found"
            )

        # 2. üïê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
        qr_expires_at = topup[7]
        invoice_expires_at = topup[8]
        qr_expired = payment_lifecycle_service.is_qr_expired(qr_expires_at)
        invoice_expired = payment_lifecycle_service.is_invoice_expired(invoice_expires_at)
        
        # –ï—Å–ª–∏ invoice –∏—Å—Ç–µ–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ–º
        if invoice_expired and topup[5] == "processing":
            db.execute(text("""
                UPDATE balance_topups 
                SET status = 'canceled', completed_at = NOW(), needs_status_check = false
                WHERE invoice_id = :invoice_id
            """), {"invoice_id": invoice_id})
            db.commit()
            
            return PaymentStatusResponse(
                success=True,
                status=2,  # canceled
                status_text="–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                amount=float(topup[4]),
                invoice_id=invoice_id,
                qr_expired=True,
                invoice_expired=True,
                qr_expires_at=qr_expires_at,
                invoice_expires_at=invoice_expires_at
            )

        # 3. –ß–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π background task)
        fresh_topup_check = db.execute(text("""
            SELECT status, odengi_status, paid_amount, last_status_check_at
            FROM balance_topups WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        fresh_topup = fresh_topup_check.fetchone()
        if fresh_topup:
            db_status, db_odengi_status, db_paid_amount, db_last_check = fresh_topup
        else:
            db_status, db_odengi_status, db_paid_amount, db_last_check = topup[5], topup[6], None, topup[9]
        
        # 4. –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        status_mapping = {
            "processing": 0,
            "approved": 1,
            "canceled": 2, 
            "refunded": 3,
            "partial_refund": 4
        }
        
        numeric_status = status_mapping.get(db_status, 0)
        
        # 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –Ω—É–∂–Ω—ã –ª–∏ callback –ø—Ä–æ–≤–µ—Ä–∫–∏
        can_proceed = (numeric_status == 1)  # –¢–æ–ª—å–∫–æ –¥–ª—è approved –ø–ª–∞—Ç–µ–∂–µ–π
        needs_callback_check = (db_status == "processing" and 
                               not invoice_expired and 
                               payment_lifecycle_service.should_status_check(
                                   topup[10], db_last_check, 0, db_status))  # created_at, last_check_at
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_texts = {
            0: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            1: "–û–ø–ª–∞—á–µ–Ω–æ", 
            2: "–û—Ç–º–µ–Ω–µ–Ω",
            3: "–í–æ–∑–≤—Ä–∞—â–µ–Ω",
            4: "–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç"
        }
        status_text = status_texts.get(numeric_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        
        logger.info(f"üïê –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {db_status} (numeric: {numeric_status}), QR –∏—Å—Ç–µ–∫: {qr_expired}, Invoice –∏—Å—Ç–µ–∫: {invoice_expired}")
        
        return PaymentStatusResponse(
            success=True,
            status=numeric_status,
            status_text=status_text,
            amount=float(topup[4]),  # requested_amount
            paid_amount=float(db_paid_amount) if db_paid_amount else None,
            invoice_id=invoice_id,
            can_proceed=can_proceed,
            can_start_charging=False,
            qr_expired=qr_expired,
            invoice_expired=invoice_expired,
            qr_expires_at=qr_expires_at,
            invoice_expires_at=invoice_expires_at,
            last_status_check_at=db_last_check,
            needs_callback_check=needs_callback_check
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
        return PaymentStatusResponse(
            success=False,
            status=0,
            status_text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
            error="internal_error"
        )

@router.post("/payment/status-check/{invoice_id}")
async def force_payment_status_check(
    invoice_id: str,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ O!Dengi API"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_check = db.execute(text("""
            SELECT 'balance_topups' as table_name, invoice_id, status, created_at, invoice_expires_at
            FROM balance_topups WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        payment = payment_check.fetchone()
        if not payment:
            return {
                "success": False,
                "error": "payment_not_found",
                "message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        table_name, _, status, created_at, invoice_expires_at = payment
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
        if payment_lifecycle_service.is_invoice_expired(invoice_expires_at):
            return {
                "success": False,
                "error": "payment_expired",
                "message": "–ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                "invoice_expires_at": invoice_expires_at.isoformat()
            }
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
        if status in ['approved', 'canceled', 'refunded']:
            return {
                "success": False,
                "error": "payment_completed",
                "message": f"–ü–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}",
                "current_status": status
            }
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(
            payment_lifecycle_service.perform_status_check,
            db, table_name, invoice_id
        )
        
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {invoice_id}")
        
        return {
            "success": True,
            "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "invoice_id": invoice_id,
            "check_type": "manual",
            "estimated_completion_seconds": 5
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {invoice_id}: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
        }

@router.post("/payment/webhook")
async def handle_payment_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–ø–∏—Å–∏
        payload = await request.body()
        
        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        provider_name = get_payment_provider_service().get_provider_name()
        
        if provider_name == "OBANK":
            # OBANK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            is_valid = True
        else:  # O!Dengi
            webhook_signature = request.headers.get('X-O-Dengi-Signature', '')
            is_valid = get_payment_provider_service().verify_webhook(payload, webhook_signature)
        
        if not is_valid:
            logger.warning(f"Invalid webhook signature from {request.client.host} for provider {provider_name}")
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        # 3. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if provider_name == "OBANK":
            # –î–ª—è OBANK –ø–∞—Ä—Å–∏–º XML
            import xml.etree.ElementTree as ET
            root = ET.fromstring(payload.decode('utf-8'))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XML
            invoice_id = root.find('.//invoice_id').text if root.find('.//invoice_id') is not None else None
            status = root.find('.//status').text if root.find('.//status') is not None else None
            amount = root.find('.//sum').text if root.find('.//sum') is not None else None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å OBANK –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            status_mapping = {"completed": 1, "failed": 2, "cancelled": 2}
            numeric_status = status_mapping.get(status, 0)
            paid_amount = float(amount) / 1000 if amount and status == "completed" else None
            
        else:  # O!Dengi
            webhook_data = PaymentWebhookData.parse_raw(payload)
            invoice_id = webhook_data.invoice_id
            numeric_status = webhook_data.status
            paid_amount = webhook_data.paid_amount / 100 if webhook_data.paid_amount else None
        
        # 4. –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
        topup_check = db.execute(text("""
            SELECT id, client_id, requested_amount, status, payment_provider FROM balance_topups 
            WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        topup = topup_check.fetchone()
        
        if not topup:
            logger.warning(f"Payment not found for webhook: {invoice_id}")
            return {"status": "payment_not_found"}
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        if topup[4] != provider_name:
            logger.warning(f"Provider mismatch for payment {invoice_id}: expected {topup[4]}, got {provider_name}")
            return {"status": "provider_mismatch"}
        
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        if numeric_status == 1 and topup[3] != "approved":  # –û–ø–ª–∞—á–µ–Ω–æ
            background_tasks.add_task(
                process_balance_topup,
                topup[0],  # topup_id
                topup[1],  # client_id
                paid_amount if paid_amount else topup[2],  # amount
                invoice_id,
                provider_name
            )
        
        return {"status": "received", "invoice_id": invoice_id, "provider": provider_name}
        
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")

@router.get("/balance/{client_id}", response_model=ClientBalanceInfo)
async def get_client_balance(
    client_id: str, 
    db: Session = Depends(get_db)
) -> ClientBalanceInfo:
    """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
        client_info = db.execute(text("""
            SELECT id, balance, updated_at FROM clients WHERE id = :client_id
        """), {"client_id": client_id})
        
        client = client_info.fetchone()
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        last_topup = db.execute(text("""
            SELECT paid_at FROM balance_topups 
            WHERE client_id = :client_id AND status = 'approved'
            ORDER BY paid_at DESC LIMIT 1
        """), {"client_id": client_id})
        
        last_topup_date = last_topup.fetchone()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É (—Ä–µ–∑–µ—Ä–≤ –º–∏–Ω—É—Å –≤–æ–∑–≤—Ä–∞—Ç—ã –ø–ª—é—Å –¥–æ–ø–ª–∞—Ç—ã)
        total_spent = db.execute(text("""
            SELECT COALESCE(SUM(CASE 
                WHEN transaction_type = 'charge_reserve' THEN ABS(amount)
                WHEN transaction_type = 'charge_refund' THEN -ABS(amount) 
                WHEN transaction_type = 'charge_payment' THEN ABS(amount)
                ELSE 0 END), 0) 
            FROM payment_transactions_odengi 
            WHERE client_id = :client_id AND transaction_type IN ('charge_reserve', 'charge_refund', 'charge_payment')
        """), {"client_id": client_id})
        
        spent_amount = total_spent.fetchone()[0]
        
        return ClientBalanceInfo(
            client_id=client_id,
            balance=float(client[1]),
            currency=settings.DEFAULT_CURRENCY,
            last_topup_at=last_topup_date[0] if last_topup_date else None,
            total_spent=float(spent_amount) if spent_amount else 0
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

# ============================================================================
# H2H –ò –¢–û–ö–ï–ù-–ü–õ–ê–¢–ï–ñ–ò OBANK
# ============================================================================

@router.post("/balance/h2h-payment", response_model=H2HPaymentResponse)
async def create_h2h_payment(
    request: H2HPaymentRequest,
    db: Session = Depends(get_db)
) -> H2HPaymentResponse:
    """üí≥ Host2Host –ø–ª–∞—Ç–µ–∂ –∫–∞—Ä—Ç–æ–π (–ø—Ä—è–º–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OBANK
        if settings.PAYMENT_PROVIDER != "OBANK":
            return H2HPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="h2h_not_supported",
                message="H2H –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OBANK"
            )

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return H2HPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="client_not_found"
            )

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ processing –ø–ª–∞—Ç–µ–∂–∏
        existing_pending = db.execute(text("""
            SELECT invoice_id FROM balance_topups 
            WHERE client_id = :client_id AND status = 'processing' 
            AND invoice_expires_at > NOW()
        """), {"client_id": request.client_id}).fetchone()
        
        if existing_pending:
            return H2HPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="pending_payment_exists"
            )

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π transaction ID
        transaction_id = f"h2h_{request.client_id}_{int(datetime.now(timezone.utc).timestamp())}"
        
        # 4. –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = request.description or f"H2H –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id} –Ω–∞ {request.amount} —Å–æ–º"
        
        # 5. –°–æ–∑–¥–∞–µ–º H2H –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ OBANK
        notify_url = f"{settings.API_V1_STR}/payment/webhook"
        redirect_url = f"{settings.API_V1_STR}/payment/success"
        
        h2h_response = await obank_service.create_h2h_payment(
            amount=Decimal(str(request.amount)),
            transaction_id=transaction_id,
            account=request.card_pan[-4:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã –∫–∞–∫ account
            email=request.email,
            notify_url=notify_url,
            redirect_url=redirect_url,
            card_pan=request.card_pan,
            card_name=request.card_name,
            card_cvv=request.card_cvv,
            card_year=request.card_year,
            card_month=request.card_month,
            phone_number=request.phone_number
        )
        
        if h2h_response.get("code") != "0":
            return H2HPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="h2h_payment_failed",
                message=h2h_response.get("message", "–û—à–∏–±–∫–∞ H2H –ø–ª–∞—Ç–µ–∂–∞")
            )

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        auth_key = h2h_response.get("data", {}).get("auth-key", transaction_id)
        created_at = datetime.now(timezone.utc)
        qr_expires_at, invoice_expires_at = payment_lifecycle_service.calculate_expiry_times(created_at)

        db.execute(text("""
            INSERT INTO balance_topups 
            (invoice_id, order_id, merchant_id, client_id, requested_amount, 
             currency, description, status, odengi_status,
             qr_expires_at, invoice_expires_at, needs_status_check, payment_provider)
            VALUES (:invoice_id, :order_id, :merchant_id, :client_id, :requested_amount,
                    :currency, :description, 'processing', 0,
                    :qr_expires_at, :invoice_expires_at, true, 'OBANK')
        """), {
            "invoice_id": auth_key,
            "order_id": transaction_id,
            "merchant_id": "OBANK",
            "client_id": request.client_id,
            "requested_amount": request.amount,
            "currency": settings.DEFAULT_CURRENCY,
            "description": description,
            "qr_expires_at": qr_expires_at,
            "invoice_expires_at": invoice_expires_at
        })
        
        db.commit()
        
        logger.info(f"üí≥ H2H –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {transaction_id}, auth_key: {auth_key}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        async def check_h2h_payment_status():
            for i in range(20):
                await asyncio.sleep(15)
                try:
                    result = await payment_lifecycle_service.perform_status_check(
                        db, "balance_topups", auth_key
                    )
                    if result.get("success"):
                        new_status = result.get("new_status")
                        if new_status in ['approved', 'canceled', 'refunded']:
                            return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ H2H –ø–ª–∞—Ç–µ–∂–∞ {auth_key}: {e}")
                    
        asyncio.create_task(check_h2h_payment_status())
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ H2H –ø–ª–∞—Ç–µ–∂–∞ {auth_key}")
        
        return H2HPaymentResponse(
            success=True,
            transaction_id=transaction_id,
            auth_key=auth_key,
            status="processing",
            message="H2H –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            client_id=request.client_id,
            current_balance=float(client[1])
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è H2H –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return H2HPaymentResponse(
            success=False,
            client_id=request.client_id,
            error="internal_error"
        )

@router.post("/balance/token-payment", response_model=TokenPaymentResponse)
async def create_token_payment(
    request: TokenPaymentRequest,
    db: Session = Depends(get_db)
) -> TokenPaymentResponse:
    """üîê –ü–ª–∞—Ç–µ–∂ –ø–æ —Ç–æ–∫–µ–Ω—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OBANK
        if settings.PAYMENT_PROVIDER != "OBANK":
            return TokenPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="token_payment_not_supported",
                message="–¢–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OBANK"
            )

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return TokenPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="client_not_found"
            )

        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π transaction ID
        transaction_id = f"token_{request.client_id}_{int(datetime.now(timezone.utc).timestamp())}"
        
        # 3. –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = request.description or f"–¢–æ–∫–µ–Ω-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id} –Ω–∞ {request.amount} —Å–æ–º"
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ OBANK
        notify_url = f"{settings.API_V1_STR}/payment/webhook"
        redirect_url = f"{settings.API_V1_STR}/payment/success"
        
        token_response = await obank_service.create_token_payment(
            amount=Decimal(str(request.amount)),
            transaction_id=transaction_id,
            email=request.email,
            notify_url=notify_url,
            redirect_url=redirect_url,
            card_token=request.card_token
        )
        
        if token_response.get("code") != "0":
            return TokenPaymentResponse(
                success=False,
                client_id=request.client_id,
                error="token_payment_failed",
                message=token_response.get("message", "–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∞")
            )

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        auth_key = token_response.get("data", {}).get("auth-key", transaction_id)
        created_at = datetime.now(timezone.utc)
        qr_expires_at, invoice_expires_at = payment_lifecycle_service.calculate_expiry_times(created_at)

        db.execute(text("""
            INSERT INTO balance_topups 
            (invoice_id, order_id, merchant_id, client_id, requested_amount, 
             currency, description, status, odengi_status,
             qr_expires_at, invoice_expires_at, needs_status_check, payment_provider)
            VALUES (:invoice_id, :order_id, :merchant_id, :client_id, :requested_amount,
                    :currency, :description, 'processing', 0,
                    :qr_expires_at, :invoice_expires_at, true, 'OBANK')
        """), {
            "invoice_id": auth_key,
            "order_id": transaction_id,
            "merchant_id": "OBANK",
            "client_id": request.client_id,
            "requested_amount": request.amount,
            "currency": settings.DEFAULT_CURRENCY,
            "description": description,
            "qr_expires_at": qr_expires_at,
            "invoice_expires_at": invoice_expires_at
        })
        
        db.commit()
        
        logger.info(f"üîê –¢–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {transaction_id}, auth_key: {auth_key}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        async def check_token_payment_status():
            for i in range(20):
                await asyncio.sleep(15)
                try:
                    result = await payment_lifecycle_service.perform_status_check(
                        db, "balance_topups", auth_key
                    )
                    if result.get("success"):
                        new_status = result.get("new_status")
                        if new_status in ['approved', 'canceled', 'refunded']:
                            return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∞ {auth_key}: {e}")
                    
        asyncio.create_task(check_token_payment_status())
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∞ {auth_key}")
        
        return TokenPaymentResponse(
            success=True,
            transaction_id=transaction_id,
            auth_key=auth_key,
            status="processing",
            message="–¢–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            client_id=request.client_id,
            current_balance=float(client[1])
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∞: {e}")
        return TokenPaymentResponse(
            success=False,
            client_id=request.client_id,
            error="internal_error"
        )

@router.post("/payment/create-token", response_model=CreateTokenResponse)
async def create_card_token(
    request: CreateTokenRequest
) -> CreateTokenResponse:
    """üîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OBANK
        if settings.PAYMENT_PROVIDER != "OBANK":
            return CreateTokenResponse(
                success=False,
                error="token_creation_not_supported",
                message="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ OBANK"
            )

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OBANK
        token_response = await obank_service.create_token(days=request.days)
        
        if token_response.get("code") != "0":
            return CreateTokenResponse(
                success=False,
                error="token_creation_failed",
                message=token_response.get("message", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        token_data = token_response.get("data", {})
        token_url = token_data.get("url", "")
        
        logger.info(f"üîë –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ {request.days} –¥–Ω–µ–π, URL: {token_url}")
        
        return CreateTokenResponse(
            success=True,
            token_url=token_url,
            token_expires_in_days=request.days,
            message=f"–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ {request.days} –¥–Ω–µ–π"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return CreateTokenResponse(
            success=False,
            error="internal_error"
        )

# ============================================================================
# BACKGROUND TASKS –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
# ============================================================================

async def process_balance_topup(topup_id: int, client_id: str, amount: float, invoice_id: str, provider: str = "ODENGI"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        with next(get_db()) as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = payment_service.get_client_balance(db, client_id)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            new_balance = payment_service.update_client_balance(
                db, client_id, Decimal(str(amount)), "add",
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ {provider} (invoice: {invoice_id})"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            payment_service.create_payment_transaction(
                db, client_id, "balance_topup", 
                Decimal(str(amount)), current_balance, new_balance,
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ {provider}",
                balance_topup_id=topup_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            db.execute(text("""
                UPDATE balance_topups 
                SET status = 'approved', paid_at = NOW(), paid_amount = :amount
                WHERE id = :topup_id
            """), {"amount": amount, "topup_id": topup_id})
            
            db.commit()
            
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: –∫–ª–∏–µ–Ω—Ç {client_id}, —Å—É–º–º–∞ {amount}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}") 

@router.post("/balance/topup-qr", response_model=BalanceTopupResponse)
async def create_qr_balance_topup(
    request: BalanceTopupRequest, 
    db: Session = Depends(get_db)
) -> BalanceTopupResponse:
    """
    üî• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥ (O!Dengi)
    
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O!Dengi –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
    """
    logger.info(f"üî• QR Topup request: client_id={request.client_id}, amount={request.amount}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return BalanceTopupResponse(
                success=False,
                error="client_not_found",
                client_id=request.client_id
            )

        # 2. –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ QR –∫–æ–¥—ã (—É–ª—É—á—à–µ–Ω–Ω—ã–π UX)
        existing_pending = db.execute(text("""
            SELECT invoice_id FROM balance_topups 
            WHERE client_id = :client_id AND status = 'processing' 
            AND invoice_expires_at > NOW()
        """), {"client_id": request.client_id}).fetchall()
        
        if existing_pending:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ QR –∫–æ–¥—ã –∫–ª–∏–µ–Ω—Ç–∞
            cancelled_invoices = [row.invoice_id for row in existing_pending]
            db.execute(text("""
                UPDATE balance_topups 
                SET status = 'canceled'
                WHERE client_id = :client_id AND status = 'processing'
                AND invoice_expires_at > NOW()
            """), {"client_id": request.client_id})
            
            logger.info(f"üîÑ –û—Ç–º–µ–Ω–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ QR –∫–æ–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {request.client_id}: {cancelled_invoices}")
            db.commit()

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ order_id
        order_id = f"qr_topup_{request.client_id}_{int(datetime.now(timezone.utc).timestamp())}"
        
        # 4. –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = request.description or f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥: {request.amount} —Å–æ–º"
        
        # 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º O!Dengi –¥–ª—è QR –ø–ª–∞—Ç–µ–∂–µ–π
        qr_payment_provider = get_qr_payment_service()
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ O!Dengi
        notify_url = f"{settings.API_V1_STR}/payment/webhook"
        redirect_url = f"{settings.API_V1_STR}/payment/success"
        
        payment_response = await qr_payment_provider.create_payment(
            amount=Decimal(str(request.amount)),
            order_id=order_id,
            email=request.client_id + "@evpower.local",
            notify_url=notify_url,
            redirect_url=redirect_url,
            description=description,
            client_id=request.client_id
        )
        
        if not payment_response.get("success"):
            return BalanceTopupResponse(
                success=False,
                error="payment_provider_error",
                client_id=request.client_id
            )

        # 7. –ü–æ–ª—É—á–∞–µ–º QR –∫–æ–¥ –∏–∑ ODENGI –æ—Ç–≤–µ—Ç–∞ (–ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        raw_response = payment_response.get("raw_response", {})
        qr_data = raw_response.get("data", {})
        
        # –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ODENGI –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å invoice_id –∏ qr –ø–æ–ª—è
        qr_code_data = qr_data.get("qr")  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –∫–æ–¥–∞
        qr_code_url = qr_data.get("qr") or f"https://api.dengi.o.kg/qr.php?type=emvQr&data={qr_code_data}" if qr_code_data else None
        app_link_url = qr_data.get("link_app") or qr_data.get("app_link")
        
        logger.info(f"üì± ODENGI –æ—Ç–≤–µ—Ç: qr_data={qr_code_data[:50] if qr_code_data else None}...")
        logger.info(f"üì± ODENGI qr_url={qr_code_url}")
        logger.info(f"üì± ODENGI app_link={app_link_url}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö QR, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ URL
        if not qr_code_data and qr_code_url:
            try:
                from urllib.parse import urlparse, parse_qs, unquote
                parsed_url = urlparse(qr_code_url)
                query_params = parse_qs(parsed_url.query)
                
                if 'data' in query_params and query_params['data']:
                    qr_code_data = unquote(query_params['data'][0])
                    logger.info(f"üì± –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ QR –∏–∑ URL: {qr_code_data[:50]}...")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –∏–∑ URL: {e}")
                qr_code_data = None
        
        # 8. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–ª–∞—Ç–µ–∂–∞
        created_at = datetime.now(timezone.utc)
        qr_expires_at, invoice_expires_at = payment_lifecycle_service.calculate_expiry_times(created_at)

        # 9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        topup_insert = db.execute(text("""
            INSERT INTO balance_topups 
            (invoice_id, order_id, merchant_id, client_id, requested_amount, 
             currency, description, qr_code_url, app_link, status, odengi_status,
             qr_expires_at, invoice_expires_at, needs_status_check, payment_provider)
            VALUES (:invoice_id, :order_id, :merchant_id, :client_id, :requested_amount,
                    :currency, :description, :qr_code_url, :app_link, 'processing', 0,
                    :qr_expires_at, :invoice_expires_at, true, :payment_provider)
            RETURNING id
        """), {
            "invoice_id": payment_response.get("invoice_id", payment_response.get("auth_key")),
            "order_id": order_id,
            "merchant_id": "ODENGI",
            "client_id": request.client_id,
            "requested_amount": request.amount,
            "currency": settings.DEFAULT_CURRENCY,
            "description": description,
            "qr_code_url": qr_code_url,
            "app_link": app_link_url,
            "qr_expires_at": qr_expires_at,
            "invoice_expires_at": invoice_expires_at,
            "payment_provider": "ODENGI"
        })
        
        db.commit()
        
        invoice_id = payment_response.get("invoice_id", payment_response.get("auth_key"))
        logger.info(f"üî• QR –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {order_id}, invoice_id: {invoice_id}, QR –∏—Å—Ç–µ–∫–∞–µ—Ç: {qr_expires_at}")
        
        # 10. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        async def check_payment_status_task():
            for i in range(20):
                await asyncio.sleep(15)
                try:
                    result = await payment_lifecycle_service.perform_status_check(
                        db, "balance_topups", invoice_id
                    )
                    if result.get("success"):
                        new_status = result.get("new_status")
                        if new_status in ['approved', 'canceled', 'refunded']:
                            return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
                    
        asyncio.create_task(check_payment_status_task())
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ QR –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}")
        
        return BalanceTopupResponse(
            success=True,
            invoice_id=invoice_id,
            order_id=order_id,
            qr_code=qr_code_data,
            qr_code_url=qr_code_url,
            app_link=app_link_url,
            amount=request.amount,
            client_id=request.client_id,
            current_balance=float(client[1]),
            qr_expires_at=qr_expires_at,
            invoice_expires_at=invoice_expires_at,
            qr_lifetime_seconds=300,
            invoice_lifetime_seconds=600
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå QR Topup exception: {e}")
        return BalanceTopupResponse(
            success=False,
            error="internal_error",
            client_id=request.client_id
        )

@router.post("/balance/topup-card", response_model=H2HPaymentResponse)
async def create_card_balance_topup(
    request: H2HPaymentRequest,
    db: Session = Depends(get_db)
) -> H2HPaymentResponse:
    """
    üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π (OBANK)
    
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OBANK –¥–ª—è H2H –ø–ª–∞—Ç–µ–∂–µ–π
    """
    logger.info(f"Card Topup request received for client: {request.client_id}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_check = db.execute(text("SELECT id, balance FROM clients WHERE id = :client_id"), 
                                {"client_id": request.client_id})
        client = client_check.fetchone()
        if not client:
            return H2HPaymentResponse(
                success=False,
                error="client_not_found",
                client_id=request.client_id
            )

        # 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º OBANK –¥–ª—è –∫–∞—Ä—Ç
        card_payment_provider = get_card_payment_service()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ order_id
        order_id = f"card_topup_{request.client_id}_{int(datetime.now(timezone.utc).timestamp())}"
        
        # 4. –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        description = request.description or f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç–æ–π: {request.amount} —Å–æ–º"
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ H2H –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ OBANK
        h2h_response = await card_payment_provider.create_h2h_payment(
            amount=Decimal(str(request.amount)),
            order_id=order_id,
            card_data={
                "pan": request.card_pan,
                "name": request.card_name,
                "cvv": request.card_cvv,
                "year": request.card_year,
                "month": request.card_month
            },
            email=request.email,
            phone_number=request.phone_number,
            description=description
        )
        
        if not h2h_response.get("success"):
            logger.error(f"‚ùå Card payment failed: {h2h_response.get('error')}")
            return H2HPaymentResponse(
                success=False,
                error=h2h_response.get("error", "payment_provider_error"),
                client_id=request.client_id
            )
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ balance_topups —Å –¥–∞–Ω–Ω—ã–º–∏ OBANK
        auth_key = h2h_response.get("auth_key")
        transaction_id = h2h_response.get("transaction_id")
        
        created_at = datetime.now(timezone.utc)
        qr_expires_at, invoice_expires_at = payment_lifecycle_service.calculate_expiry_times(created_at)
        
        topup_insert = db.execute(text("""
            INSERT INTO balance_topups 
            (invoice_id, order_id, merchant_id, client_id, requested_amount, 
             currency, description, status, odengi_status,
             qr_expires_at, invoice_expires_at, needs_status_check, payment_provider)
            VALUES (:invoice_id, :order_id, :merchant_id, :client_id, :requested_amount,
                    :currency, :description, 'processing', 0,
                    :qr_expires_at, :invoice_expires_at, true, :payment_provider)
            RETURNING id
        """), {
            "invoice_id": auth_key,  # –î–ª—è OBANK –∏—Å–ø–æ–ª—å–∑—É–µ–º auth_key –∫–∞–∫ invoice_id
            "order_id": order_id,
            "merchant_id": "OBANK",
            "client_id": request.client_id,
            "requested_amount": request.amount,
            "currency": settings.DEFAULT_CURRENCY,
            "description": description,
            "qr_expires_at": qr_expires_at,
            "invoice_expires_at": invoice_expires_at,
            "payment_provider": "OBANK"
        })
        
        db.commit()
        
        logger.info(f"üí≥ Card –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {order_id}, auth_key: {auth_key}, transaction_id: {transaction_id}")
        
        # 7. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ H2H –ø–ª–∞—Ç–µ–∂–∞
        async def check_h2h_payment_status():
            for i in range(20):
                await asyncio.sleep(15)
                try:
                    result = await payment_lifecycle_service.perform_status_check(
                        db, "balance_topups", auth_key
                    )
                    if result.get("success"):
                        new_status = result.get("new_status")
                        if new_status in ['approved', 'canceled', 'refunded']:
                            return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Card –ø–ª–∞—Ç–µ–∂–∞ {auth_key}: {e}")
                    
        asyncio.create_task(check_h2h_payment_status())
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Card –ø–ª–∞—Ç–µ–∂–∞ {auth_key}")
        
        return H2HPaymentResponse(
            success=True,
            transaction_id=transaction_id,
            auth_key=auth_key,
            status=h2h_response.get("status", "processing"),
            message=h2h_response.get("message", "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω"),
            client_id=request.client_id,
            current_balance=float(client[1])
        )
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Card Topup exception: {e}")
        return H2HPaymentResponse(
            success=False,
            error="internal_error",
            client_id=request.client_id
        )



@router.post("/payment/h2h-payment", response_model=H2HPaymentResponse)
async def create_h2h_payment_endpoint(
    request: H2HPaymentRequest,
    db: Session = Depends(get_db)
) -> H2HPaymentResponse:
    """
    Direct Host-to-Host card payment via OBANK API (XML format with SSL cert)
    
    –¢—Ä–µ–±—É–µ—Ç:
    - –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç PKCS12
    - XML —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    - Mutual TLS authentication
    """
    try:
        logger.info(f"H2H payment request for client: {request.client_id}, amount: {request.amount}")
        
        card_data = {
            "number": request.card_pan,
            "holder_name": request.card_name,
            "cvv": request.card_cvv,
            "exp_month": request.card_month,
            "exp_year": request.card_year
        }
        
        # Direct H2H payment
        result = await obank_service.create_h2h_payment(
            amount_kgs=request.amount,
            client_id=request.client_id,
            card_data=card_data
        )
        
        return {
            "success": result.get("success", False),
            "payment_id": result.get("payment_id"),
            "status": result.get("status"),
            "detail": result.get("result")
        }
        
    except Exception as e:
        logger.error(f"H2H payment error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

@router.post("/payment/create-token")
async def create_payment_token(
    days: int = 14,
    db: Session = Depends(get_db)
):
    """
    Create card storage token via OBANK API (XML format)
    
    –ú–∞–∫—Å–∏–º—É–º 14 –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    """
    try:
        logger.info(f"Creating payment token for {days} days")
        
        result = await obank_service.create_token(days=days)
        
        return {
            "success": result.get("success", False),
            "detail": result.get("result")
        }
        
    except Exception as e:
        logger.error(f"Token creation error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")

@router.post("/payment/token-payment")
async def token_payment(
    client_id: str,
    amount: float,
    card_token: str,
    db: Session = Depends(get_db)
):
    """
    Payment using saved card token via OBANK API (XML format)
    """
    try:
        logger.info(f"Token payment for client: {client_id}, amount: {amount}")
        
        result = await obank_service.create_token_payment(
            amount_kgs=amount,
            client_id=client_id,
            card_token=card_token
        )
        
        return {
            "success": result.get("success", False),
            "payment_id": result.get("payment_id"),
            "status": result.get("status"),
            "detail": result.get("result")
        }
        
    except Exception as e:
        logger.error(f"Token payment error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∞")

@router.get("/payment/h2h-status/{transaction_id}")
async def check_h2h_payment_status(
    transaction_id: str,
    db: Session = Depends(get_db)
):
    """
    Check H2H payment status via OBANK API (XML format)
    """
    try:
        logger.info(f"Checking H2H payment status: {transaction_id}")
        
        result = await obank_service.check_h2h_status(transaction_id)
        
        return {
            "success": result.get("success", False),
            "status": result.get("status"),
            "final": result.get("final", False),
            "detail": result.get("result")
        }
        
    except Exception as e:
        logger.error(f"Status check error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")

@router.post("/payment/cancel/{invoice_id}")
async def cancel_payment_manually(
    invoice_id: str,
    db: Session = Depends(get_db)
):
    """‚ùå –†—É—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # 1. –ò—â–µ–º –ø–ª–∞—Ç–µ–∂
        payment_check = db.execute(text("""
            SELECT id, client_id, status, requested_amount, payment_provider
            FROM balance_topups WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        payment = payment_check.fetchone()
        if not payment:
            return {
                "success": False,
                "error": "payment_not_found",
                "message": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        payment_id, client_id, current_status, amount, provider = payment
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
        if current_status != "processing":
            return {
                "success": False,
                "error": "cannot_cancel",
                "message": f"–ü–ª–∞—Ç–µ–∂ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}",
                "current_status": current_status
            }
        
        # 3. –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        db.execute(text("""
            UPDATE balance_topups 
            SET status = 'canceled', 
                completed_at = NOW(),
                needs_status_check = false
            WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        db.commit()
        
        logger.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ {invoice_id} –æ—Ç–º–µ–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é (–∫–ª–∏–µ–Ω—Ç: {client_id}, —Å—É–º–º–∞: {amount})")
        
        return {
            "success": True,
            "message": "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω",
            "invoice_id": invoice_id,
            "client_id": client_id,
            "amount": float(amount),
            "previous_status": current_status,
            "new_status": "canceled",
            "provider": provider
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}"
        }