"""
API endpoint –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä—è–¥–∫–∏
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from datetime import datetime, timezone
from decimal import Decimal
import logging

from app.db.session import get_db
from ocpp_ws_server.redis_manager import redis_manager
# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ FlutterFlow - client_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ
from app.crud.ocpp_service import payment_service
from .schemas import ChargingStartRequest
from .service import ChargingService

logger = logging.getLogger(__name__)
router = APIRouter()

@router.post("/charging/start")
async def start_charging(
    request: ChargingStartRequest, 
    db: Session = Depends(get_db)
):
    """üîå –ù–∞—á–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–Ω—è—Ç–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    logger.info(f"Starting charging: client_id={request.client_id}, station_id={request.station_id}")
    
    service = ChargingService(db)
    
    try:
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ —Å–µ—Ä–≤–∏—Å
        result = await service.start_charging_session(
            client_id=request.client_id,
            station_id=request.station_id,
            connector_id=request.connector_id,
            energy_kwh=request.energy_kwh,
            amount_som=request.amount_som,
            redis_manager=redis_manager
        )
        
        return result
        
    except ValueError as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "balance_error",
            "message": str(e)
        }
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞—Ä—è–¥–∫–∏: {e}")
        return {
            "success": False,
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }