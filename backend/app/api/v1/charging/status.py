"""
üìä Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import logging

from app.db.session import get_db
from app.core.auth import optional_authentication

from .schemas import ChargingStatusResponse
from .service import ChargingService

logger = logging.getLogger(__name__)
router = APIRouter()


@router.get("/charging/status/{session_id}", response_model=ChargingStatusResponse)
async def get_charging_status(
    session_id: str, 
    db: Session = Depends(get_db),
    current_user: dict = Depends(optional_authentication)
):
    """üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ OCPP"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        charging_service = ChargingService(db)
        result = await charging_service.get_charging_status(session_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result["success"]:
            logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞—Ä—è–¥–∫–∏ –ø–æ–ª—É—á–µ–Ω: —Å–µ—Å—Å–∏—è {session_id}, —Å—Ç–∞—Ç—É—Å {result.get('status', 'unknown')}")
            return ChargingStatusResponse(**result)
        else:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {result.get('error', 'unknown')}")
            raise HTTPException(
                status_code=404 if result.get("error") == "session_not_found" else 500,
                detail={
                    "error": result.get("error", "internal_error"),
                    "message": result.get("message", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"),
                    "success": False
                }
            )
    
    except HTTPException:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ endpoint —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—Ä—è–¥–∫–∏: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail={
                "error": "internal_error",
                "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "success": False
            }
        )