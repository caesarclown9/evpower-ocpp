from fastapi import APIRouter, Depends, HTTPException, Request, BackgroundTasks
from sqlalchemy.orm import Session
from sqlalchemy import text
import logging
import xml.etree.ElementTree as ET

from app.db.session import get_db
from app.services.payment_provider_service import get_payment_provider_service
from app.schemas.ocpp import PaymentWebhookData

router = APIRouter()
logger = logging.getLogger(__name__)

async def process_balance_topup(topup_id: int, client_id: str, amount: float, invoice_id: str, provider_name: str):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    from app.db.session import get_session_local
    SessionLocal = get_session_local()
    db = SessionLocal()
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        db.execute(text("""
            UPDATE balance_topups 
            SET status = 'approved', paid_amount = :amount, paid_at = NOW(), 
                completed_at = NOW(), needs_status_check = false
            WHERE id = :topup_id
        """), {"topup_id": topup_id, "amount": amount})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
        client_result = db.execute(text("""
            SELECT balance FROM clients WHERE id = :client_id
        """), {"client_id": client_id})
        
        client = client_result.fetchone()
        if not client:
            logger.error(f"Client {client_id} not found during balance topup")
            return
            
        old_balance = float(client[0])
        new_balance = old_balance + amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞
        db.execute(text("""
            UPDATE clients SET balance = :new_balance WHERE id = :client_id
        """), {"new_balance": new_balance, "client_id": client_id})
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        db.execute(text("""
            INSERT INTO payment_transactions_odengi 
            (client_id, transaction_type, amount, balance_before, balance_after, description, balance_topup_id)
            VALUES (:client_id, 'balance_topup', :amount, :balance_before, :balance_after, :description, :topup_id)
        """), {
            "client_id": client_id,
            "amount": amount,
            "balance_before": old_balance,
            "balance_after": new_balance,
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ {provider_name}, invoice {invoice_id}",
            "topup_id": topup_id
        })
        
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {client_id}, +{amount} —Å–æ–º, –±–∞–ª–∞–Ω—Å: {old_balance} ‚Üí {new_balance}")
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {invoice_id}: {e}")
    finally:
        db.close()

@router.post("/payment/webhook")
async def handle_payment_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        payload = await request.body()
        
        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        provider_name = get_payment_provider_service().get_provider_name()
        
        if provider_name == "OBANK":
            # OBANK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            is_valid = True
        else:  # O!Dengi
            webhook_signature = request.headers.get('X-O-Dengi-Signature', '')
            is_valid = get_payment_provider_service().verify_webhook(payload, webhook_signature)
        
        if not is_valid:
            logger.warning(f"Invalid webhook signature from {request.client.host} for provider {provider_name}")
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        # 3. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if provider_name == "OBANK":
            # –î–ª—è OBANK –ø–∞—Ä—Å–∏–º XML
            root = ET.fromstring(payload.decode('utf-8'))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ XML
            invoice_id = root.find('.//invoice_id').text if root.find('.//invoice_id') is not None else None
            status = root.find('.//status').text if root.find('.//status') is not None else None
            amount = root.find('.//sum').text if root.find('.//sum') is not None else None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å OBANK –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            status_mapping = {"completed": 1, "failed": 2, "cancelled": 2}
            numeric_status = status_mapping.get(status, 0)
            paid_amount = float(amount) / 1000 if amount and status == "completed" else None
            
        else:  # O!Dengi
            webhook_data = PaymentWebhookData.parse_raw(payload)
            invoice_id = webhook_data.invoice_id
            numeric_status = webhook_data.status
            paid_amount = webhook_data.paid_amount / 100 if webhook_data.paid_amount else None
        
        # 4. –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ
        topup_check = db.execute(text("""
            SELECT id, client_id, requested_amount, status, payment_provider FROM balance_topups 
            WHERE invoice_id = :invoice_id
        """), {"invoice_id": invoice_id})
        
        topup = topup_check.fetchone()
        
        if not topup:
            logger.warning(f"Payment not found for webhook: {invoice_id}")
            return {"status": "payment_not_found"}
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        if topup[4] != provider_name:
            logger.warning(f"Provider mismatch for payment {invoice_id}: expected {topup[4]}, got {provider_name}")
            return {"status": "provider_mismatch"}
        
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        if numeric_status == 1 and topup[3] != "approved":  # –û–ø–ª–∞—á–µ–Ω–æ
            background_tasks.add_task(
                process_balance_topup,
                topup[0],  # topup_id
                topup[1],  # client_id
                paid_amount if paid_amount else topup[2],  # amount
                invoice_id,
                provider_name
            )
        
        return {"status": "received", "invoice_id": invoice_id, "provider": provider_name}
        
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")