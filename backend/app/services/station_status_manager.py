"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—Ç–∞–Ω—Ü–∏–π
–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ heartbeat –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PWA
"""
import logging
from datetime import datetime, timedelta
from sqlalchemy import text
from sqlalchemy.orm import Session
from typing import Dict, List, Tuple

logger = logging.getLogger(__name__)

class StationStatusManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ heartbeat"""
    
    # –¢–∞–π–º–∞—É—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
    HEARTBEAT_TIMEOUT_MINUTES = 5  # –°—Ç–∞–Ω—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è offline –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –±–µ–∑ heartbeat
    WARNING_TIMEOUT_MINUTES = 3    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ 3 –º–∏–Ω—É—Ç
    
    @staticmethod
    def update_all_station_statuses(db: Session) -> Dict[str, List[str]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat
        
        Returns:
            Dict —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        result = {
            "activated": [],
            "deactivated": [],
            "warning": [],
            "total_active": 0,
            "total_inactive": 0
        }
        
        try:
            # 1. –î–µ–ª–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –±–µ–∑ heartbeat –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
            deactivate_query = text("""
                UPDATE stations s
                SET is_available = false, updated_at = NOW()
                FROM ocpp_station_status oss
                WHERE s.id = oss.station_id
                  AND s.is_available = true
                  AND (oss.last_heartbeat IS NULL OR oss.last_heartbeat < NOW() - INTERVAL :timeout)
                RETURNING s.id, s.serial_number
            """)
            
            deactivated = db.execute(
                deactivate_query,
                {"timeout": f"{StationStatusManager.HEARTBEAT_TIMEOUT_MINUTES} minutes"}
            ).fetchall()
            
            result["deactivated"] = [(s[0], s[1]) for s in deactivated]
            
            # 2. –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –Ω–µ–¥–∞–≤–Ω–∏–º heartbeat
            activate_query = text("""
                UPDATE stations s
                SET is_available = true, updated_at = NOW()
                FROM ocpp_station_status oss
                WHERE s.id = oss.station_id
                  AND s.is_available = false
                  AND oss.last_heartbeat >= NOW() - INTERVAL :timeout
                RETURNING s.id, s.serial_number
            """)
            
            activated = db.execute(
                activate_query,
                {"timeout": f"{StationStatusManager.HEARTBEAT_TIMEOUT_MINUTES} minutes"}
            ).fetchall()
            
            result["activated"] = [(s[0], s[1]) for s in activated]
            
            # 3. –î–µ–ª–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ ocpp_station_status
            no_status_query = text("""
                UPDATE stations
                SET is_available = false, updated_at = NOW()
                WHERE is_available = true
                  AND id NOT IN (
                    SELECT station_id 
                    FROM ocpp_station_status 
                    WHERE last_heartbeat >= NOW() - INTERVAL :timeout
                  )
                RETURNING id, serial_number
            """)
            
            no_status = db.execute(
                no_status_query,
                {"timeout": f"{StationStatusManager.HEARTBEAT_TIMEOUT_MINUTES} minutes"}
            ).fetchall()
            
            result["deactivated"].extend([(s[0], s[1]) for s in no_status])
            
            # 4. –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (3-5 –º–∏–Ω—É—Ç –±–µ–∑ heartbeat)
            warning_query = text("""
                SELECT s.id, s.serial_number, 
                       EXTRACT(EPOCH FROM (NOW() - oss.last_heartbeat))/60 as minutes_ago
                FROM stations s
                JOIN ocpp_station_status oss ON s.id = oss.station_id
                WHERE s.status = 'active'
                  AND oss.last_heartbeat < NOW() - INTERVAL :warning
                  AND oss.last_heartbeat >= NOW() - INTERVAL :timeout
            """)
            
            warnings = db.execute(
                warning_query,
                {
                    "warning": f"{StationStatusManager.WARNING_TIMEOUT_MINUTES} minutes",
                    "timeout": f"{StationStatusManager.HEARTBEAT_TIMEOUT_MINUTES} minutes"
                }
            ).fetchall()
            
            result["warning"] = [(s[0], s[1], round(s[2], 1)) for s in warnings]
            
            # 5. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_query = text("""
                SELECT 
                    COUNT(*) FILTER (WHERE status = 'active') as active_count,
                    COUNT(*) FILTER (WHERE status = 'inactive') as inactive_count
                FROM stations
            """)
            
            stats = db.execute(stats_query).fetchone()
            result["total_active"] = stats[0]
            result["total_inactive"] = stats[1]
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if result["deactivated"]:
                logger.warning(f"üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏ (–Ω–µ—Ç heartbeat): {[s[1] for s in result['deactivated']]}")
            
            if result["activated"]:
                logger.info(f"üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏: {[s[1] for s in result['activated']]}")
            
            if result["warning"]:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞–Ω—Ü–∏–∏ –±–ª–∏–∑–∫–∏ –∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {[(s[1], f'{s[2]}–º–∏–Ω') for s in result['warning']]}")
            
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–π - –ê–∫—Ç–∏–≤–Ω—ã–µ: {result['total_active']}, –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {result['total_inactive']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
            db.rollback()
            raise
        
        return result
    
    @staticmethod
    def get_station_health_status(db: Session, station_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å—Ç–∞–Ω—Ü–∏–∏
        
        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            station_id: ID —Å—Ç–∞–Ω—Ü–∏–∏
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏
        """
        query = text("""
            SELECT 
                s.id,
                s.serial_number,
                s.status,
                oss.last_heartbeat,
                oss.is_online,
                EXTRACT(EPOCH FROM (NOW() - oss.last_heartbeat))/60 as minutes_since_heartbeat,
                CASE 
                    WHEN oss.last_heartbeat IS NULL THEN 'never_connected'
                    WHEN oss.last_heartbeat < NOW() - INTERVAL '5 minutes' THEN 'offline'
                    WHEN oss.last_heartbeat < NOW() - INTERVAL '3 minutes' THEN 'warning'
                    ELSE 'online'
                END as health_status,
                (SELECT COUNT(*) FROM connectors WHERE station_id = s.id AND status = 'available') as available_connectors,
                (SELECT COUNT(*) FROM connectors WHERE station_id = s.id) as total_connectors
            FROM stations s
            LEFT JOIN ocpp_station_status oss ON s.id = oss.station_id
            WHERE s.id = :station_id
        """)
        
        result = db.execute(query, {"station_id": station_id}).fetchone()
        
        if not result:
            return None
        
        return {
            "station_id": result[0],
            "serial_number": result[1],
            "status": result[2],
            "last_heartbeat": result[3].isoformat() if result[3] else None,
            "is_online": result[4],
            "minutes_since_heartbeat": round(result[5], 1) if result[5] else None,
            "health_status": result[6],
            "available_connectors": result[7],
            "total_connectors": result[8],
            "should_be_active": result[6] in ['online', 'warning']
        }
    
    @staticmethod
    def force_deactivate_station(db: Session, station_id: str, reason: str = "manual") -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é
        
        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            station_id: ID —Å—Ç–∞–Ω—Ü–∏–∏
            reason: –ü—Ä–∏—á–∏–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            query = text("""
                UPDATE stations 
                SET status = 'inactive', 
                    updated_at = NOW()
                WHERE id = :station_id
                RETURNING id
            """)
            
            result = db.execute(query, {"station_id": station_id}).fetchone()
            
            if result:
                logger.info(f"‚õî –°—Ç–∞–Ω—Ü–∏—è {station_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                db.commit()
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}: {e}")
            db.rollback()
            return False