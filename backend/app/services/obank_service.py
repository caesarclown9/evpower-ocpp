"""
OBANK Payment Link API Service

–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OBANK Payment API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
—á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (Payment Page)
- Host2Host –ø–ª–∞—Ç–µ–∂–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç –∏ —Ç–æ–∫–µ–Ω-–ø–ª–∞—Ç–µ–∂–∏
- –û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
"""

import ssl
import xml.etree.ElementTree as ET
from typing import Dict, Any, Optional, Union
from datetime import datetime, timezone
import httpx
import logging
from decimal import Decimal

from app.core.config import settings

logger = logging.getLogger(__name__)

class OBankPaymentError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ OBANK API"""
    pass

class OBankAuthenticationError(OBankPaymentError):
    """–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OBANK"""
    pass

class OBankAPIError(OBankPaymentError):
    """–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OBANK API"""
    pass

class OBankService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OBANK Payment Link API"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self._api_url = None
        self._point_id = None
        self._service_id = None
        self._cert_path = None
        self._cert_password = None
        self._use_production = None
        self._ssl_context = None
        self._initialized = False
    
    def _ensure_initialized(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self._initialized:
            self._api_url = settings.current_obank_api_url
            self._point_id = settings.current_obank_point_id
            self._service_id = settings.current_obank_service_id
            self._cert_path = settings.OBANK_CERT_PATH
            self._cert_password = settings.OBANK_CERT_PASSWORD
            self._use_production = settings.OBANK_USE_PRODUCTION
            self._initialized = True
    
    @property
    def api_url(self):
        self._ensure_initialized()
        return self._api_url
    
    @property
    def point_id(self):
        self._ensure_initialized()
        return self._point_id
    
    @property
    def service_id(self):
        self._ensure_initialized()
        return self._service_id
    
    @property
    def cert_path(self):
        self._ensure_initialized()
        return self._cert_path
    
    @property
    def cert_password(self):
        self._ensure_initialized()
        return self._cert_password
    
    @property
    def use_production(self):
        self._ensure_initialized()
        return self._use_production
    
    @property
    def ssl_context(self) -> ssl.SSLContext:
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self._ssl_context is None:
            self._ssl_context = self._create_ssl_context()
        return self._ssl_context
    
    def _create_ssl_context(self) -> ssl.SSLContext:
        """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º PKCS12"""
        try:
            context = ssl.create_default_context()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º PKCS12 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.cert_path and self.cert_password and not self.cert_path.startswith('/path/to/'):
                import os
                if os.path.exists(self.cert_path):
                    context.load_cert_chain(self.cert_path, password=self.cert_password)
                    logger.info(f"SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {self.cert_path}")
                else:
                    logger.warning(f"SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cert_path}")
                    if self.use_production:
                        raise OBankAuthenticationError(f"SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è production: {self.cert_path}")
            else:
                logger.info("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.use_production:
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
            return context
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            if not self.use_production:
                logger.warning("–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                return context
            raise OBankAuthenticationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {e}")
    
    def _build_xml_request(self, method_data: Dict[str, Any], payment_data: Optional[Dict[str, Any]] = None) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç XML –∑–∞–ø—Ä–æ—Å –¥–ª—è OBANK API"""
        root = ET.Element("request", point=self.point_id)
        
        if payment_data:
            # –î–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            payment_elem = ET.SubElement(root, "payment", payment_data)
            
            for key, value in method_data.items():
                attr_elem = ET.SubElement(payment_elem, "attribute", name=key, value=str(value))
        else:
            # –î–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—Ç–∞—Ç—É—Å, –æ—Ç–º–µ–Ω–∞ –∏ —Ç.–¥.)
            if "function" in method_data:
                # Advanced —Ñ—É–Ω–∫—Ü–∏–∏
                advanced_elem = ET.SubElement(root, "advanced", 
                    service=self.service_id, 
                    function=method_data["function"]
                )
                
                for key, value in method_data.items():
                    if key != "function":
                        attr_elem = ET.SubElement(advanced_elem, "attribute", name=key, value=str(value))
            elif "id" in method_data and "sum" in method_data:
                # –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                cancel_elem = ET.SubElement(root, "cancel", 
                    id=str(method_data["id"]),
                    sum=str(method_data["sum"])
                )
            elif "id" in method_data:
                # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
                status_elem = ET.SubElement(root, "status", id=str(method_data["id"]))
        
        return ET.tostring(root, encoding='unicode')
    
    def _parse_xml_response(self, xml_data: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç –æ—Ç OBANK API"""
        try:
            root = ET.fromstring(xml_data)
            
            result = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã result
            result_elem = root.find('result')
            if result_elem is not None:
                result.update(result_elem.attrib)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º data/input —ç–ª–µ–º–µ–Ω—Ç—ã
                data_elem = result_elem.find('data')
                if data_elem is not None:
                    inputs = {}
                    for input_elem in data_elem.findall('input'):
                        key = input_elem.get('key')
                        value = input_elem.get('value')
                        if key and value:
                            inputs[key] = value
                    result['data'] = inputs
            
            return result
            
        except ET.ParseError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –æ—Ç–≤–µ—Ç–∞: {e}")
            raise OBankAPIError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XML –æ—Ç–≤–µ—Ç: {e}")
    
    async def _make_request(self, xml_data: str, endpoint: str = "") -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ OBANK API"""
        url = f"{self.api_url}/{endpoint}" if endpoint else self.api_url
        
        headers = {
            "Content-Type": "application/xml",
            "Accept": "application/xml"
        }
        
        try:
            if not self.use_production:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
                logger.info("üîì –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                
                async with httpx.AsyncClient(verify=False) as client:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OBANK (—Ç–µ—Å—Ç–æ–≤—ã–π HTTPS): {url}")
                    logger.debug(f"XML –∑–∞–ø—Ä–æ—Å: {xml_data}")
                    
                    response = await client.post(
                        url,
                        content=xml_data,
                        headers=headers,
                        timeout=30.0
                    )
                    
                    response.raise_for_status()
                    
                    logger.debug(f"XML –æ—Ç–≤–µ—Ç: {response.text}")
                    return self._parse_xml_response(response.text)
            else:
                # Production —Ä–µ–∂–∏–º —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
                async with httpx.AsyncClient(verify=self.ssl_context) as client:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OBANK (–ø—Ä–æ–¥–∞–∫—à–Ω SSL): {url}")
                    logger.debug(f"XML –∑–∞–ø—Ä–æ—Å: {xml_data}")
                    
                    response = await client.post(
                        url,
                        content=xml_data,
                        headers=headers,
                        timeout=30.0
                    )
                    
                    response.raise_for_status()
                    
                    logger.debug(f"XML –æ—Ç–≤–µ—Ç: {response.text}")
                    return self._parse_xml_response(response.text)
                
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ OBANK: {e}")
            raise OBankAPIError(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OBANK: {e}")
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –æ—Ç OBANK: {e.response.status_code} - {e.response.text}")
            raise OBankAPIError(f"OBANK –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}")
    
    async def create_payment_page(
        self,
        amount: Decimal,
        order_id: str,
        email: str,
        notify_url: str,
        redirect_url: str,
        phone_number: Optional[str] = None,
        address: Optional[str] = None,
        city: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            notify_url: URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            redirect_url: URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            phone_number: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            address: –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            city: –ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ç—ã–π—ã–Ω—ã (1 —Å–æ–º = 1000 —Ç—ã–π—ã–Ω–æ–≤)
        amount_in_tyiyn = int(amount * 1000)
        
        method_data = {
            "sum": amount_in_tyiyn,
            "amount_currency": "417",  # KGS –∫–æ–¥ –≤–∞–ª—é—Ç—ã
            "notify_url": notify_url,
            "redirect_url": redirect_url,
            "email": email,
            "order_id": order_id,
            "function": "auth-acquiring"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if phone_number:
            method_data["phone_number"] = phone_number
        if address:
            method_data["address"] = address
        if city:
            method_data["city"] = city
        if kwargs.get("province"):
            method_data["province"] = kwargs["province"]
        if kwargs.get("post_code"):
            method_data["post_code"] = kwargs["post_code"]
        if kwargs.get("country_code"):
            method_data["country_code"] = kwargs["country_code"]
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "PaymentPage")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if response.get("code") != "0":
            raise OBankAPIError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response}")
        
        return response
    
    async def check_payment_status(self, auth_key: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ auth-key
        
        Args:
            auth_key: –ö–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        method_data = {
            "function": "fetch-operation",
            "key": auth_key
        }
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "status")
        
        return response
    
    async def create_h2h_payment(
        self,
        amount: Decimal,
        transaction_id: str,
        account: str,
        email: str,
        notify_url: str,
        redirect_url: str,
        card_pan: str,
        card_name: str,
        card_cvv: str,
        card_year: str,
        card_month: str,
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç Host2Host –ø–ª–∞—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            account: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Å—á–µ—Ç–∞
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            notify_url: URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            redirect_url: URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            card_pan: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            card_name: –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã
            card_cvv: CVV –∫–æ–¥
            card_year: –ì–æ–¥ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            card_month: –ú–µ—Å—è—Ü –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ç—ã–π—ã–Ω—ã (1 —Å–æ–º = 1000 —Ç—ã–π—ã–Ω–æ–≤)
        amount_in_tyiyn = int(amount * 1000)
        
        # H2H –ø–ª–∞—Ç–µ–∂–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç function="host2host" —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        method_data = {
            "function": "host2host",
            "sum": str(amount_in_tyiyn),
            "amount_currency": "417",  # KGS –∫–æ–¥ –≤–∞–ª—é—Ç—ã
            "notify_url": notify_url,
            "redirect_url": redirect_url,
            "card_pan": card_pan,
            "card_name": card_name,
            "card_cvv": card_cvv,
            "card_year": card_year,
            "card_month": card_month,
            "email": email,
            "account": account,
            "order_id": transaction_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key in ["phone_number", "address", "city", "province", "post_code", "country_code"]:
            if kwargs.get(key):
                method_data[key] = kwargs[key]
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "H2HPayment")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è PaymentProviderService
        if response.get("code") == "0":
            data = response.get("data", {})
            return {
                "success": True,
                "auth_key": data.get("auth-key") or data.get("auth_key") or data.get("key"),
                "transaction_id": transaction_id,
                "status": "processing",
                "message": "H2H –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "raw_response": response
            }
        else:
            return {
                "success": False,
                "error": f"obank_error_{response.get('code', 'unknown')}",
                "message": response.get("description", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è H2H –ø–ª–∞—Ç–µ–∂–∞"),
                "raw_response": response
            }
    
    async def check_h2h_status(self, auth_key: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å H2H –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            auth_key: –ö–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        method_data = {
            "function": "fetch-operation",
            "key": auth_key
        }
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "status")
        
        return response
    
    async def create_token(self, days: int = 14) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 14)
            
        Returns:
            Dict —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∫–∞—Ä—Ç
        """
        method_data = {
            "function": "stored-cards",
            "days": min(days, 14)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º 14 –¥–Ω–µ–π
        }
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "CreateToken")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è PaymentProviderService
        if response.get("code") == "0":
            data = response.get("data", {})
            return {
                "success": True,
                "token_url": data.get("token-url") or data.get("token_url") or data.get("url"),
                "token_expires_in_days": days,
                "message": "–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "raw_response": response
            }
        else:
            return {
                "success": False,
                "error": f"obank_error_{response.get('code', 'unknown')}",
                "message": response.get("description", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"),
                "raw_response": response
            }
    
    async def create_token_payment(
        self,
        amount: Decimal,
        transaction_id: str,
        email: str,
        notify_url: str,
        redirect_url: str,
        card_token: str,
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É –∫–∞—Ä—Ç—ã
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            notify_url: URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            redirect_url: URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            card_token: –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ç—ã–π—ã–Ω—ã (1 —Å–æ–º = 1000 —Ç—ã–π—ã–Ω–æ–≤)
        amount_in_tyiyn = int(amount * 1000)
        
        # Token –ø–ª–∞—Ç–µ–∂–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç function="token-payment" —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        method_data = {
            "function": "token-payment",
            "sum": str(amount_in_tyiyn),
            "amount_currency": "417",  # KGS –∫–æ–¥ –≤–∞–ª—é—Ç—ã
            "notify_url": notify_url,
            "redirect_url": redirect_url,
            "email": email,
            "card_token": card_token,
            "order_id": transaction_id
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key in ["phone_number", "address", "city", "province", "post_code", "country_code"]:
            if kwargs.get(key):
                method_data[key] = kwargs[key]
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "TokenPayment")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è PaymentProviderService
        if response.get("code") == "0":
            data = response.get("data", {})
            return {
                "success": True,
                "auth_key": data.get("auth-key") or data.get("auth_key") or data.get("key"),
                "transaction_id": transaction_id,
                "status": "processing",
                "message": "Token –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "raw_response": response
            }
        else:
            return {
                "success": False,
                "error": f"obank_error_{response.get('code', 'unknown')}",
                "message": response.get("description", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Token –ø–ª–∞—Ç–µ–∂–∞"),
                "raw_response": response
            }
    
    async def cancel_payment(self, transaction_id: str, refund_amount: Decimal) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞
        
        Args:
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            refund_amount: –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–æ–º–∞—Ö
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–º–µ–Ω—ã
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ç—ã–π—ã–Ω—ã
        refund_amount_in_tyiyn = int(refund_amount * 1000)
        
        method_data = {
            "id": transaction_id,
            "sum": refund_amount_in_tyiyn
        }
        
        xml_request = self._build_xml_request(method_data)
        response = await self._make_request(xml_request, "Reversal")
        
        return response

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
obank_service = OBankService() 