"""
Unified Payment Provider Service

–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏:
- OBANK Payment Link API
- O!Dengi (Legacy support)

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

from decimal import Decimal
from typing import Dict, Any, Optional, Union
from datetime import datetime, timezone
import logging

from app.core.config import settings

logger = logging.getLogger(__name__)

class PaymentProviderService:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self, force_provider: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            force_provider: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ("OBANK" –∏–ª–∏ "ODENGI")
                           –ï—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ config
        """
        self.provider = force_provider or settings.PAYMENT_PROVIDER
        
        if self.provider == "OBANK":
            from app.services.obank_service import obank_service
            self.service = obank_service
        else:  # O!Dengi
            from app.crud.ocpp_service import odengi_service
            self.service = odengi_service
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider}")
    
    async def create_payment(
        self,
        amount: Decimal,
        order_id: str,
        email: str,
        notify_url: str,
        redirect_url: str,
        description: str = "",
        client_id: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            notify_url: URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            redirect_url: URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
        """
        if self.provider == "OBANK":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É OBANK
            response = await self.service.create_payment_page(
                amount=amount,
                order_id=order_id,
                email=email,
                notify_url=notify_url,
                redirect_url=redirect_url,
                **kwargs
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OBANK
            data = response.get('data', {})
            return {
                "success": True,
                "payment_url": data.get('pay-url', ''),
                "auth_key": data.get('auth-key', ''),
                "invoice_id": data.get('auth-key', ''),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º auth-key –∫–∞–∫ invoice_id
                "provider": "OBANK",
                "status": "pending"
            }
            
        else:  # O!Dengi
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏ –¥–ª—è O!Dengi
            amount_kopecks = int(amount * 100)
            
            response = await self.service.create_invoice(
                order_id=order_id,
                description=description,
                amount_kopecks=amount_kopecks
            )
            
            # ODENGI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç invoice_id –≤ –ø–æ–ª–µ data —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            data = response.get('data', {})
            invoice_id = (data.get('invoice_id') or 
                         response.get('invoice_id') or
                         response.get('id') or
                         order_id)  # fallback –∫ order_id –µ—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª ID
            
            logger.info(f"üì± ODENGI extracted invoice_id: {invoice_id}")
            
            payment_url = (response.get('url') or 
                          response.get('pay_url') or
                          response.get('data', {}).get('url') or '')
            
            return {
                "success": True,
                "payment_url": payment_url,
                "invoice_id": invoice_id,
                "provider": "ODENGI",
                "status": "processing",
                "raw_response": response  # –î–ª—è –¥–µ–±–∞–≥–∞
            }
    
    async def check_payment_status(
        self, 
        invoice_id: str, 
        order_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            invoice_id: ID –ø–ª–∞—Ç–µ–∂–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            order_id: ID –∑–∞–∫–∞–∑–∞ (–¥–ª—è O!Dengi)
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        if self.provider == "OBANK":
            # –î–ª—è OBANK –∏—Å–ø–æ–ª—å–∑—É–µ–º auth_key
            response = await self.service.check_payment_status(auth_key=invoice_id)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç OBANK
            data = response.get('data', {})
            obank_status = data.get('status', 'processing')
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ OBANK (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
            status_mapping = {
                'processing': {"status": "processing", "numeric": 0},
                'completed': {"status": "approved", "numeric": 1},
                'failed': {"status": "canceled", "numeric": 2},
                'cancelled': {"status": "canceled", "numeric": 2}
            }
            
            mapped = status_mapping.get(obank_status, {"status": "processing", "numeric": 0})
            paid_amount = None
            
            if mapped["status"] == "approved":
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ç—ã–π—ã–Ω–æ–≤ –≤ —Å–æ–º—ã
                paid_amount = float(data.get('sum', 0)) / 1000
            
            return {
                "success": True,
                "status": mapped["status"],
                "numeric_status": mapped["numeric"],
                "paid_amount": paid_amount,
                "provider": "OBANK",
                "raw_response": response
            }
            
        else:  # O!Dengi
            response = await self.service.get_payment_status(
                invoice_id=invoice_id,
                order_id=order_id
            )
            
            # ODENGI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ data.status
            data = response.get('data', {})
            status_text = data.get('status', 'processing')
            paid_amount = None
            
            if data.get('amount'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Å–æ–º—ã
                paid_amount = data.get('amount', 0) / 100
            
            # –ú–∞–ø–ø–∏–Ω–≥ –¢–ï–ö–°–¢–û–í–´–• —Å—Ç–∞—Ç—É—Å–æ–≤ ODENGI (–∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API)
            status_mapping = {
                'processing': "processing",
                'approved': "approved", 
                'canceled': "canceled"
            }
            
            # –ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            numeric_mapping = {
                'processing': 0,
                'approved': 1,
                'canceled': 2
            }
            
            return {
                "success": True,
                "status": status_mapping.get(status_text, "processing"),
                "numeric_status": numeric_mapping.get(status_text, 0),
                "paid_amount": paid_amount,
                "provider": "ODENGI",
                "raw_response": response
            }
    
    async def create_h2h_payment(
        self,
        amount: Decimal,
        order_id: str,
        card_data: Dict[str, str],
        email: str,
        phone_number: Optional[str] = None,
        description: str = "",
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç H2H –ø–ª–∞—Ç–µ–∂ –∫–∞—Ä—Ç–æ–π (—Ç–æ–ª—å–∫–æ OBANK)
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            card_data: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (pan, name, cvv, year, month)
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            phone_number: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        if self.provider != "OBANK":
            return {
                "success": False,
                "error": "h2h_not_supported",
                "message": f"H2H –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º OBANK, —Ç–µ–∫—É—â–∏–π: {self.provider}"
            }
        
        try:
            response = await self.service.create_h2h_payment(
                amount_kgs=float(amount),
                client_id=order_id,
                card_data={
                    "number": card_data.get('pan', ''),
                    "holder_name": card_data.get('name', ''),
                    "cvv": card_data.get('cvv', ''),
                    "exp_year": card_data.get('year', ''),
                    "exp_month": card_data.get('month', ''),
                    "email": email,
                    "phone": phone_number or '+996700000000'
                }
            )
            
            if response.get('success'):
                return {
                    "success": True,
                    "transaction_id": response.get('transaction_id'),
                    "auth_key": response.get('auth_key'),
                    "status": response.get('status', 'processing'),
                    "message": response.get('message', 'H2H –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω'),
                    "provider": "OBANK"
                }
            else:
                return {
                    "success": False,
                    "error": response.get('error', 'h2h_creation_failed'),
                    "message": response.get('message', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è H2H –ø–ª–∞—Ç–µ–∂–∞')
                }
                
        except Exception as e:
            logger.error(f"H2H payment creation error: {e}")
            return {
                "success": False,
                "error": "h2h_exception",
                "message": str(e)
            }
    
    async def create_token_payment(
        self,
        amount: Decimal,
        order_id: str,
        card_token: str,
        email: str,
        description: str = "",
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ —Ç–æ–∫–µ–Ω—É –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ OBANK)
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ–º–∞—Ö
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            card_token: –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
            email: Email –∫–ª–∏–µ–Ω—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        if self.provider != "OBANK":
            return {
                "success": False,
                "error": "token_not_supported",
                "message": f"Token –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º OBANK, —Ç–µ–∫—É—â–∏–π: {self.provider}"
            }
        
        try:
            response = await self.service.create_token_payment(
                amount_kgs=float(amount),
                client_id=order_id,
                card_token=card_token
            )
            
            if response.get('success'):
                return {
                    "success": True,
                    "transaction_id": response.get('transaction_id'),
                    "auth_key": response.get('auth_key'),
                    "status": response.get('status', 'processing'),
                    "message": response.get('message', 'Token –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω'),
                    "provider": "OBANK"
                }
            else:
                return {
                    "success": False,
                    "error": response.get('error', 'token_payment_failed'),
                    "message": response.get('message', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Token –ø–ª–∞—Ç–µ–∂–∞')
                }
                
        except Exception as e:
            logger.error(f"Token payment creation error: {e}")
            return {
                "success": False,
                "error": "token_exception", 
                "message": str(e)
            }
    
    async def create_token(self, days: int = 14) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç (—Ç–æ–ª—å–∫–æ OBANK)
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            Dict —Å —Ç–æ–∫–µ–Ω–æ–º
        """
        if self.provider != "OBANK":
            return {
                "success": False,
                "error": "token_creation_not_supported",
                "message": f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º OBANK, —Ç–µ–∫—É—â–∏–π: {self.provider}"
            }
        
        try:
            response = await self.service.create_token(days=days)
            
            if response.get('success'):
                return {
                    "success": True,
                    "token_url": response.get('token_url'),
                    "token_expires_in_days": days,
                    "message": "–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                    "provider": "OBANK"
                }
            else:
                return {
                    "success": False,
                    "error": response.get('error', 'token_creation_failed'),
                    "message": response.get('message', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞')
                }
                
        except Exception as e:
            logger.error(f"Token creation error: {e}")
            return {
                "success": False,
                "error": "token_creation_exception",
                "message": str(e)
            }
    
    async def check_h2h_status(self, auth_key: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å H2H –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ OBANK)
        
        Args:
            auth_key: –ö–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ H2H –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        if self.provider != "OBANK":
            return {
                "success": False,
                "error": "h2h_status_not_supported",
                "message": f"–ü—Ä–æ–≤–µ—Ä–∫–∞ H2H —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º OBANK, —Ç–µ–∫—É—â–∏–π: {self.provider}"
            }
        
        try:
            response = await self.service.check_h2h_status(transaction_id=auth_key)
            
            return {
                "success": True,
                "status": response.get('status', 'processing'),
                "provider": "OBANK",
                "raw_response": response
            }
            
        except Exception as e:
            logger.error(f"H2H status check error: {e}")
            return {
                "success": False,
                "error": "h2h_status_exception",
                "message": str(e)
            }

    async def cancel_payment(
        self, 
        transaction_id: str, 
        refund_amount: Decimal
    ) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞
        
        Args:
            transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            refund_amount: –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–æ–º–∞—Ö
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–º–µ–Ω—ã
        """
        if self.provider == "OBANK":
            response = await self.service.cancel_payment(
                transaction_id=transaction_id,
                refund_amount=refund_amount
            )
            
            return {
                "success": response.get('state') == '0',
                "refund_id": response.get('id'),
                "refund_amount": float(response.get('sum', 0)) / 1000,
                "provider": "OBANK",
                "raw_response": response
            }
            
        else:  # O!Dengi
            # O!Dengi –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API –æ—Ç–º–µ–Ω—ã
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é
            return {
                "success": False,
                "error": "manual_refund_required",
                "message": "O!Dengi —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                "provider": "ODENGI"
            }
    
    def get_webhook_verification_method(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.provider
    
    def verify_webhook(self, payload: bytes, signature: str, **kwargs) -> bool:
        """
        –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç webhook –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            payload: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            signature: –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        """
        if self.provider == "OBANK":
            # OBANK –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            return True
            
        else:  # O!Dengi
            if hasattr(self.service, 'verify_webhook_signature'):
                return self.service.verify_webhook_signature(payload, signature)
            return False
    
    def get_provider_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.provider
    
    def get_currency_code(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if self.provider == "OBANK":
            return "417"  # KGS –∫–æ–¥ –¥–ª—è OBANK
        else:
            return "KGS"  # –î–ª—è O!Dengi

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
_payment_provider_service = None

def get_payment_provider_service() -> PaymentProviderService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return PaymentProviderService()

def get_qr_payment_service() -> PaymentProviderService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è QR –ø–ª–∞—Ç–µ–∂–µ–π (O!Dengi)"""
    return PaymentProviderService(force_provider="ODENGI")

def get_card_payment_service() -> PaymentProviderService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞—Ä—Ç–∞–º–∏ (OBANK)"""
    return PaymentProviderService(force_provider="OBANK") 