# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è background –∑–∞–¥–∞—á
import os
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª —è–≤–Ω–æ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º settings
env_path = Path(__file__).parent.parent / '.env'
if env_path.exists():
    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip()
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if key not in os.environ:
                    os.environ[key] = value

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, status
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import uvicorn
import asyncio
from datetime import datetime
from sqlalchemy import text

from app.core.config import settings
from ocpp_ws_server.ws_handler import OCPPWebSocketHandler
from ocpp_ws_server.redis_manager import redis_manager
from app.api import mobile  # –ò–º–ø–æ—Ä—Ç mobile API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ console
import sys

# –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
logging.getLogger("OCPPHandler").setLevel(logging.INFO)
logging.getLogger("OCPP").setLevel(logging.INFO)
logging.getLogger("websockets").setLevel(logging.INFO)
logging.getLogger("fastapi").setLevel(logging.INFO)
logging.getLogger("uvicorn").setLevel(logging.INFO)

logger = logging.getLogger(__name__)

# ============================================================================
# BACKGROUND TASKS –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´
# ============================================================================

async def check_payment_status(payment_table: str, invoice_id: str, max_checks: int = 20):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    
    Args:
        payment_table: "balance_topups"
        invoice_id: ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        max_checks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
    """
    logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id} (—Ç–∞–±–ª–∏—Ü–∞: {payment_table})")
    
    for check_number in range(1, max_checks + 1):
        try:
            # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            try:
                from app.db.session import get_session_local
                from app.crud.ocpp_service import payment_lifecycle_service
                
                SessionLocal = get_session_local()
                db = SessionLocal()
                
                result = await payment_lifecycle_service.perform_status_check(
                    db, payment_table, invoice_id
                )
                
                db.close()
                
                if result.get("success"):
                    new_status = result.get("new_status")
                    logger.info(f"üîç –ü–ª–∞—Ç–µ–∂ {invoice_id}: –ø—Ä–æ–≤–µ—Ä–∫–∞ {check_number}/{max_checks}, —Å—Ç–∞—Ç—É—Å: {new_status}")
                    
                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if new_status in ['approved', 'canceled', 'refunded']:
                        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id} –∑–∞–≤–µ—Ä—à–µ–Ω: {new_status}")
                        return
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {invoice_id}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id}: {e}")
            break
    
    logger.warning(f"‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({max_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫)")

def start_payment_monitoring(payment_table: str, invoice_id: str, max_checks: int = 20):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ API endpoints
    
    Args:
        payment_table: "balance_topups"
        invoice_id: ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        max_checks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
    """
    asyncio.create_task(check_payment_status(payment_table, invoice_id, max_checks))
    logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞ {invoice_id} (—Ç–∞–±–ª–∏—Ü–∞: {payment_table})")

async def payment_cleanup_task():
    """Background task –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
    await asyncio.sleep(1800)
    
    while True:
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º connection —Ç–æ–ª—å–∫–æ –≤ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                from app.db.session import get_session_local
                SessionLocal = get_session_local()
                db = SessionLocal()
                
                from app.crud.ocpp_service import payment_lifecycle_service
                result = await payment_lifecycle_service.cleanup_expired_payments(db)
                if result.get("success"):
                    cancelled_topups = result.get('cancelled_topups', 0)
                    if cancelled_topups > 0:
                        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–º–µ–Ω–µ–Ω–æ {cancelled_topups} –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
                    else:
                        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
            except Exception as e:
                logger.error(f"Failed to create database connection for cleanup: {e}")
            finally:
                try:
                    db.close()
                except:
                    pass
        
        except Exception as e:
            logger.error(f"Payment cleanup error: {e}")
        
        # –ñ–¥–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(3600)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle manager –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting OCPP WebSocket Server...")
    
    # üîç DEBUG: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Redis
    import os
    logger.info(f"üîç DEBUG - ENVIRONMENT CHECK:")
    logger.info(f"üîç REDIS_URL from env: {os.getenv('REDIS_URL', 'NOT SET')}")
    logger.info(f"üîç All Redis-related env vars:")
    for key, value in os.environ.items():
        if 'redis' in key.lower() or 'REDIS' in key:
            logger.info(f"üîç {key} = {value}")
    
    # üîç DEBUG: —Ç–µ—Å—Ç–∏—Ä—É–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    logger.info("üîç Testing Redis connection...")
    try:
        ping_result = await redis_manager.ping()
        if ping_result:
            logger.info("‚úÖ Redis PING successful!")
        else:
            logger.error("‚ùå Redis PING failed!")
    except Exception as e:
        logger.error(f"‚ùå Redis connection test failed: {e}")
    
    logger.info("‚úÖ Redis manager initialized")
    
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ cleanup –∑–∞–¥–∞—á–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π —Ç–µ–ø–µ—Ä—å –ø–æ —Å–æ–±—ã—Ç–∏—é)
    payment_cleanup_task_ref = asyncio.create_task(payment_cleanup_task())
    logger.info("üßπ Payment cleanup task started (1 —á–∞—Å –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)")
    logger.info("üîç Payment status checks –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
    
    yield
    
    # –û—Ç–º–µ–Ω–∞ background tasks –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    payment_cleanup_task_ref.cancel()
    logger.info("üõë Shutting down OCPP WebSocket Server...")
    logger.info("‚úÖ Application shutdown complete")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="EvPower OCPP WebSocket Server",
    description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≠–ó–°. HTTP endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ FlutterFlow.",
    version="1.0.0",
    lifespan=lifespan,
    docs_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Swagger UI
    redoc_url=None  # –û—Ç–∫–ª—é—á–∞–µ–º ReDoc
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WebSocket –∏ HTTP
allowed_origins = os.getenv("ALLOWED_HOSTS", "").split(",")
if not allowed_origins or allowed_origins == [""]:
    allowed_origins = ["*"]

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebSocket –≤ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

# ============================================================================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API –†–û–£–¢–ï–†–û–í
# ============================================================================

# Mobile API –¥–ª—è FlutterFlow
app.include_router(mobile.router)

# ============================================================================
# HEALTH CHECK ENDPOINT (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π HTTP endpoint)
# ============================================================================

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OCPP —Å–µ—Ä–≤–µ—Ä–∞")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCPP WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    import os
    try:
        # üîç DEBUG –¥–ª—è health check
        redis_url = os.getenv('REDIS_URL', 'NOT SET')
        logger.info(f"üîç HEALTH CHECK - REDIS_URL: {redis_url}")
        
        redis_status = await redis_manager.ping()
        logger.info(f"üîç HEALTH CHECK - Redis ping result: {redis_status}")
        
        if not redis_status:
            raise Exception("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - OCPP —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        connected_stations = await redis_manager.get_stations()
        logger.info(f"üîç HEALTH CHECK - Connected stations: {len(connected_stations)}")
        
        return {
            "status": "healthy",
            "service": "EvPower OCPP WebSocket Server",
            "version": "1.0.0",
            "redis": "connected",
            "connected_stations": len(connected_stations),
            "endpoints": ["ws://{host}/ws/{station_id}", "ws://{host}/ocpp/{station_id}", "GET /health"],
            "note": "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
        }
    except Exception as e:
        logger.error(f"‚ùå HEALTH CHECK FAILED: {e}")
        logger.error(f"üîç HEALTH CHECK - Current REDIS_URL: {os.getenv('REDIS_URL', 'NOT SET')}")
        return {
            "status": "unhealthy",
            "service": "EvPower OCPP WebSocket Server", 
            "version": "1.0.0",
            "error": str(e),
            "redis": "disconnected",
            "note": "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - OCPP –∏ –∑–∞—Ä—è–¥–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!"
        }

# ============================================================================
# OCPP WEBSOCKET ENDPOINT (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
# ============================================================================

@app.websocket("/ws/{station_id}")
@app.websocket("/ocpp/{station_id}")
async def websocket_endpoint(websocket: WebSocket, station_id: str):
    """
    WebSocket endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É OCPP 1.6
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ OCPP —Å–æ–æ–±—â–µ–Ω–∏—è:
    - BootNotification
    - Heartbeat
    - StatusNotification
    - Authorize
    - StartTransaction
    - StopTransaction
    - MeterValues
    """
    handler = OCPPWebSocketHandler(station_id, websocket)
    try:
        await handler.handle_connection()
    except WebSocketDisconnect:
        logger.info(f"Station {station_id} disconnected")
    except Exception as e:
        logger.error(f"WebSocket error for station {station_id}: {e}")
        await websocket.close(code=status.WS_1011_INTERNAL_ERROR)

# ============================================================================
# ROOT ENDPOINT
# ============================================================================

@app.get("/", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    return {
        "service": "EvPower OCPP WebSocket Server",
        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π",
        "websocket_urls": ["ws://{host}/ws/{station_id}", "ws://{host}/ocpp/{station_id}"],
        "health_check": "GET /health",
        "version": "1.0.0",
        "protocol": "OCPP 1.6 JSON",
        "note": "HTTP API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –≤ FlutterFlow –ø—Ä–æ–µ–∫—Ç–µ"
    }

# ============================================================================
# MAIN
# ============================================================================

if __name__ == "__main__":
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=9210,
        log_level="info"
    )

