from fastapi import FastAPI, WebSocket, WebSocketDisconnect, status
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import uvicorn
import os
import asyncio
from datetime import datetime
from sqlalchemy import text

from app.core.config import settings
from ocpp_ws_server.ws_handler import OCPPWebSocketHandler
from ocpp_ws_server.redis_manager import redis_manager
from app.api import mobile  # –ò–º–ø–æ—Ä—Ç mobile API
from app.crud.ocpp_service import payment_lifecycle_service
from app.db.session import get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================================================
# BACKGROUND TASKS –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´
# ============================================================================

async def payment_status_checker():
    """Background task –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with next(get_db()) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
                try:
                    pending_topups = db.execute(text("""
                        SELECT invoice_id FROM balance_topups 
                        WHERE status = 'pending' 
                        AND needs_status_check = true 
                        AND invoice_expires_at > NOW()
                        LIMIT 50
                    """)).fetchall()
                except UnicodeDecodeError as e:
                    logger.error(f"Unicode error in topups query, skipping: {e}")
                    pending_topups = []
                
                for (invoice_id,) in pending_topups:
                    try:
                        await payment_lifecycle_service.perform_status_check(
                            db, "balance_topups", invoice_id
                        )
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ O!Dengi
                    except Exception as e:
                        logger.error(f"Status check failed for topup {invoice_id}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –∑–∞—Ä—è–¥–∫—É
                try:
                    pending_charging = db.execute(text("""
                        SELECT invoice_id FROM charging_payments 
                        WHERE status = 'pending' 
                        AND needs_status_check = true 
                        AND invoice_expires_at > NOW()
                        LIMIT 50
                    """)).fetchall()
                except UnicodeDecodeError as e:
                    logger.error(f"Unicode error in charging query, skipping: {e}")
                    pending_charging = []
                
                for (invoice_id,) in pending_charging:
                    try:
                        await payment_lifecycle_service.perform_status_check(
                            db, "charging_payments", invoice_id
                        )
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ O!Dengi
                    except Exception as e:
                        logger.error(f"Status check failed for charging {invoice_id}: {e}")
                
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(pending_topups)} –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, {len(pending_charging)} –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –∑–∞—Ä—è–¥–∫—É")
        
        except Exception as e:
            logger.error(f"Payment status checker error: {e}")
        
        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)

async def payment_cleanup_task():
    """Background task –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
            
            with next(get_db()) as db:
                result = await payment_lifecycle_service.cleanup_expired_payments(db)
                if result.get("success"):
                    logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–º–µ–Ω–µ–Ω–æ {result.get('cancelled_topups', 0)} –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, {result.get('cancelled_charging_payments', 0)} –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –∑–∞—Ä—è–¥–∫—É")
        
        except Exception as e:
            logger.error(f"Payment cleanup error: {e}")
        
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(300)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle manager –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting OCPP WebSocket Server...")
    logger.info("‚úÖ Redis manager initialized")
    
    # –ó–∞–ø—É—Å–∫ background tasks –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    payment_checker_task = asyncio.create_task(payment_status_checker())
    payment_cleanup_task_ref = asyncio.create_task(payment_cleanup_task())
    logger.info("üîç Payment status checker started")
    logger.info("üßπ Payment cleanup task started")
    
    yield
    
    # –û—Ç–º–µ–Ω–∞ background tasks –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    payment_checker_task.cancel()
    payment_cleanup_task_ref.cancel()
    logger.info("üõë Shutting down OCPP WebSocket Server...")
    logger.info("‚úÖ Application shutdown complete")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="EvPower OCPP WebSocket Server",
    description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≠–ó–°. HTTP endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ FlutterFlow.",
    version="1.0.0",
    lifespan=lifespan,
    docs_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Swagger UI
    redoc_url=None  # –û—Ç–∫–ª—é—á–∞–µ–º ReDoc
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ)
allowed_origins = os.getenv("ALLOWED_HOSTS", "").split(",")
if not allowed_origins or allowed_origins == [""]:
    allowed_origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# ============================================================================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API –†–û–£–¢–ï–†–û–í
# ============================================================================

# Mobile API –¥–ª—è FlutterFlow
app.include_router(mobile.router)

# ============================================================================
# HEALTH CHECK ENDPOINT (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π HTTP endpoint)
# ============================================================================

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OCPP —Å–µ—Ä–≤–µ—Ä–∞")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCPP WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        redis_status = await redis_manager.ping()
        if not redis_status:
            raise Exception("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - OCPP —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        connected_stations = await redis_manager.get_stations()
        return {
            "status": "healthy",
            "service": "EvPower OCPP WebSocket Server",
            "version": "1.0.0",
            "redis": "connected",
            "connected_stations": len(connected_stations),
            "endpoints": ["ws://{host}/ws/{station_id}", "GET /health"],
            "note": "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "service": "EvPower OCPP WebSocket Server", 
            "version": "1.0.0",
            "error": str(e),
            "redis": "disconnected",
            "note": "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - OCPP –∏ –∑–∞—Ä—è–¥–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!"
        }

# ============================================================================
# OCPP WEBSOCKET ENDPOINT (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
# ============================================================================

@app.websocket("/ws/{station_id}")
async def websocket_endpoint(websocket: WebSocket, station_id: str):
    """
    WebSocket endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É OCPP 1.6
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ OCPP —Å–æ–æ–±—â–µ–Ω–∏—è:
    - BootNotification
    - Heartbeat
    - StatusNotification
    - Authorize
    - StartTransaction
    - StopTransaction
    - MeterValues
    """
    handler = OCPPWebSocketHandler(station_id, websocket)
    try:
        await handler.handle_connection()
    except WebSocketDisconnect:
        logger.info(f"Station {station_id} disconnected")
    except Exception as e:
        logger.error(f"WebSocket error for station {station_id}: {e}")
        await websocket.close(code=status.WS_1011_INTERNAL_ERROR)

# ============================================================================
# ROOT ENDPOINT
# ============================================================================

@app.get("/", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    return {
        "service": "EvPower OCPP WebSocket Server",
        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π",
        "websocket_url": "ws://{host}/ws/{station_id}",
        "health_check": "GET /health",
        "version": "1.0.0",
        "protocol": "OCPP 1.6 JSON",
        "note": "HTTP API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –≤ FlutterFlow –ø—Ä–æ–µ–∫—Ç–µ"
    }

# ============================================================================
# MAIN
# ============================================================================

if __name__ == "__main__":
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

