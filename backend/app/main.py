from fastapi import FastAPI, WebSocket, WebSocketDisconnect, status
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import uvicorn
import os

from app.core.config import settings
from ocpp_ws_server.ws_handler import OCPPWebSocketHandler
from ocpp_ws_server.redis_manager import redis_manager
from app.api import mobile  # –ò–º–ø–æ—Ä—Ç mobile API

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle manager –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting OCPP WebSocket Server...")
    logger.info("‚úÖ Redis manager initialized") 
    yield
    logger.info("üõë Shutting down OCPP WebSocket Server...")
    logger.info("‚úÖ Application shutdown complete")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="EvPower OCPP WebSocket Server",
    description="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≠–ó–°. HTTP endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ FlutterFlow.",
    version="1.0.0",
    lifespan=lifespan,
    docs_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Swagger UI
    redoc_url=None  # –û—Ç–∫–ª—é—á–∞–µ–º ReDoc
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ)
allowed_origins = os.getenv("ALLOWED_HOSTS", "").split(",")
if not allowed_origins or allowed_origins == [""]:
    allowed_origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# ============================================================================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API –†–û–£–¢–ï–†–û–í
# ============================================================================

# Mobile API –¥–ª—è FlutterFlow
app.include_router(mobile.router)

# ============================================================================
# HEALTH CHECK ENDPOINT (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π HTTP endpoint)
# ============================================================================

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OCPP —Å–µ—Ä–≤–µ—Ä–∞")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OCPP WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        redis_status = await redis_manager.ping()
        connected_stations = await redis_manager.get_stations()
        return {
            "status": "healthy",
            "service": "EvPower OCPP WebSocket Server",
            "version": "1.0.0",
            "redis": "connected" if redis_status else "disconnected",
            "connected_stations": len(connected_stations),
            "endpoints": ["ws://{host}/ws/{station_id}", "GET /health"],
            "note": "HTTP endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ FlutterFlow"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "redis": "error"
        }

# ============================================================================
# OCPP WEBSOCKET ENDPOINT (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
# ============================================================================

@app.websocket("/ws/{station_id}")
async def websocket_endpoint(websocket: WebSocket, station_id: str):
    """
    WebSocket endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É OCPP 1.6
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ OCPP —Å–æ–æ–±—â–µ–Ω–∏—è:
    - BootNotification
    - Heartbeat
    - StatusNotification
    - Authorize
    - StartTransaction
    - StopTransaction
    - MeterValues
    """
    handler = OCPPWebSocketHandler(station_id, websocket)
    try:
        await handler.handle_connection()
    except WebSocketDisconnect:
        logger.info(f"Station {station_id} disconnected")
    except Exception as e:
        logger.error(f"WebSocket error for station {station_id}: {e}")
        await websocket.close(code=status.WS_1011_INTERNAL_ERROR)

# ============================================================================
# ROOT ENDPOINT
# ============================================================================

@app.get("/", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    return {
        "service": "EvPower OCPP WebSocket Server",
        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OCPP 1.6 WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Ä—è–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π",
        "websocket_url": "ws://{host}/ws/{station_id}",
        "health_check": "GET /health",
        "version": "1.0.0",
        "protocol": "OCPP 1.6 JSON",
        "note": "HTTP API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –≤ FlutterFlow –ø—Ä–æ–µ–∫—Ç–µ"
    }

# ============================================================================
# MAIN
# ============================================================================

if __name__ == "__main__":
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

