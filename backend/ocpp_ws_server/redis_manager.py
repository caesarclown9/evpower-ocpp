# redis_manager.py
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –∏ Pub/Sub –¥–ª—è –∫–æ–º–∞–Ω–¥
import redis.asyncio as redis
import json
import os
import logging

logger = logging.getLogger(__name__)

class RedisOcppManager:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
        try:
            from app.core.config import settings
            redis_url = settings.REDIS_URL
            redis_password = settings.REDIS_PASSWORD
        except ImportError:
            # Fallback –µ—Å–ª–∏ config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            redis_url = os.getenv("REDIS_URL", "redis://redis:6379/0")
            redis_password = os.getenv("REDIS_PASSWORD", None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üîç REDIS_MANAGER INIT: Using REDIS_URL = {redis_url}")
        logger.info(f"üîç REDIS_MANAGER INIT: REDIS_PASSWORD configured = {bool(redis_password)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.redis = redis.from_url(redis_url, decode_responses=True)

    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
        try:
            result = await self.redis.ping()
            logger.info(f"‚úÖ REDIS PING SUCCESS: {result}")
            return True
        except Exception as e:
            logger.error(f"‚ùå REDIS PING FAILED: {e}")
            return False

    async def register_station(self, station_id: str):
        await self.redis.sadd("ocpp:stations", station_id)

    async def unregister_station(self, station_id: str):
        await self.redis.srem("ocpp:stations", station_id)

    async def get_stations(self):
        return await self.redis.smembers("ocpp:stations")

    async def publish_command(self, station_id: str, command: dict):
        channel = f"ocpp:cmd:{station_id}"
        await self.redis.publish(channel, json.dumps(command))

    async def listen_commands(self, station_id: str):
        channel = f"ocpp:cmd:{station_id}"
        pubsub = self.redis.pubsub()
        await pubsub.subscribe(channel)
        async for message in pubsub.listen():
            if message["type"] == "message":
                yield json.loads(message["data"])

    async def add_transaction(self, station_id: str, transaction: dict):
        key = f"ocpp:transactions:{station_id}"
        await self.redis.rpush(key, json.dumps(transaction))

    async def get_transactions(self, station_id: str = None):
        if station_id:
            key = f"ocpp:transactions:{station_id}"
            txs = await self.redis.lrange(key, 0, -1)
            return [json.loads(tx) for tx in txs]
        else:
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            keys = await self.redis.keys("ocpp:transactions:*")
            all_txs = []
            for key in keys:
                txs = await self.redis.lrange(key, 0, -1)
                all_txs.extend([json.loads(tx) for tx in txs])
            return all_txs
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    async def cache_data(self, key: str, value: str, ttl: int = 30):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å TTL"""
        await self.redis.setex(key, ttl, value)
    
    async def get_cached_data(self, key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        return await self.redis.get(key)
    
    async def delete(self, key: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –∫—ç—à–∞"""
        await self.redis.delete(key)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è Pub/Sub (–¥–ª—è realtime –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    async def publish(self, channel: str, message: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        await self.redis.publish(channel, message)
    
    async def get_message(self, channel: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        # –ù–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        return None

redis_manager = RedisOcppManager() 