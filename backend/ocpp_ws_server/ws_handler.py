"""
OCPP 1.6 WebSocket Handler - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ best practice
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: Tier 1, 2, 3 (–≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ OCPP 1.6)
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional

from fastapi import WebSocket, WebSocketDisconnect
from ocpp.v16 import ChargePoint as CP
from ocpp.routing import on
from ocpp.v16 import call_result, call
from ocpp.v16.enums import (
    RegistrationStatus, AuthorizationStatus, ConfigurationStatus,
    ResetStatus, ResetType, UnlockStatus, AvailabilityStatus,
    AvailabilityType, ClearCacheStatus, UpdateStatus,
    DiagnosticsStatus, FirmwareStatus, TriggerMessageStatus,
    MessageTrigger, UpdateType
)

from .redis_manager import redis_manager
from app.db.session import get_db
from app.crud.ocpp_service import (
    OCPPStationService,
    OCPPTransactionService,
    OCPPMeterService,
    OCPPAuthorizationService,
    OCPPConfigurationService
)
from app.db.models.ocpp import OCPPTransaction
from sqlalchemy import text
from decimal import Decimal
from app.core.station_auth import station_auth

logger = logging.getLogger(__name__)

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–º–∏—Ç–æ–≤
active_sessions: Dict[str, Dict[str, Any]] = {}

class OCPPChargePoint(CP):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π OCPP 1.6 ChargePoint —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def __init__(self, id: str, connection):
        super().__init__(id, connection)
        self.logger = logging.getLogger(f"OCPP.{id}")
        
    # ============================================================================
    # TIER 1: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    # ============================================================================
    
    @on('BootNotification')
    def on_boot_notification(self, charge_point_model, charge_point_vendor, **kwargs):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        self.logger.info(f"BootNotification: {charge_point_model}, {charge_point_vendor}")
        
        try:
            # üöÄ –ë–´–°–¢–†–´–ô –û–¢–í–ï–¢: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
            self.logger.info(f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è {self.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º DB –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ background
            firmware_version = kwargs.get('firmware_version')
            asyncio.create_task(self._handle_boot_notification_background(firmware_version))
            
            return call_result.BootNotification(
                current_time=datetime.utcnow().isoformat() + 'Z',
                interval=300,
                status=RegistrationStatus.accepted
            )
            
        except Exception as e:
            self.logger.error(f"Error in BootNotification: {e}")
            return call_result.BootNotification(
                current_time=datetime.utcnow().isoformat() + 'Z',
                interval=300,
                status=RegistrationStatus.rejected
            )
    
    async def _handle_boot_notification_background(self, firmware_version: str = None):
        """Background –æ–±—Ä–∞–±–æ—Ç–∫–∞ BootNotification –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        try:
            self.logger.info(f"üîÑ Background –æ–±—Ä–∞–±–æ—Ç–∫–∞ BootNotification –¥–ª—è {self.id}")
            
            with next(get_db()) as db:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏
                OCPPStationService.mark_boot_notification_sent(
                    db, self.id, firmware_version
                )
                
                # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                OCPPConfigurationService.set_configuration(
                    db, self.id, "HeartbeatInterval", "300", readonly=True
                )
                OCPPConfigurationService.set_configuration(
                    db, self.id, "MeterValueSampleInterval", "60", readonly=True
                )
                
                # üÜï –ê–í–¢–û–ó–ê–ü–£–°–ö: –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —Å–µ—Å—Å–∏–∏
                pending_sessions_query = text("""
                    SELECT id, user_id, limit_value, limit_type
                    FROM charging_sessions 
                    WHERE station_id = :station_id 
                    AND status = 'started' 
                    AND transaction_id IS NULL
                """)
                
                pending_sessions = db.execute(pending_sessions_query, {"station_id": self.id}).fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π pending —Å–µ—Å—Å–∏–∏
                for session in pending_sessions:
                    session_id, user_id, limit_value, limit_type = session
                    
                    # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ CLIENT_ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    phone_query = text("""
                        SELECT phone FROM clients WHERE id = :client_id
                    """)
                    phone_result = db.execute(phone_query, {"client_id": user_id}).fetchone()
                    id_tag = phone_result[0] if phone_result else f"CLIENT_{user_id}"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∏–∑ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤
                    connector_query = text("""
                        SELECT connector_number FROM connectors 
                        WHERE station_id = :station_id AND status = 'occupied'
                        LIMIT 1
                    """)
                    connector_result = db.execute(connector_query, {"station_id": self.id}).fetchone()
                    connector_id = connector_result[0] if connector_result else 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Redis
                    command_data = {
                        "action": "RemoteStartTransaction",
                        "connector_id": connector_id,
                        "id_tag": id_tag,
                        "session_id": session_id,
                        "limit_type": limit_type,
                        "limit_value": limit_value
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Redis –∫–æ–º–∞–Ω–¥—É
                    await redis_manager.publish_command(self.id, command_data)
                    
                    self.logger.info(f"üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞—Ä—è–¥–∫–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                    
                db.commit()
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ background –æ–±—Ä–∞–±–æ—Ç–∫–∏ BootNotification: {e}")

    @on('Heartbeat')
    def on_heartbeat(self, **kwargs):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∂–∏–∑–Ω–∏"""
        self.logger.debug(f"Heartbeat from {self.id}")
        
        try:
            with next(get_db()) as db:
                OCPPStationService.update_heartbeat(db, self.id)
                
            return call_result.Heartbeat(
                current_time=datetime.utcnow().isoformat() + 'Z'
            )
            
        except Exception as e:
            self.logger.error(f"Error in Heartbeat: {e}")
            return call_result.Heartbeat(
                current_time=datetime.utcnow().isoformat() + 'Z'
            )

    @on('StatusNotification')
    def on_status_notification(self, connector_id, error_code, status, **kwargs):
        """–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ StatusNotification
        info = kwargs.get('info')
        vendor_id = kwargs.get('vendor_id') 
        vendor_error_code = kwargs.get('vendor_error_code')
        timestamp = kwargs.get('timestamp')
        
        self.logger.info(f"StatusNotification: connector={connector_id}, status={status}, error={error_code}")
        self.logger.debug(f"StatusNotification –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {kwargs}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫
        if error_code != "NoError":
            self.logger.warning(f"üö® –û–®–ò–ë–ö–ê –ö–û–ù–ù–ï–ö–¢–û–†–ê {connector_id}: {error_code}")
            if info:
                self.logger.warning(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
            if vendor_error_code:
                self.logger.warning(f"   Vendor Error Code: {vendor_error_code}")
            if vendor_id:
                self.logger.warning(f"   Vendor ID: {vendor_id}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            asyncio.create_task(self._perform_error_diagnostics(connector_id, error_code))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        if status in ["Faulted", "Unavailable"]:
            self.logger.error(f"üî¥ –ö–û–ù–ù–ï–ö–¢–û–† {connector_id} –ù–ï–î–û–°–¢–£–ü–ï–ù: {status} - {error_code}")
        elif status in ["Available", "Occupied"]:
            self.logger.info(f"üü¢ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä {connector_id}: {status}")
        else:
            self.logger.debug(f"–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä {connector_id}: {status}")
        
        try:
            with next(get_db()) as db:
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                station_status = OCPPStationService.update_station_status(
                    db, self.id, status, error_code, info, vendor_id, vendor_error_code
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –≤ JSON –ø–æ–ª–µ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                connector_status = station_status.connector_status or []
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
                connector_found = False
                for i, conn in enumerate(connector_status):
                    if conn.get('connector_id') == connector_id:
                        connector_status[i] = {
                            'connector_id': connector_id,
                            'status': status,
                            'error_code': error_code,
                            'info': info,
                            'timestamp': datetime.utcnow().isoformat()
                        }
                        connector_found = True
                        break
                
                if not connector_found:
                    connector_status.append({
                        'connector_id': connector_id,
                        'status': status,
                        'error_code': error_code,
                        'info': info,
                        'timestamp': datetime.utcnow().isoformat()
                    })
                
                station_status.connector_status = connector_status
                
                # üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É connectors
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OCPP —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                connector_status_mapping = {
                    'Available': 'Available',
                    'Preparing': 'Occupied', 
                    'Charging': 'Occupied',
                    'SuspendedEVSE': 'Occupied',
                    'SuspendedEV': 'Occupied',
                    'Finishing': 'Occupied',
                    'Reserved': 'Occupied',
                    'Unavailable': 'Unavailable',
                    'Faulted': 'Faulted'
                }
                
                new_status = connector_status_mapping.get(status, 'Unavailable')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ connectors
                update_query = text("""
                    UPDATE connectors 
                    SET status = :status, error_code = :error_code, last_status_update = NOW()
                    WHERE station_id = :station_id AND connector_number = :connector_id
                """)
                db.execute(update_query, {
                    "status": new_status.lower(), 
                    "error_code": error_code, 
                    "station_id": self.id, 
                    "connector_id": connector_id
                })
                
                db.commit()
                
            return call_result.StatusNotification()
            
        except Exception as e:
            self.logger.error(f"Error in StatusNotification: {e}")
            return call_result.StatusNotification()

    @on('Authorize')
    def on_authorize(self, id_tag, **kwargs):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è RFID –∫–∞—Ä—Ç"""
        self.logger.info(f"Authorize request for id_tag: {id_tag}")
        
        try:
            with next(get_db()) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                auth_result = OCPPAuthorizationService.authorize_id_tag(db, id_tag)
                
            self.logger.info(f"Authorization result for {id_tag}: {auth_result['status']}")
            
            return call_result.Authorize(id_tag_info=auth_result)
            
        except Exception as e:
            self.logger.error(f"Error in Authorize: {e}")
            return call_result.Authorize(
                id_tag_info={"status": AuthorizationStatus.invalid}
            )

    @on('StartTransaction')
    def on_start_transaction(self, connector_id, id_tag, meter_start, timestamp, **kwargs):
        """–ù–∞—á–∞–ª–æ —Å–µ–∞–Ω—Å–∞ –∑–∞—Ä—è–¥–∫–∏"""
        self.logger.info(f"StartTransaction: connector={connector_id}, id_tag={id_tag}, meter_start={meter_start}")
        
        try:
            with next(get_db()) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                auth_result = OCPPAuthorizationService.authorize_id_tag(db, id_tag)
                if auth_result["status"] != "Accepted":
                    self.logger.warning(f"Unauthorized id_tag: {id_tag}")
                    return call_result.StartTransaction(
                        transaction_id=0,
                        id_tag_info=auth_result
                    )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º transaction_id
                transaction_id = int(datetime.utcnow().timestamp())
                
                # üÜï –ü–†–ê–í–ò–õ–¨–ù–û–ï –°–í–Ø–ó–´–í–ê–ù–ò–ï: –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ocpp_authorization
                charging_session_id = None
                client_id = None
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É ocpp_authorization –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ phone
                auth_query = text("""
                    SELECT client_id FROM ocpp_authorization 
                    WHERE id_tag = :id_tag AND client_id IS NOT NULL
                    LIMIT 1
                """)
                auth_result = db.execute(auth_query, {"id_tag": id_tag})
                auth_row = auth_result.fetchone()
                
                if auth_row:
                    client_id = auth_row[0]
                    self.logger.info(f"üîç –ù–ê–ô–î–ï–ù –ö–õ–ò–ï–ù–¢ –ß–ï–†–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ: id_tag={id_tag} -> client_id={client_id}")
                    
                    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    find_session_query = text("""
                        SELECT id FROM charging_sessions 
                        WHERE user_id = :client_id AND status = 'started' 
                        ORDER BY start_time DESC LIMIT 1
                    """)
                    session_result = db.execute(find_session_query, {"client_id": client_id})
                    session_row = session_result.fetchone()
                    
                    if session_row:
                        charging_session_id = session_row[0]
                        self.logger.info(f"üîó –ù–ê–ô–î–ï–ù–ê –ê–ö–¢–ò–í–ù–ê–Ø –°–ï–°–°–ò–Ø: {charging_session_id}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é —Å OCPP –¥–∞–Ω–Ω—ã–º–∏
                        update_session_query = text("""
                            UPDATE charging_sessions 
                            SET transaction_id = :transaction_id 
                            WHERE id = :session_id
                        """)
                        db.execute(update_session_query, {
                            "transaction_id": str(transaction_id),
                            "session_id": charging_session_id
                        })
                        
                        self.logger.info(f"‚úÖ Mobile —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: transaction_id={transaction_id}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è id_tag: {id_tag}")
                
                # –°–æ–∑–¥–∞–µ–º OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å–≤—è–∑–∫–æ–π
                transaction = OCPPTransactionService.start_transaction(
                    db, self.id, transaction_id, connector_id, id_tag,
                    float(meter_start), datetime.fromisoformat(timestamp.replace('Z', '')),
                    charging_session_id  # –ü–µ—Ä–µ–¥–∞–µ–º charging_session_id
                )
                
                self.logger.info(f"‚úÖ OCPP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {transaction_id} ‚Üî {charging_session_id}")
                
                # üîç –ó–ê–ì–†–£–ñ–ê–ï–ú –õ–ò–ú–ò–¢–´ –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                session_limits_query = text("""
                    SELECT limit_type, limit_value 
                    FROM charging_sessions 
                    WHERE id = :session_id
                """)
                limits_result = db.execute(session_limits_query, {"session_id": charging_session_id}).fetchone()
                
                session_limit_type = None
                session_limit_value = None
                if limits_result:
                    session_limit_type = limits_result[0]
                    session_limit_value = float(limits_result[1]) if limits_result[1] else None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                existing_session = active_sessions.get(self.id, {})
                active_sessions[self.id] = {
                    'transaction_id': transaction_id,
                    'charging_session_id': charging_session_id,
                    'meter_start': meter_start,
                    'energy_delivered': 0.0,
                    'connector_id': connector_id,
                    'id_tag': id_tag,
                    'client_id': client_id,
                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –õ–ò–ú–ò–¢–´ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    'limit_type': session_limit_type,
                    'limit_value': session_limit_value
                }
                
                self.logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏–º–∏—Ç—ã: {session_limit_type} = {session_limit_value} –¥–ª—è —Å–µ—Å—Å–∏–∏ {charging_session_id}")
                
                # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–Ω—è—Ç
                update_query = text("""
                    UPDATE connectors 
                    SET status = 'occupied', last_status_update = NOW()
                    WHERE station_id = :station_id AND connector_number = :connector_id
                """)
                db.execute(update_query, {"station_id": self.id, "connector_id": connector_id})
                db.commit()
                
            self.logger.info(f"Transaction started: {transaction_id}, connector {connector_id} marked as Occupied")
            return call_result.StartTransaction(
                transaction_id=transaction_id,
                id_tag_info={"status": AuthorizationStatus.accepted}
            )
            
        except Exception as e:
            self.logger.error(f"Error in StartTransaction: {e}")
            return call_result.StartTransaction(
                transaction_id=0,
                id_tag_info={"status": AuthorizationStatus.invalid}
            )

    @on('StopTransaction')
    def on_stop_transaction(self, meter_stop, timestamp, transaction_id, **kwargs):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –∑–∞—Ä—è–¥–∫–∏"""
        id_tag = kwargs.get('id_tag')
        reason = kwargs.get('reason', 'Local')
        
        self.logger.info(f"StopTransaction: transaction_id={transaction_id}, meter_stop={meter_stop}")
        
        try:
            with next(get_db()) as db:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
                transaction = db.query(OCPPTransaction).filter(
                    OCPPTransaction.station_id == self.id,
                    OCPPTransaction.transaction_id == transaction_id
                ).first()
                
                connector_id = transaction.connector_id if transaction else None
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = OCPPTransactionService.stop_transaction(
                    db, self.id, transaction_id, float(meter_stop),
                    datetime.fromisoformat(timestamp.replace('Z', '')), reason
                )
                
                # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ú–û–ë–ò–õ–¨–ù–û–ô –°–ï–°–°–ò–ò
                if transaction and transaction.charging_session_id:
                    session_id = transaction.charging_session_id
                    try:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é (Wh ‚Üí kWh)
                        energy_consumed = (float(meter_stop) - float(transaction.meter_start)) / 1000.0
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ
                        tariff_query = text("""
                            SELECT price_per_kwh FROM stations WHERE id = :station_id
                        """)
                        tariff_result = db.execute(tariff_query, {"station_id": self.id}).fetchone()
                        rate_per_kwh = float(tariff_result[0]) if tariff_result and tariff_result[0] else 12.0
                        
                        actual_cost = energy_consumed * rate_per_kwh
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
                        session_query = text("""
                            SELECT user_id, amount FROM charging_sessions 
                            WHERE id = :session_id
                        """)
                        session_result = db.execute(session_query, {"session_id": session_id}).fetchone()
                        
                        if session_result:
                            user_id = session_result[0]
                            reserved_amount = float(session_result[1]) if session_result[1] else 0
                            
                            # üí≥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï: –ï—Å–ª–∏ actual_cost –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤ - —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                            if actual_cost > reserved_amount:
                                additional_charge = actual_cost - reserved_amount
                                self.logger.warning(f"‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï –†–ï–ó–ï–†–í–ê: actual_cost={actual_cost} > reserved={reserved_amount}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {additional_charge} —Å–æ–º")
                                
                                # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
                                additional_charge_query = text("""
                                    UPDATE clients 
                                    SET balance = balance - :additional_charge 
                                    WHERE id = :user_id
                                """)
                                db.execute(additional_charge_query, {
                                    "additional_charge": additional_charge,
                                    "user_id": user_id
                                })
                                
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                additional_transaction_query = text("""
                                    INSERT INTO payment_transactions_odengi (client_id, transaction_type, amount, description)
                                    VALUES (:client_id, 'balance_topup', :amount, :description)
                                """)
                                db.execute(additional_transaction_query, {
                                    "client_id": user_id,
                                    "amount": f"-{additional_charge:.2f}",
                                    "description": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞)"
                                })
                                
                                self.logger.info(f"üí≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∏—Å–∞–Ω–æ {additional_charge} —Å–æ–º —Å –∫–ª–∏–µ–Ω—Ç–∞ {user_id}")
                                refund_amount = 0  # –í–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
                            else:
                                refund_amount = reserved_amount - actual_cost
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            update_session_query = text("""
                                UPDATE charging_sessions 
                                SET stop_time = NOW(), status = 'stopped', 
                                    energy = :energy_consumed, amount = :actual_cost
                                WHERE id = :session_id
                            """)
                            db.execute(update_session_query, {
                                "energy_consumed": energy_consumed,
                                "actual_cost": actual_cost,
                                "session_id": session_id
                            })
                            
                            # –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
                            if refund_amount > 0:
                                refund_query = text("""
                                    UPDATE clients 
                                    SET balance = balance + :refund_amount 
                                    WHERE id = :user_id
                                """)
                                db.execute(refund_query, {
                                    "refund_amount": refund_amount,
                                    "user_id": user_id
                                })
                                
                                self.logger.info(f"üí∞ –í–æ–∑–≤—Ä–∞—Ç {refund_amount} —Å–æ–º –∫–ª–∏–µ–Ω—Ç—É {user_id}")
                            
                            self.logger.info(f"‚úÖ Mobile —Å–µ—Å—Å–∏—è {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {energy_consumed} –∫–í—Ç‚ãÖ—á, {actual_cost} —Å–æ–º")
                        
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                
                # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–µ–Ω
                if connector_id:
                    update_query = text("""
                        UPDATE connectors 
                        SET status = 'available', error_code = 'NoError', last_status_update = NOW()
                        WHERE station_id = :station_id AND connector_number = :connector_id
                    """)
                    db.execute(update_query, {"station_id": self.id, "connector_id": connector_id})
                
                db.commit()
                
                # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                if self.id in active_sessions:
                    del active_sessions[self.id]
                
            self.logger.info(f"Transaction completed: {transaction_id}, connector {connector_id} marked as Available")
            return call_result.StopTransaction(
                id_tag_info={"status": AuthorizationStatus.accepted}
            )
            
        except Exception as e:
            self.logger.error(f"Error in StopTransaction: {e}")
            return call_result.StopTransaction(
                id_tag_info={"status": AuthorizationStatus.invalid}
            )

    @on('MeterValues')
    async def on_meter_values(self, connector_id, meter_value, **kwargs):
        """–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏"""
        transaction_id = kwargs.get('transaction_id')
        self.logger.debug(f"MeterValues: connector={connector_id}, transaction_id={transaction_id}")
        
        try:
            with next(get_db()) as db:
                # üîç DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                self.logger.info(f"üîç RAW DEBUG: meter_value={meter_value}")
                self.logger.info(f"üîç RAW DEBUG: type={type(meter_value)}")
                
                # –ü–∞—Ä—Å–∏–º timestamp
                timestamp_str = meter_value[0].get('timestamp') if meter_value else None
                if timestamp_str:
                    timestamp = datetime.fromisoformat(timestamp_str.replace('Z', ''))
                else:
                    timestamp = datetime.utcnow()
                
                # –ü–∞—Ä—Å–∏–º sampled values
                sampled_values = []
                for mv in meter_value:
                    self.logger.info(f"üîç MV DEBUG: mv={mv}")
                    sampled_value_list = mv.get('sampled_value', [])
                    self.logger.info(f"üîç SV DEBUG: sampledValue={sampled_value_list}")
                    for sample in sampled_value_list:
                        self.logger.info(f"üîç SAMPLE DEBUG: sample={sample}")
                        sampled_values.append({
                            'measurand': sample.get('measurand', ''),
                            'value': sample.get('value'),
                            'unit': sample.get('unit', ''),
                            'context': sample.get('context', ''),
                            'format': sample.get('format', ''),
                            'location': sample.get('location', '')
                        })
                
                self.logger.info(f"üîç DEBUG: Parsed values: {sampled_values}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
                OCPPMeterService.add_meter_values(
                    db, self.id, connector_id, timestamp, sampled_values, transaction_id
                )
                
                # üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                session = active_sessions.get(self.id)
                self.logger.info(f"üîç DEBUG: Active session for {self.id}: {session}")
                
                if session and sampled_values:
                    for sample in sampled_values:
                        if sample['measurand'] == 'Energy.Active.Import.Register':
                            try:
                                current_energy = float(sample['value'])
                                meter_start = session.get('meter_start', 0.0)
                                energy_delivered_wh = current_energy - meter_start
                                energy_delivered_kwh = energy_delivered_wh / 1000.0  # Wh ‚Üí kWh
                                
                                session['energy_delivered'] = energy_delivered_kwh
                                
                                # üÜï –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í –≠–ù–ï–†–ì–ò–ò (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
                                limit_type = session.get('limit_type')
                                limit_value = session.get('limit_value')
                                
                                if limit_type == 'energy' and limit_value and energy_delivered_kwh >= limit_value:
                                    self.logger.warning(f"üõë –õ–ò–ú–ò–¢ –ü–†–ï–í–´–®–ï–ù: {energy_delivered_kwh:.3f} >= {limit_value} –∫–í—Ç‚ãÖ—á. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—Ä—è–¥–∫—É!")
                                    
                                    # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                    transaction_id = session.get('transaction_id')
                                    if transaction_id:
                                        try:
                                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ Redis
                                            await redis_manager.publish_command(self.id, {
                                                "action": "RemoteStopTransaction", 
                                                "transaction_id": transaction_id,
                                                "reason": "EnergyLimitReached"
                                            })
                                            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è transaction_id: {transaction_id}")
                                        except Exception as stop_error:
                                            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_error}")
                                elif limit_type is None:
                                    # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                                    session_id = session.get('charging_session_id')
                                    if session_id:
                                        try:
                                            with next(get_db()) as db:
                                                # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤
                                                session_query = text("""
                                                    SELECT cs.user_id, cs.amount, s.price_per_kwh
                                                    FROM charging_sessions cs
                                                    JOIN stations s ON cs.station_id = s.id
                                                    WHERE cs.id = :session_id
                                                """)
                                                session_result = db.execute(session_query, {"session_id": session_id}).fetchone()
                                                
                                                if session_result:
                                                    user_id, reserved_amount, rate_per_kwh = session_result
                                                    rate_per_kwh = float(rate_per_kwh) if rate_per_kwh else 12.0
                                                    
                                                    current_cost = energy_delivered_kwh * rate_per_kwh
                                                    reserved_amount_float = float(reserved_amount)
                                                    
                                                    # üîí –§–ò–ù–ê–ù–°–û–í–ê–Ø –ó–ê–©–ò–¢–ê: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                                                    warning_threshold = reserved_amount_float * 0.85  # 85% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                                                    stop_threshold = reserved_amount_float * 0.90     # 90% –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                                                    
                                                    if current_cost >= warning_threshold:
                                                        self.logger.warning(f"‚ö†Ô∏è –°–†–ï–î–°–¢–í–ê –ó–ê–ö–ê–ù–ß–ò–í–ê–Æ–¢–°–Ø: {current_cost:.2f} –∏–∑ {reserved_amount_float} —Å–æ–º ({(current_cost/reserved_amount_float)*100:.1f}%)")
                                                        
                                                        # –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 90% —Ä–µ–∑–µ—Ä–≤–∞ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                                                        if current_cost >= stop_threshold:
                                                            transaction_id = session.get('transaction_id')
                                                            if transaction_id:
                                                                await redis_manager.publish_command(self.id, {
                                                                    "action": "RemoteStopTransaction", 
                                                                    "transaction_id": transaction_id,
                                                                    "reason": "InsufficientFunds"
                                                                })
                                                                self.logger.warning(f"üõë –°–†–ï–î–°–¢–í–ê –ü–û–ß–¢–ò –ò–°–ß–ï–†–ü–ê–ù–´: {current_cost:.2f}/{reserved_amount_float} —Å–æ–º. –û–°–¢–ê–ù–û–í–ö–ê!")
                                        except Exception as fund_check_error:
                                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤: {fund_check_error}")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
                                update_energy_query = text("""
                                    UPDATE charging_sessions 
                                    SET energy = :energy_consumed 
                                    WHERE id = :session_id AND status = 'started'
                                """)
                                db.execute(update_energy_query, {
                                    "energy_consumed": energy_delivered_kwh,
                                    "session_id": session['charging_session_id']
                                })
                                db.commit()
                                
                                self.logger.info(f"‚ö° ENERGY UPDATE: {energy_delivered_kwh:.3f} kWh –≤ —Å–µ—Å—Å–∏–∏ {session['charging_session_id']}")
                                
                            except (ValueError, TypeError) as e:
                                self.logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏: {e}")
                                break
                else:
                    self.logger.warning(f"üîç NO SESSION DEBUG: session={session}, sampled_values={bool(sampled_values)}")
                
        except Exception as e:
            self.logger.error(f"Error in MeterValues: {e}")
        
        return call_result.MeterValues()

    # ============================================================================
    # TIER 1: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ)
    # ============================================================================

    @on('GetConfiguration')
    def on_get_configuration(self, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        keys = kwargs.get('key', [])
        self.logger.info(f"GetConfiguration request for keys: {keys}")
        
        try:
            with next(get_db()) as db:
                configurations = OCPPConfigurationService.get_configuration(
                    db, self.id, keys
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                configuration_key = []
                unknown_key = []
                
                if keys:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
                    found_keys = {config.key for config in configurations}
                    for key in keys:
                        if key in found_keys:
                            config = next(c for c in configurations if c.key == key)
                            configuration_key.append({
                                "key": config.key,
                                "readonly": config.readonly,
                                "value": config.value
                            })
                        else:
                            unknown_key.append(key)
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    for config in configurations:
                        configuration_key.append({
                            "key": config.key,
                            "readonly": config.readonly,
                            "value": config.value
                        })
                
            return call_result.GetConfiguration(
                configuration_key=configuration_key,
                unknown_key=unknown_key if unknown_key else None
            )
            
        except Exception as e:
            self.logger.error(f"Error in GetConfiguration: {e}")
            return call_result.GetConfiguration(
                configuration_key=[],
                unknown_key=keys if keys else []
            )

    @on('ChangeConfiguration')
    def on_change_configuration(self, key, value, **kwargs):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        self.logger.info(f"ChangeConfiguration: {key} = {value}")
        
        try:
            with next(get_db()) as db:
                result = OCPPConfigurationService.change_configuration(
                    db, self.id, key, value
                )
                
            status = result.get("status", "Rejected")
            self.logger.info(f"ChangeConfiguration result: {status}")
            
            return call_result.ChangeConfiguration(
                status=ConfigurationStatus[status.lower()]
            )
            
        except Exception as e:
            self.logger.error(f"Error in ChangeConfiguration: {e}")
            return call_result.ChangeConfiguration(
                status=ConfigurationStatus.rejected
            )

    @on('Reset')
    def on_reset(self, type, **kwargs):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç–∞–Ω—Ü–∏–∏"""
        self.logger.info(f"Reset request: {type}")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ reset –≤ –ë–î
            with next(get_db()) as db:
                OCPPStationService.update_station_status(
                    db, self.id, "Unavailable", "Reset", f"Reset {type} requested"
                )
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞
            # –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏
            
            return call_result.Reset(status=ResetStatus.accepted)
            
        except Exception as e:
            self.logger.error(f"Error in Reset: {e}")
            return call_result.Reset(status=ResetStatus.rejected)

    @on('UnlockConnector')
    def on_unlock_connector(self, connector_id, **kwargs):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        self.logger.info(f"UnlockConnector request for connector: {connector_id}")
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
            # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
            
            with next(get_db()) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                active_transaction = db.query(OCPPTransaction).filter(
                    OCPPTransaction.station_id == self.id,
                    OCPPTransaction.status == "started"
                ).first()
                
                if active_transaction:
                    # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –Ω–µ –º–æ–∂–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                    return call_result.UnlockConnector(
                        status=UnlockStatus.not_supported
                    )
            
            return call_result.UnlockConnector(status=UnlockStatus.unlocked)
            
        except Exception as e:
            self.logger.error(f"Error in UnlockConnector: {e}")
            return call_result.UnlockConnector(status=UnlockStatus.unlock_failed)

    # ============================================================================
    # TIER 2: –í–ê–ñ–ù–´–ï –î–õ–Ø PRODUCTION
    # ============================================================================

    @on('DataTransfer')
    def on_data_transfer(self, vendor_id, **kwargs):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"""
        message_id = kwargs.get('message_id', '')
        data = kwargs.get('data', '')
        
        self.logger.info(f"DataTransfer: vendor_id={vendor_id}, message_id={message_id}")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç vendor_id –∏ message_id
            
            return call_result.DataTransfer(
                status="Accepted",
                data=f"Received: {data}"
            )
            
        except Exception as e:
            self.logger.error(f"Error in DataTransfer: {e}")
            return call_result.DataTransfer(status="Rejected")

    @on('DiagnosticsStatusNotification')
    def on_diagnostics_status_notification(self, status, **kwargs):
        """–°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.logger.info(f"DiagnosticsStatusNotification: status={status}")
        
        try:
            with next(get_db()) as db:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                OCPPConfigurationService.set_configuration(
                    db, self.id, "DiagnosticsStatus", status
                )
                
            return call_result.DiagnosticsStatusNotification()
            
        except Exception as e:
            self.logger.error(f"Error in DiagnosticsStatusNotification: {e}")
            return call_result.DiagnosticsStatusNotification()

    @on('FirmwareStatusNotification')
    def on_firmware_status_notification(self, status, **kwargs):
        """–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏"""
        self.logger.info(f"FirmwareStatusNotification: status={status}")
        
        try:
            with next(get_db()) as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—à–∏–≤–∫–∏
                station_status = OCPPStationService.get_station_status(db, self.id)
                if station_status:
                    if status == FirmwareStatus.installed:
                        # –ü—Ä–æ—à–∏–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                        station_status.firmware_version = "Updated"
                    elif status == FirmwareStatus.installation_failed:
                        # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        station_status.error_code = "FirmwareUpdateFailed"
                    
                    db.commit()
                
            return call_result.FirmwareStatusNotification()
            
        except Exception as e:
            self.logger.error(f"Error in FirmwareStatusNotification: {e}")
            return call_result.FirmwareStatusNotification()

    # ============================================================================
    # TIER 2: –†–ê–°–®–ò–†–ï–ù–ù–´–ï (–≤–∞–∂–Ω—ã–µ –¥–ª—è production)
    # ============================================================================

    @on('ChangeAvailability')
    def on_change_availability(self, connector_id, type, **kwargs):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω—Ü–∏–∏/–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        self.logger.info(f"ChangeAvailability: connector={connector_id}, type={type}")
        
        try:
            with next(get_db()) as db:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if type == AvailabilityType.operative:
                    new_status = "Available"
                else:  # inoperative
                    new_status = "Unavailable"
                
                OCPPStationService.update_station_status(
                    db, self.id, new_status, None, f"Availability changed to {type}"
                )
            
            return call_result.ChangeAvailability(
                status=AvailabilityStatus.accepted
            )
            
        except Exception as e:
            self.logger.error(f"Error in ChangeAvailability: {e}")
            return call_result.ChangeAvailability(
                status=AvailabilityStatus.rejected
            )

    @on('ClearCache')
    def on_clear_cache(self, **kwargs):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.logger.info("ClearCache request")
        
        try:
            with next(get_db()) as db:
                # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                expired_auths = db.query(OCPPAuthorization).filter(
                    OCPPAuthorization.station_id == self.id,
                    OCPPAuthorization.is_local == True
                ).all()
                
                for auth in expired_auths:
                    auth.expires_at = datetime.utcnow()  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                
                db.commit()
                
            self.logger.info(f"Cleared {len(expired_auths)} local authorizations")
            return call_result.ClearCache(status=ClearCacheStatus.accepted)
            
        except Exception as e:
            self.logger.error(f"Error in ClearCache: {e}")
            return call_result.ClearCache(status=ClearCacheStatus.rejected)

    @on('GetDiagnostics')
    def on_get_diagnostics(self, location, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        retries = kwargs.get('retries', 1)
        retry_interval = kwargs.get('retry_interval', 60)
        start_time = kwargs.get('start_time')
        stop_time = kwargs.get('stop_time')
        
        self.logger.info(f"GetDiagnostics request to location: {location}")
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å
            # —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            filename = f"diagnostics_{self.id}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.log"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            with next(get_db()) as db:
                OCPPConfigurationService.set_configuration(
                    db, self.id, "DiagnosticsLocation", location
                )
                OCPPConfigurationService.set_configuration(
                    db, self.id, "DiagnosticsFilename", filename
                )
            
            return call_result.GetDiagnostics(file_name=filename)
            
        except Exception as e:
            self.logger.error(f"Error in GetDiagnostics: {e}")
            return call_result.GetDiagnostics(file_name=None)

    @on('UpdateFirmware')
    def on_update_firmware(self, location, retrieve_date, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏"""
        retries = kwargs.get('retries', 1)
        retry_interval = kwargs.get('retry_interval', 60)
        
        self.logger.info(f"UpdateFirmware request: {location} at {retrieve_date}")
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞
            # –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –ø—Ä–æ—à–∏–≤–∫–∏
            
            with next(get_db()) as db:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                OCPPConfigurationService.set_configuration(
                    db, self.id, "FirmwareUpdateLocation", location
                )
                OCPPConfigurationService.set_configuration(
                    db, self.id, "FirmwareUpdateDate", retrieve_date
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏
                OCPPStationService.update_station_status(
                    db, self.id, "Unavailable", None, "Firmware update scheduled"
                )
            
            return call_result.UpdateFirmware()
            
        except Exception as e:
            self.logger.error(f"Error in UpdateFirmware: {e}")
            return call_result.UpdateFirmware()

    # ============================================================================ 
    # TIER 3: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï (–ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    # ============================================================================

    @on('TriggerMessage')
    def on_trigger_message(self, requested_message, **kwargs):
        """–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        connector_id = kwargs.get('connector_id')
        
        self.logger.info(f"TriggerMessage: {requested_message} for connector {connector_id}")
        
        try:
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç requested_message –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if requested_message == MessageTrigger.boot_notification:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É BootNotification
                pass
            elif requested_message == MessageTrigger.heartbeat:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Heartbeat
                pass
            elif requested_message == MessageTrigger.status_notification:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É StatusNotification
                pass
            elif requested_message == MessageTrigger.meter_values:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É MeterValues
                pass
            
            return call_result.TriggerMessage(
                status=TriggerMessageStatus.accepted
            )
            
        except Exception as e:
            self.logger.error(f"Error in TriggerMessage: {e}")
            return call_result.TriggerMessage(
                status=TriggerMessageStatus.rejected
            )

    @on('SendLocalList')
    def on_send_local_list(self, list_version, update_type, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        local_authorization_list = kwargs.get('local_authorization_list', [])
        
        self.logger.info(f"SendLocalList: version={list_version}, type={update_type}")
        
        try:
            with next(get_db()) as db:
                if update_type == UpdateType.full:
                    # –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–ø–∏—Å–∫–∞
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    db.query(OCPPAuthorization).filter(
                        OCPPAuthorization.station_id == self.id,
                        OCPPAuthorization.is_local == True
                    ).delete()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
                for item in local_authorization_list:
                    id_tag = item.get('id_tag')
                    id_tag_info = item.get('id_tag_info', {})
                    
                    auth = OCPPAuthorization(
                        station_id=self.id,
                        id_tag=id_tag,
                        status=id_tag_info.get('status', 'Accepted'),
                        is_local=True,
                        expires_at=datetime.fromisoformat(id_tag_info['expiry_date']) 
                                   if id_tag_info.get('expiry_date') else None
                    )
                    db.add(auth)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é —Å–ø–∏—Å–∫–∞
                OCPPConfigurationService.set_configuration(
                    db, self.id, "LocalListVersion", str(list_version)
                )
                
                db.commit()
            
            return call_result.SendLocalList(status=UpdateStatus.accepted)
            
        except Exception as e:
            self.logger.error(f"Error in SendLocalList: {e}")
            return call_result.SendLocalList(status=UpdateStatus.failed)

    @on('GetLocalListVersion')
    def on_get_local_list_version(self, **kwargs):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.logger.info("GetLocalListVersion request")
        
        try:
            with next(get_db()) as db:
                configs = OCPPConfigurationService.get_configuration(
                    db, self.id, ["LocalListVersion"]
                )
                
                version = 0
                if configs:
                    try:
                        version = int(configs[0].value)
                    except (ValueError, IndexError):
                        version = 0
            
            return call_result.GetLocalListVersion(list_version=version)
            
        except Exception as e:
            self.logger.error(f"Error in GetLocalListVersion: {e}")
            return call_result.GetLocalListVersion(list_version=0)

    async def _perform_error_diagnostics(self, connector_id: int, error_code: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            self.logger.info(f"üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ {connector_id}, –æ—à–∏–±–∫–∞: {error_code}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            await asyncio.sleep(2)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–∏
            try:
                config_response = await self.call(call.GetConfiguration())
                self.logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞: {len(config_response.configuration_key if config_response.configuration_key else [])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if config_response.configuration_key:
                    for config in config_response.configuration_key:
                        if config.key in ['HeartbeatInterval', 'MeterValueSampleInterval', 'NumberOfConnectors', 'SupportedFeatureProfiles']:
                            self.logger.info(f"   {config.key}: {config.value}")
                            
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            try:
                diag_response = await self.call(call.GetDiagnostics(
                    location=f"ftp://example.com/diagnostics_{self.id}_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.log"
                ))
                self.logger.info(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {diag_response}")
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ OtherError, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DataTransfer
            if error_code == "OtherError":
                try:
                    data_response = await self.call(call.DataTransfer(
                        vendor_id="diagnostics",
                        message_id="error_details",
                        data=f"connector_{connector_id}"
                    ))
                    self.logger.info(f"üîç DataTransfer –æ—Ç–≤–µ—Ç: {data_response}")
                    
                except Exception as e:
                    self.logger.debug(f"DataTransfer –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {e}")
            
            self.logger.info(f"‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ {connector_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")


class OCPPWebSocketHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCPP WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    def __init__(self, station_id: str, websocket: WebSocket):
        self.station_id = station_id
        self.websocket = websocket
        self.charge_point: Optional[OCPPChargePoint] = None
        self.pubsub_task: Optional[asyncio.Task] = None
        self.logger = logging.getLogger(f"OCPPHandler.{station_id}")
        
    async def handle_connection(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connection_start = datetime.utcnow()
        client_info = getattr(self.websocket, 'client', None)
        client_ip = client_info.host if client_info else 'unknown'
        
        self.logger.info(f"üîå –ù–û–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: Station {self.station_id} –æ—Ç IP {client_ip}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –ë–î
            with next(get_db()) as db:
                result = db.execute(text("""
                    SELECT id, status FROM stations 
                    WHERE id = :station_id AND status = 'active'
                """), {"station_id": self.station_id})
                
                station = result.fetchone()
                if not station:
                    self.logger.warning(f"‚ùå –°—Ç–∞–Ω—Ü–∏—è {self.station_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                    await self.websocket.close(code=1008, reason="Unknown station")
                    return
            
            self.logger.info(f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è {self.station_id} –Ω–∞–π–¥–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞")
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å OCPP 1.6 subprotocol
            self.logger.debug(f"–ü—Ä–∏–Ω–∏–º–∞–µ–º WebSocket –¥–ª—è {self.station_id}")
            await self.websocket.accept(subprotocol="ocpp1.6")
            self.logger.debug(f"WebSocket –ø—Ä–∏–Ω—è—Ç –¥–ª—è {self.station_id} —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º ocpp1.6")
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è OCPP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            adapter = WebSocketAdapter(self.websocket)
            self.charge_point = OCPPChargePoint(self.station_id, adapter)
            self.logger.debug(f"OCPP ChargePoint —Å–æ–∑–¥–∞–Ω –¥–ª—è {self.station_id}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏—é –≤ Redis
            await redis_manager.register_station(self.station_id)
            self.logger.debug(f"–°—Ç–∞–Ω—Ü–∏—è {self.station_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ Redis")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ Redis
            self.pubsub_task = asyncio.create_task(
                self._handle_redis_commands()
            )
            self.logger.debug(f"Redis pub/sub task –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.station_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º OCPP charge point
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ OCPP ChargePoint –¥–ª—è {self.station_id}")
            await self.charge_point.start()
            
        except WebSocketDisconnect:
            connection_duration = (datetime.utcnow() - connection_start).total_seconds()
            self.logger.info(f"üîå –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï: Station {self.station_id} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {connection_duration:.1f}—Å)")
        except Exception as e:
            connection_duration = (datetime.utcnow() - connection_start).total_seconds()
            self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: Station {self.station_id} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {connection_duration:.1f}—Å): {e}")
            self.logger.debug(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {self.station_id}:", exc_info=True)
        finally:
            await self._cleanup()
    
    async def _handle_redis_commands(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ Redis pub/sub"""
        try:
            async for command in redis_manager.listen_commands(self.station_id):
                self.logger.info(f"Received command: {command}")
                
                if not self.charge_point:
                    continue
                    
                command_type = command.get("action")
                
                try:
                    if command_type == "RemoteStartTransaction":
                        # üÜï –°–û–•–†–ê–ù–Ø–ï–ú –õ–ò–ú–ò–¢–´ –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        session_id = command.get("session_id")
                        limit_type = command.get("limit_type")
                        limit_value = command.get("limit_value")
                        
                        if session_id and limit_type and limit_value:
                            active_sessions[self.station_id] = {
                                'charging_session_id': session_id,
                                'limit_type': limit_type,
                                'limit_value': float(limit_value),
                                'energy_delivered': 0.0
                            }
                            self.logger.info(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {limit_type} = {limit_value} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                        
                        response = await self.charge_point.call(
                            call.RemoteStartTransaction(
                                connector_id=command.get("connector_id", 1),
                                id_tag=command.get("id_tag", "system")
                            )
                        )
                        self.logger.info(f"RemoteStartTransaction response: {response}")
                        
                    elif command_type == "RemoteStopTransaction":
                        session = active_sessions.get(self.station_id, {})
                        transaction_id = session.get('transaction_id', 
                                                   command.get("transaction_id", 1))
                        
                        response = await self.charge_point.call(
                            call.RemoteStopTransaction(transaction_id=transaction_id)
                        )
                        self.logger.info(f"RemoteStopTransaction response: {response}")
                        
                    elif command_type == "Reset":
                        reset_type = command.get("type", "Soft")
                        response = await self.charge_point.call(
                            call.Reset(type=ResetType[reset_type.lower()])
                        )
                        self.logger.info(f"Reset response: {response}")
                        
                    elif command_type == "UnlockConnector":
                        connector_id = command.get("connectorId", 1)
                        response = await self.charge_point.call(
                            call.UnlockConnector(connector_id=connector_id)
                        )
                        self.logger.info(f"UnlockConnector response: {response}")
                        
                    elif command_type == "ChangeConfiguration":
                        key = command.get("key")
                        value = command.get("value")
                        if key and value:
                            response = await self.charge_point.call(
                                call.ChangeConfiguration(key=key, value=value)
                            )
                            self.logger.info(f"ChangeConfiguration response: {response}")
                            
                    elif command_type == "GetConfiguration":
                        keys = command.get("keys", [])
                        response = await self.charge_point.call(
                            call.GetConfiguration(key=keys if keys else None)
                        )
                        self.logger.info(f"GetConfiguration response: {response}")
                        
                    elif command_type == "ChangeAvailability":
                        connector_id = command.get("connectorId", 0)
                        availability_type = command.get("type", "Operative")
                        response = await self.charge_point.call(
                            call.ChangeAvailability(
                                connector_id=connector_id,
                                type=AvailabilityType[availability_type.lower()]
                            )
                        )
                        self.logger.info(f"ChangeAvailability response: {response}")
                        
                    elif command_type == "ClearCache":
                        response = await self.charge_point.call(call.ClearCache())
                        self.logger.info(f"ClearCache response: {response}")
                        
                    elif command_type == "GetDiagnostics":
                        location = command.get("location", "/tmp/diagnostics.log")
                        response = await self.charge_point.call(
                            call.GetDiagnostics(location=location)
                        )
                        self.logger.info(f"GetDiagnostics response: {response}")
                        
                    elif command_type == "UpdateFirmware":
                        location = command.get("location")
                        retrieve_date = command.get("retrieveDate")
                        if location and retrieve_date:
                            response = await self.charge_point.call(
                                call.UpdateFirmware(
                                    location=location,
                                    retrieve_date=retrieve_date
                                )
                            )
                            self.logger.info(f"UpdateFirmware response: {response}")
                            
                    elif command_type == "TriggerMessage":
                        requested_message = command.get("requestedMessage")
                        connector_id = command.get("connectorId")
                        if requested_message:
                            response = await self.charge_point.call(
                                call.TriggerMessage(
                                    requested_message=MessageTrigger[requested_message.lower()],
                                    connector_id=connector_id
                                )
                            )
                            self.logger.info(f"TriggerMessage response: {response}")
                            
                except Exception as e:
                    self.logger.error(f"Error executing command {command_type}: {e}")
                    
        except Exception as e:
            self.logger.error(f"Error in Redis command handler: {e}")
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            if self.pubsub_task:
                self.pubsub_task.cancel()
                
            await redis_manager.unregister_station(self.station_id)
            
            if self.station_id in active_sessions:
                del active_sessions[self.station_id]
                
            self.logger.info(f"Cleanup completed for station {self.station_id}")
            
        except Exception as e:
            self.logger.error(f"Error during cleanup: {e}")


class WebSocketAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä FastAPI WebSocket –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å OCPP –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π"""
    
    def __init__(self, websocket: WebSocket):
        self.websocket = websocket
    
    async def recv(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = await self.websocket.receive_text()
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger = logging.getLogger(f"OCPP.{getattr(self.websocket, 'station_id', 'unknown')}")
        logger.debug(f"üì• –ü–û–õ–£–ß–ï–ù–û: {message}")
        return message
    
    async def send(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger = logging.getLogger(f"OCPP.{getattr(self.websocket, 'station_id', 'unknown')}")
        logger.debug(f"üì§ –û–¢–ü–†–ê–í–õ–ï–ù–û: {message}")
        await self.websocket.send_text(message)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.websocket.close() 